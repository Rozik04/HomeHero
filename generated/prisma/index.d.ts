
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Region
 * 
 */
export type Region = $Result.DefaultSelection<Prisma.$RegionPayload>
/**
 * Model Basket
 * 
 */
export type Basket = $Result.DefaultSelection<Prisma.$BasketPayload>
/**
 * Model Order
 * 
 */
export type Order = $Result.DefaultSelection<Prisma.$OrderPayload>
/**
 * Model OrderItem
 * 
 */
export type OrderItem = $Result.DefaultSelection<Prisma.$OrderItemPayload>
/**
 * Model Brand
 * 
 */
export type Brand = $Result.DefaultSelection<Prisma.$BrandPayload>
/**
 * Model Capacity
 * 
 */
export type Capacity = $Result.DefaultSelection<Prisma.$CapacityPayload>
/**
 * Model Size
 * 
 */
export type Size = $Result.DefaultSelection<Prisma.$SizePayload>
/**
 * Model Comment
 * 
 */
export type Comment = $Result.DefaultSelection<Prisma.$CommentPayload>
/**
 * Model Master
 * 
 */
export type Master = $Result.DefaultSelection<Prisma.$MasterPayload>
/**
 * Model MasterJobs
 * 
 */
export type MasterJobs = $Result.DefaultSelection<Prisma.$MasterJobsPayload>
/**
 * Model GeneralInfo
 * 
 */
export type GeneralInfo = $Result.DefaultSelection<Prisma.$GeneralInfoPayload>
/**
 * Model ShowCase
 * 
 */
export type ShowCase = $Result.DefaultSelection<Prisma.$ShowCasePayload>
/**
 * Model FAQ
 * 
 */
export type FAQ = $Result.DefaultSelection<Prisma.$FAQPayload>
/**
 * Model Contact
 * 
 */
export type Contact = $Result.DefaultSelection<Prisma.$ContactPayload>
/**
 * Model Partner
 * 
 */
export type Partner = $Result.DefaultSelection<Prisma.$PartnerPayload>
/**
 * Model Product
 * 
 */
export type Product = $Result.DefaultSelection<Prisma.$ProductPayload>
/**
 * Model Level
 * 
 */
export type Level = $Result.DefaultSelection<Prisma.$LevelPayload>
/**
 * Model Tool
 * 
 */
export type Tool = $Result.DefaultSelection<Prisma.$ToolPayload>
/**
 * Model ProductLevel
 * 
 */
export type ProductLevel = $Result.DefaultSelection<Prisma.$ProductLevelPayload>
/**
 * Model ProductTool
 * 
 */
export type ProductTool = $Result.DefaultSelection<Prisma.$ProductToolPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const ShowCaseType: {
  slider: 'slider',
  banner: 'banner',
  card: 'card'
};

export type ShowCaseType = (typeof ShowCaseType)[keyof typeof ShowCaseType]


export const UserRole: {
  admin: 'admin',
  superadmin: 'superadmin',
  vieweradmin: 'vieweradmin',
  legaluser: 'legaluser',
  individualuser: 'individualuser'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const UserStatus: {
  active: 'active',
  passive: 'passive'
};

export type UserStatus = (typeof UserStatus)[keyof typeof UserStatus]


export const PaymentType: {
  cash: 'cash',
  card: 'card'
};

export type PaymentType = (typeof PaymentType)[keyof typeof PaymentType]


export const OrderStatus: {
  pending: 'pending',
  accepted: 'accepted',
  rejected: 'rejected',
  canceled: 'canceled',
  delivered: 'delivered'
};

export type OrderStatus = (typeof OrderStatus)[keyof typeof OrderStatus]

}

export type ShowCaseType = $Enums.ShowCaseType

export const ShowCaseType: typeof $Enums.ShowCaseType

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type UserStatus = $Enums.UserStatus

export const UserStatus: typeof $Enums.UserStatus

export type PaymentType = $Enums.PaymentType

export const PaymentType: typeof $Enums.PaymentType

export type OrderStatus = $Enums.OrderStatus

export const OrderStatus: typeof $Enums.OrderStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.region`: Exposes CRUD operations for the **Region** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Regions
    * const regions = await prisma.region.findMany()
    * ```
    */
  get region(): Prisma.RegionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.basket`: Exposes CRUD operations for the **Basket** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Baskets
    * const baskets = await prisma.basket.findMany()
    * ```
    */
  get basket(): Prisma.BasketDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.order`: Exposes CRUD operations for the **Order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.order.findMany()
    * ```
    */
  get order(): Prisma.OrderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.orderItem`: Exposes CRUD operations for the **OrderItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrderItems
    * const orderItems = await prisma.orderItem.findMany()
    * ```
    */
  get orderItem(): Prisma.OrderItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.brand`: Exposes CRUD operations for the **Brand** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Brands
    * const brands = await prisma.brand.findMany()
    * ```
    */
  get brand(): Prisma.BrandDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.capacity`: Exposes CRUD operations for the **Capacity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Capacities
    * const capacities = await prisma.capacity.findMany()
    * ```
    */
  get capacity(): Prisma.CapacityDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.size`: Exposes CRUD operations for the **Size** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sizes
    * const sizes = await prisma.size.findMany()
    * ```
    */
  get size(): Prisma.SizeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.master`: Exposes CRUD operations for the **Master** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Masters
    * const masters = await prisma.master.findMany()
    * ```
    */
  get master(): Prisma.MasterDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.masterJobs`: Exposes CRUD operations for the **MasterJobs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MasterJobs
    * const masterJobs = await prisma.masterJobs.findMany()
    * ```
    */
  get masterJobs(): Prisma.MasterJobsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.generalInfo`: Exposes CRUD operations for the **GeneralInfo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GeneralInfos
    * const generalInfos = await prisma.generalInfo.findMany()
    * ```
    */
  get generalInfo(): Prisma.GeneralInfoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.showCase`: Exposes CRUD operations for the **ShowCase** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShowCases
    * const showCases = await prisma.showCase.findMany()
    * ```
    */
  get showCase(): Prisma.ShowCaseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.fAQ`: Exposes CRUD operations for the **FAQ** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FAQS
    * const fAQS = await prisma.fAQ.findMany()
    * ```
    */
  get fAQ(): Prisma.FAQDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contact`: Exposes CRUD operations for the **Contact** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contacts
    * const contacts = await prisma.contact.findMany()
    * ```
    */
  get contact(): Prisma.ContactDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.partner`: Exposes CRUD operations for the **Partner** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Partners
    * const partners = await prisma.partner.findMany()
    * ```
    */
  get partner(): Prisma.PartnerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.level`: Exposes CRUD operations for the **Level** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Levels
    * const levels = await prisma.level.findMany()
    * ```
    */
  get level(): Prisma.LevelDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tool`: Exposes CRUD operations for the **Tool** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tools
    * const tools = await prisma.tool.findMany()
    * ```
    */
  get tool(): Prisma.ToolDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.productLevel`: Exposes CRUD operations for the **ProductLevel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductLevels
    * const productLevels = await prisma.productLevel.findMany()
    * ```
    */
  get productLevel(): Prisma.ProductLevelDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.productTool`: Exposes CRUD operations for the **ProductTool** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductTools
    * const productTools = await prisma.productTool.findMany()
    * ```
    */
  get productTool(): Prisma.ProductToolDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Region: 'Region',
    Basket: 'Basket',
    Order: 'Order',
    OrderItem: 'OrderItem',
    Brand: 'Brand',
    Capacity: 'Capacity',
    Size: 'Size',
    Comment: 'Comment',
    Master: 'Master',
    MasterJobs: 'MasterJobs',
    GeneralInfo: 'GeneralInfo',
    ShowCase: 'ShowCase',
    FAQ: 'FAQ',
    Contact: 'Contact',
    Partner: 'Partner',
    Product: 'Product',
    Level: 'Level',
    Tool: 'Tool',
    ProductLevel: 'ProductLevel',
    ProductTool: 'ProductTool'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "region" | "basket" | "order" | "orderItem" | "brand" | "capacity" | "size" | "comment" | "master" | "masterJobs" | "generalInfo" | "showCase" | "fAQ" | "contact" | "partner" | "product" | "level" | "tool" | "productLevel" | "productTool"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Region: {
        payload: Prisma.$RegionPayload<ExtArgs>
        fields: Prisma.RegionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RegionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RegionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          findFirst: {
            args: Prisma.RegionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RegionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          findMany: {
            args: Prisma.RegionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>[]
          }
          create: {
            args: Prisma.RegionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          createMany: {
            args: Prisma.RegionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RegionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>[]
          }
          delete: {
            args: Prisma.RegionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          update: {
            args: Prisma.RegionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          deleteMany: {
            args: Prisma.RegionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RegionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RegionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>[]
          }
          upsert: {
            args: Prisma.RegionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          aggregate: {
            args: Prisma.RegionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRegion>
          }
          groupBy: {
            args: Prisma.RegionGroupByArgs<ExtArgs>
            result: $Utils.Optional<RegionGroupByOutputType>[]
          }
          count: {
            args: Prisma.RegionCountArgs<ExtArgs>
            result: $Utils.Optional<RegionCountAggregateOutputType> | number
          }
        }
      }
      Basket: {
        payload: Prisma.$BasketPayload<ExtArgs>
        fields: Prisma.BasketFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BasketFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BasketFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload>
          }
          findFirst: {
            args: Prisma.BasketFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BasketFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload>
          }
          findMany: {
            args: Prisma.BasketFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload>[]
          }
          create: {
            args: Prisma.BasketCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload>
          }
          createMany: {
            args: Prisma.BasketCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BasketCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload>[]
          }
          delete: {
            args: Prisma.BasketDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload>
          }
          update: {
            args: Prisma.BasketUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload>
          }
          deleteMany: {
            args: Prisma.BasketDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BasketUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BasketUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload>[]
          }
          upsert: {
            args: Prisma.BasketUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload>
          }
          aggregate: {
            args: Prisma.BasketAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBasket>
          }
          groupBy: {
            args: Prisma.BasketGroupByArgs<ExtArgs>
            result: $Utils.Optional<BasketGroupByOutputType>[]
          }
          count: {
            args: Prisma.BasketCountArgs<ExtArgs>
            result: $Utils.Optional<BasketCountAggregateOutputType> | number
          }
        }
      }
      Order: {
        payload: Prisma.$OrderPayload<ExtArgs>
        fields: Prisma.OrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findFirst: {
            args: Prisma.OrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findMany: {
            args: Prisma.OrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          create: {
            args: Prisma.OrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          createMany: {
            args: Prisma.OrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          delete: {
            args: Prisma.OrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          update: {
            args: Prisma.OrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          deleteMany: {
            args: Prisma.OrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          upsert: {
            args: Prisma.OrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          aggregate: {
            args: Prisma.OrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrder>
          }
          groupBy: {
            args: Prisma.OrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderCountArgs<ExtArgs>
            result: $Utils.Optional<OrderCountAggregateOutputType> | number
          }
        }
      }
      OrderItem: {
        payload: Prisma.$OrderItemPayload<ExtArgs>
        fields: Prisma.OrderItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          findFirst: {
            args: Prisma.OrderItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          findMany: {
            args: Prisma.OrderItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>[]
          }
          create: {
            args: Prisma.OrderItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          createMany: {
            args: Prisma.OrderItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>[]
          }
          delete: {
            args: Prisma.OrderItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          update: {
            args: Prisma.OrderItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          deleteMany: {
            args: Prisma.OrderItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrderItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>[]
          }
          upsert: {
            args: Prisma.OrderItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          aggregate: {
            args: Prisma.OrderItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrderItem>
          }
          groupBy: {
            args: Prisma.OrderItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderItemCountArgs<ExtArgs>
            result: $Utils.Optional<OrderItemCountAggregateOutputType> | number
          }
        }
      }
      Brand: {
        payload: Prisma.$BrandPayload<ExtArgs>
        fields: Prisma.BrandFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BrandFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BrandFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          findFirst: {
            args: Prisma.BrandFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BrandFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          findMany: {
            args: Prisma.BrandFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>[]
          }
          create: {
            args: Prisma.BrandCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          createMany: {
            args: Prisma.BrandCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BrandCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>[]
          }
          delete: {
            args: Prisma.BrandDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          update: {
            args: Prisma.BrandUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          deleteMany: {
            args: Prisma.BrandDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BrandUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BrandUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>[]
          }
          upsert: {
            args: Prisma.BrandUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          aggregate: {
            args: Prisma.BrandAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBrand>
          }
          groupBy: {
            args: Prisma.BrandGroupByArgs<ExtArgs>
            result: $Utils.Optional<BrandGroupByOutputType>[]
          }
          count: {
            args: Prisma.BrandCountArgs<ExtArgs>
            result: $Utils.Optional<BrandCountAggregateOutputType> | number
          }
        }
      }
      Capacity: {
        payload: Prisma.$CapacityPayload<ExtArgs>
        fields: Prisma.CapacityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CapacityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapacityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CapacityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapacityPayload>
          }
          findFirst: {
            args: Prisma.CapacityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapacityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CapacityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapacityPayload>
          }
          findMany: {
            args: Prisma.CapacityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapacityPayload>[]
          }
          create: {
            args: Prisma.CapacityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapacityPayload>
          }
          createMany: {
            args: Prisma.CapacityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CapacityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapacityPayload>[]
          }
          delete: {
            args: Prisma.CapacityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapacityPayload>
          }
          update: {
            args: Prisma.CapacityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapacityPayload>
          }
          deleteMany: {
            args: Prisma.CapacityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CapacityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CapacityUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapacityPayload>[]
          }
          upsert: {
            args: Prisma.CapacityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapacityPayload>
          }
          aggregate: {
            args: Prisma.CapacityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCapacity>
          }
          groupBy: {
            args: Prisma.CapacityGroupByArgs<ExtArgs>
            result: $Utils.Optional<CapacityGroupByOutputType>[]
          }
          count: {
            args: Prisma.CapacityCountArgs<ExtArgs>
            result: $Utils.Optional<CapacityCountAggregateOutputType> | number
          }
        }
      }
      Size: {
        payload: Prisma.$SizePayload<ExtArgs>
        fields: Prisma.SizeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SizeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SizeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>
          }
          findFirst: {
            args: Prisma.SizeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SizeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>
          }
          findMany: {
            args: Prisma.SizeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>[]
          }
          create: {
            args: Prisma.SizeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>
          }
          createMany: {
            args: Prisma.SizeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SizeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>[]
          }
          delete: {
            args: Prisma.SizeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>
          }
          update: {
            args: Prisma.SizeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>
          }
          deleteMany: {
            args: Prisma.SizeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SizeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SizeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>[]
          }
          upsert: {
            args: Prisma.SizeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>
          }
          aggregate: {
            args: Prisma.SizeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSize>
          }
          groupBy: {
            args: Prisma.SizeGroupByArgs<ExtArgs>
            result: $Utils.Optional<SizeGroupByOutputType>[]
          }
          count: {
            args: Prisma.SizeCountArgs<ExtArgs>
            result: $Utils.Optional<SizeCountAggregateOutputType> | number
          }
        }
      }
      Comment: {
        payload: Prisma.$CommentPayload<ExtArgs>
        fields: Prisma.CommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          createMany: {
            args: Prisma.CommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CommentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
      Master: {
        payload: Prisma.$MasterPayload<ExtArgs>
        fields: Prisma.MasterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MasterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MasterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>
          }
          findFirst: {
            args: Prisma.MasterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MasterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>
          }
          findMany: {
            args: Prisma.MasterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>[]
          }
          create: {
            args: Prisma.MasterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>
          }
          createMany: {
            args: Prisma.MasterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MasterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>[]
          }
          delete: {
            args: Prisma.MasterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>
          }
          update: {
            args: Prisma.MasterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>
          }
          deleteMany: {
            args: Prisma.MasterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MasterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MasterUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>[]
          }
          upsert: {
            args: Prisma.MasterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>
          }
          aggregate: {
            args: Prisma.MasterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMaster>
          }
          groupBy: {
            args: Prisma.MasterGroupByArgs<ExtArgs>
            result: $Utils.Optional<MasterGroupByOutputType>[]
          }
          count: {
            args: Prisma.MasterCountArgs<ExtArgs>
            result: $Utils.Optional<MasterCountAggregateOutputType> | number
          }
        }
      }
      MasterJobs: {
        payload: Prisma.$MasterJobsPayload<ExtArgs>
        fields: Prisma.MasterJobsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MasterJobsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterJobsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MasterJobsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterJobsPayload>
          }
          findFirst: {
            args: Prisma.MasterJobsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterJobsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MasterJobsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterJobsPayload>
          }
          findMany: {
            args: Prisma.MasterJobsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterJobsPayload>[]
          }
          create: {
            args: Prisma.MasterJobsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterJobsPayload>
          }
          createMany: {
            args: Prisma.MasterJobsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MasterJobsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterJobsPayload>[]
          }
          delete: {
            args: Prisma.MasterJobsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterJobsPayload>
          }
          update: {
            args: Prisma.MasterJobsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterJobsPayload>
          }
          deleteMany: {
            args: Prisma.MasterJobsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MasterJobsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MasterJobsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterJobsPayload>[]
          }
          upsert: {
            args: Prisma.MasterJobsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterJobsPayload>
          }
          aggregate: {
            args: Prisma.MasterJobsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMasterJobs>
          }
          groupBy: {
            args: Prisma.MasterJobsGroupByArgs<ExtArgs>
            result: $Utils.Optional<MasterJobsGroupByOutputType>[]
          }
          count: {
            args: Prisma.MasterJobsCountArgs<ExtArgs>
            result: $Utils.Optional<MasterJobsCountAggregateOutputType> | number
          }
        }
      }
      GeneralInfo: {
        payload: Prisma.$GeneralInfoPayload<ExtArgs>
        fields: Prisma.GeneralInfoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GeneralInfoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralInfoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GeneralInfoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralInfoPayload>
          }
          findFirst: {
            args: Prisma.GeneralInfoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralInfoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GeneralInfoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralInfoPayload>
          }
          findMany: {
            args: Prisma.GeneralInfoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralInfoPayload>[]
          }
          create: {
            args: Prisma.GeneralInfoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralInfoPayload>
          }
          createMany: {
            args: Prisma.GeneralInfoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GeneralInfoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralInfoPayload>[]
          }
          delete: {
            args: Prisma.GeneralInfoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralInfoPayload>
          }
          update: {
            args: Prisma.GeneralInfoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralInfoPayload>
          }
          deleteMany: {
            args: Prisma.GeneralInfoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GeneralInfoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GeneralInfoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralInfoPayload>[]
          }
          upsert: {
            args: Prisma.GeneralInfoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralInfoPayload>
          }
          aggregate: {
            args: Prisma.GeneralInfoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGeneralInfo>
          }
          groupBy: {
            args: Prisma.GeneralInfoGroupByArgs<ExtArgs>
            result: $Utils.Optional<GeneralInfoGroupByOutputType>[]
          }
          count: {
            args: Prisma.GeneralInfoCountArgs<ExtArgs>
            result: $Utils.Optional<GeneralInfoCountAggregateOutputType> | number
          }
        }
      }
      ShowCase: {
        payload: Prisma.$ShowCasePayload<ExtArgs>
        fields: Prisma.ShowCaseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShowCaseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShowCasePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShowCaseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShowCasePayload>
          }
          findFirst: {
            args: Prisma.ShowCaseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShowCasePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShowCaseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShowCasePayload>
          }
          findMany: {
            args: Prisma.ShowCaseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShowCasePayload>[]
          }
          create: {
            args: Prisma.ShowCaseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShowCasePayload>
          }
          createMany: {
            args: Prisma.ShowCaseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ShowCaseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShowCasePayload>[]
          }
          delete: {
            args: Prisma.ShowCaseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShowCasePayload>
          }
          update: {
            args: Prisma.ShowCaseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShowCasePayload>
          }
          deleteMany: {
            args: Prisma.ShowCaseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShowCaseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ShowCaseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShowCasePayload>[]
          }
          upsert: {
            args: Prisma.ShowCaseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShowCasePayload>
          }
          aggregate: {
            args: Prisma.ShowCaseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShowCase>
          }
          groupBy: {
            args: Prisma.ShowCaseGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShowCaseGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShowCaseCountArgs<ExtArgs>
            result: $Utils.Optional<ShowCaseCountAggregateOutputType> | number
          }
        }
      }
      FAQ: {
        payload: Prisma.$FAQPayload<ExtArgs>
        fields: Prisma.FAQFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FAQFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FAQFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>
          }
          findFirst: {
            args: Prisma.FAQFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FAQFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>
          }
          findMany: {
            args: Prisma.FAQFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>[]
          }
          create: {
            args: Prisma.FAQCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>
          }
          createMany: {
            args: Prisma.FAQCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FAQCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>[]
          }
          delete: {
            args: Prisma.FAQDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>
          }
          update: {
            args: Prisma.FAQUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>
          }
          deleteMany: {
            args: Prisma.FAQDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FAQUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FAQUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>[]
          }
          upsert: {
            args: Prisma.FAQUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>
          }
          aggregate: {
            args: Prisma.FAQAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFAQ>
          }
          groupBy: {
            args: Prisma.FAQGroupByArgs<ExtArgs>
            result: $Utils.Optional<FAQGroupByOutputType>[]
          }
          count: {
            args: Prisma.FAQCountArgs<ExtArgs>
            result: $Utils.Optional<FAQCountAggregateOutputType> | number
          }
        }
      }
      Contact: {
        payload: Prisma.$ContactPayload<ExtArgs>
        fields: Prisma.ContactFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContactFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContactFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          findFirst: {
            args: Prisma.ContactFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContactFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          findMany: {
            args: Prisma.ContactFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>[]
          }
          create: {
            args: Prisma.ContactCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          createMany: {
            args: Prisma.ContactCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContactCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>[]
          }
          delete: {
            args: Prisma.ContactDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          update: {
            args: Prisma.ContactUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          deleteMany: {
            args: Prisma.ContactDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContactUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ContactUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>[]
          }
          upsert: {
            args: Prisma.ContactUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          aggregate: {
            args: Prisma.ContactAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContact>
          }
          groupBy: {
            args: Prisma.ContactGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContactGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContactCountArgs<ExtArgs>
            result: $Utils.Optional<ContactCountAggregateOutputType> | number
          }
        }
      }
      Partner: {
        payload: Prisma.$PartnerPayload<ExtArgs>
        fields: Prisma.PartnerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PartnerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PartnerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload>
          }
          findFirst: {
            args: Prisma.PartnerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PartnerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload>
          }
          findMany: {
            args: Prisma.PartnerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload>[]
          }
          create: {
            args: Prisma.PartnerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload>
          }
          createMany: {
            args: Prisma.PartnerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PartnerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload>[]
          }
          delete: {
            args: Prisma.PartnerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload>
          }
          update: {
            args: Prisma.PartnerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload>
          }
          deleteMany: {
            args: Prisma.PartnerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PartnerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PartnerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload>[]
          }
          upsert: {
            args: Prisma.PartnerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload>
          }
          aggregate: {
            args: Prisma.PartnerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePartner>
          }
          groupBy: {
            args: Prisma.PartnerGroupByArgs<ExtArgs>
            result: $Utils.Optional<PartnerGroupByOutputType>[]
          }
          count: {
            args: Prisma.PartnerCountArgs<ExtArgs>
            result: $Utils.Optional<PartnerCountAggregateOutputType> | number
          }
        }
      }
      Product: {
        payload: Prisma.$ProductPayload<ExtArgs>
        fields: Prisma.ProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProductUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      Level: {
        payload: Prisma.$LevelPayload<ExtArgs>
        fields: Prisma.LevelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LevelFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LevelFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>
          }
          findFirst: {
            args: Prisma.LevelFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LevelFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>
          }
          findMany: {
            args: Prisma.LevelFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>[]
          }
          create: {
            args: Prisma.LevelCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>
          }
          createMany: {
            args: Prisma.LevelCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LevelCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>[]
          }
          delete: {
            args: Prisma.LevelDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>
          }
          update: {
            args: Prisma.LevelUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>
          }
          deleteMany: {
            args: Prisma.LevelDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LevelUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LevelUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>[]
          }
          upsert: {
            args: Prisma.LevelUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>
          }
          aggregate: {
            args: Prisma.LevelAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLevel>
          }
          groupBy: {
            args: Prisma.LevelGroupByArgs<ExtArgs>
            result: $Utils.Optional<LevelGroupByOutputType>[]
          }
          count: {
            args: Prisma.LevelCountArgs<ExtArgs>
            result: $Utils.Optional<LevelCountAggregateOutputType> | number
          }
        }
      }
      Tool: {
        payload: Prisma.$ToolPayload<ExtArgs>
        fields: Prisma.ToolFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ToolFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ToolFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolPayload>
          }
          findFirst: {
            args: Prisma.ToolFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ToolFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolPayload>
          }
          findMany: {
            args: Prisma.ToolFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolPayload>[]
          }
          create: {
            args: Prisma.ToolCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolPayload>
          }
          createMany: {
            args: Prisma.ToolCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ToolCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolPayload>[]
          }
          delete: {
            args: Prisma.ToolDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolPayload>
          }
          update: {
            args: Prisma.ToolUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolPayload>
          }
          deleteMany: {
            args: Prisma.ToolDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ToolUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ToolUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolPayload>[]
          }
          upsert: {
            args: Prisma.ToolUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolPayload>
          }
          aggregate: {
            args: Prisma.ToolAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTool>
          }
          groupBy: {
            args: Prisma.ToolGroupByArgs<ExtArgs>
            result: $Utils.Optional<ToolGroupByOutputType>[]
          }
          count: {
            args: Prisma.ToolCountArgs<ExtArgs>
            result: $Utils.Optional<ToolCountAggregateOutputType> | number
          }
        }
      }
      ProductLevel: {
        payload: Prisma.$ProductLevelPayload<ExtArgs>
        fields: Prisma.ProductLevelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductLevelFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductLevelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductLevelFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductLevelPayload>
          }
          findFirst: {
            args: Prisma.ProductLevelFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductLevelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductLevelFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductLevelPayload>
          }
          findMany: {
            args: Prisma.ProductLevelFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductLevelPayload>[]
          }
          create: {
            args: Prisma.ProductLevelCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductLevelPayload>
          }
          createMany: {
            args: Prisma.ProductLevelCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductLevelCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductLevelPayload>[]
          }
          delete: {
            args: Prisma.ProductLevelDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductLevelPayload>
          }
          update: {
            args: Prisma.ProductLevelUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductLevelPayload>
          }
          deleteMany: {
            args: Prisma.ProductLevelDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductLevelUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProductLevelUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductLevelPayload>[]
          }
          upsert: {
            args: Prisma.ProductLevelUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductLevelPayload>
          }
          aggregate: {
            args: Prisma.ProductLevelAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductLevel>
          }
          groupBy: {
            args: Prisma.ProductLevelGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductLevelGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductLevelCountArgs<ExtArgs>
            result: $Utils.Optional<ProductLevelCountAggregateOutputType> | number
          }
        }
      }
      ProductTool: {
        payload: Prisma.$ProductToolPayload<ExtArgs>
        fields: Prisma.ProductToolFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductToolFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductToolPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductToolFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductToolPayload>
          }
          findFirst: {
            args: Prisma.ProductToolFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductToolPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductToolFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductToolPayload>
          }
          findMany: {
            args: Prisma.ProductToolFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductToolPayload>[]
          }
          create: {
            args: Prisma.ProductToolCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductToolPayload>
          }
          createMany: {
            args: Prisma.ProductToolCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductToolCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductToolPayload>[]
          }
          delete: {
            args: Prisma.ProductToolDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductToolPayload>
          }
          update: {
            args: Prisma.ProductToolUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductToolPayload>
          }
          deleteMany: {
            args: Prisma.ProductToolDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductToolUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProductToolUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductToolPayload>[]
          }
          upsert: {
            args: Prisma.ProductToolUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductToolPayload>
          }
          aggregate: {
            args: Prisma.ProductToolAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductTool>
          }
          groupBy: {
            args: Prisma.ProductToolGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductToolGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductToolCountArgs<ExtArgs>
            result: $Utils.Optional<ProductToolCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    region?: RegionOmit
    basket?: BasketOmit
    order?: OrderOmit
    orderItem?: OrderItemOmit
    brand?: BrandOmit
    capacity?: CapacityOmit
    size?: SizeOmit
    comment?: CommentOmit
    master?: MasterOmit
    masterJobs?: MasterJobsOmit
    generalInfo?: GeneralInfoOmit
    showCase?: ShowCaseOmit
    fAQ?: FAQOmit
    contact?: ContactOmit
    partner?: PartnerOmit
    product?: ProductOmit
    level?: LevelOmit
    tool?: ToolOmit
    productLevel?: ProductLevelOmit
    productTool?: ProductToolOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    baskets: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    baskets?: boolean | UserCountOutputTypeCountBasketsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBasketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BasketWhereInput
  }


  /**
   * Count Type RegionCountOutputType
   */

  export type RegionCountOutputType = {
    users: number
  }

  export type RegionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | RegionCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * RegionCountOutputType without action
   */
  export type RegionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionCountOutputType
     */
    select?: RegionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RegionCountOutputType without action
   */
  export type RegionCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type OrderCountOutputType
   */

  export type OrderCountOutputType = {
    items: number
    comments: number
  }

  export type OrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | OrderCountOutputTypeCountItemsArgs
    comments?: boolean | OrderCountOutputTypeCountCommentsArgs
  }

  // Custom InputTypes
  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCountOutputType
     */
    select?: OrderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemWhereInput
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }


  /**
   * Count Type BrandCountOutputType
   */

  export type BrandCountOutputType = {
    tools: number
  }

  export type BrandCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tools?: boolean | BrandCountOutputTypeCountToolsArgs
  }

  // Custom InputTypes
  /**
   * BrandCountOutputType without action
   */
  export type BrandCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrandCountOutputType
     */
    select?: BrandCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BrandCountOutputType without action
   */
  export type BrandCountOutputTypeCountToolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ToolWhereInput
  }


  /**
   * Count Type CapacityCountOutputType
   */

  export type CapacityCountOutputType = {
    tools: number
  }

  export type CapacityCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tools?: boolean | CapacityCountOutputTypeCountToolsArgs
  }

  // Custom InputTypes
  /**
   * CapacityCountOutputType without action
   */
  export type CapacityCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CapacityCountOutputType
     */
    select?: CapacityCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CapacityCountOutputType without action
   */
  export type CapacityCountOutputTypeCountToolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ToolWhereInput
  }


  /**
   * Count Type SizeCountOutputType
   */

  export type SizeCountOutputType = {
    tools: number
  }

  export type SizeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tools?: boolean | SizeCountOutputTypeCountToolsArgs
  }

  // Custom InputTypes
  /**
   * SizeCountOutputType without action
   */
  export type SizeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeCountOutputType
     */
    select?: SizeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SizeCountOutputType without action
   */
  export type SizeCountOutputTypeCountToolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ToolWhereInput
  }


  /**
   * Count Type MasterCountOutputType
   */

  export type MasterCountOutputType = {
    masterJobs: number
    comments: number
  }

  export type MasterCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    masterJobs?: boolean | MasterCountOutputTypeCountMasterJobsArgs
    comments?: boolean | MasterCountOutputTypeCountCommentsArgs
  }

  // Custom InputTypes
  /**
   * MasterCountOutputType without action
   */
  export type MasterCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterCountOutputType
     */
    select?: MasterCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MasterCountOutputType without action
   */
  export type MasterCountOutputTypeCountMasterJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MasterJobsWhereInput
  }

  /**
   * MasterCountOutputType without action
   */
  export type MasterCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }


  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    baskets: number
    orderItems: number
    masterJobs: number
    levels: number
    tools: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    baskets?: boolean | ProductCountOutputTypeCountBasketsArgs
    orderItems?: boolean | ProductCountOutputTypeCountOrderItemsArgs
    masterJobs?: boolean | ProductCountOutputTypeCountMasterJobsArgs
    levels?: boolean | ProductCountOutputTypeCountLevelsArgs
    tools?: boolean | ProductCountOutputTypeCountToolsArgs
  }

  // Custom InputTypes
  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountBasketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BasketWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountOrderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountMasterJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MasterJobsWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountLevelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductLevelWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountToolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductToolWhereInput
  }


  /**
   * Count Type LevelCountOutputType
   */

  export type LevelCountOutputType = {
    orderItems: number
    masterJobs: number
    products: number
    baskets: number
  }

  export type LevelCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderItems?: boolean | LevelCountOutputTypeCountOrderItemsArgs
    masterJobs?: boolean | LevelCountOutputTypeCountMasterJobsArgs
    products?: boolean | LevelCountOutputTypeCountProductsArgs
    baskets?: boolean | LevelCountOutputTypeCountBasketsArgs
  }

  // Custom InputTypes
  /**
   * LevelCountOutputType without action
   */
  export type LevelCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelCountOutputType
     */
    select?: LevelCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LevelCountOutputType without action
   */
  export type LevelCountOutputTypeCountOrderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemWhereInput
  }

  /**
   * LevelCountOutputType without action
   */
  export type LevelCountOutputTypeCountMasterJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MasterJobsWhereInput
  }

  /**
   * LevelCountOutputType without action
   */
  export type LevelCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductLevelWhereInput
  }

  /**
   * LevelCountOutputType without action
   */
  export type LevelCountOutputTypeCountBasketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BasketWhereInput
  }


  /**
   * Count Type ToolCountOutputType
   */

  export type ToolCountOutputType = {
    orderItems: number
    masterJobs: number
    baskets: number
    products: number
  }

  export type ToolCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderItems?: boolean | ToolCountOutputTypeCountOrderItemsArgs
    masterJobs?: boolean | ToolCountOutputTypeCountMasterJobsArgs
    baskets?: boolean | ToolCountOutputTypeCountBasketsArgs
    products?: boolean | ToolCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes
  /**
   * ToolCountOutputType without action
   */
  export type ToolCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ToolCountOutputType
     */
    select?: ToolCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ToolCountOutputType without action
   */
  export type ToolCountOutputTypeCountOrderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemWhereInput
  }

  /**
   * ToolCountOutputType without action
   */
  export type ToolCountOutputTypeCountMasterJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MasterJobsWhereInput
  }

  /**
   * ToolCountOutputType without action
   */
  export type ToolCountOutputTypeCountBasketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BasketWhereInput
  }

  /**
   * ToolCountOutputType without action
   */
  export type ToolCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductToolWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    nameRu: string | null
    nameUz: string | null
    nameEn: string | null
    email: string | null
    password: string | null
    phone: string | null
    image: string | null
    role: $Enums.UserRole | null
    status: $Enums.UserStatus | null
    regionID: string | null
    location: string | null
    passportSeries: string | null
    inn: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    nameRu: string | null
    nameUz: string | null
    nameEn: string | null
    email: string | null
    password: string | null
    phone: string | null
    image: string | null
    role: $Enums.UserRole | null
    status: $Enums.UserStatus | null
    regionID: string | null
    location: string | null
    passportSeries: string | null
    inn: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    nameRu: number
    nameUz: number
    nameEn: number
    email: number
    password: number
    phone: number
    image: number
    role: number
    status: number
    regionID: number
    location: number
    passportSeries: number
    inn: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    nameRu?: true
    nameUz?: true
    nameEn?: true
    email?: true
    password?: true
    phone?: true
    image?: true
    role?: true
    status?: true
    regionID?: true
    location?: true
    passportSeries?: true
    inn?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    nameRu?: true
    nameUz?: true
    nameEn?: true
    email?: true
    password?: true
    phone?: true
    image?: true
    role?: true
    status?: true
    regionID?: true
    location?: true
    passportSeries?: true
    inn?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    nameRu?: true
    nameUz?: true
    nameEn?: true
    email?: true
    password?: true
    phone?: true
    image?: true
    role?: true
    status?: true
    regionID?: true
    location?: true
    passportSeries?: true
    inn?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    nameRu: string
    nameUz: string
    nameEn: string
    email: string
    password: string
    phone: string
    image: string
    role: $Enums.UserRole
    status: $Enums.UserStatus
    regionID: string | null
    location: string
    passportSeries: string | null
    inn: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
    email?: boolean
    password?: boolean
    phone?: boolean
    image?: boolean
    role?: boolean
    status?: boolean
    regionID?: boolean
    location?: boolean
    passportSeries?: boolean
    inn?: boolean
    region?: boolean | User$regionArgs<ExtArgs>
    baskets?: boolean | User$basketsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
    email?: boolean
    password?: boolean
    phone?: boolean
    image?: boolean
    role?: boolean
    status?: boolean
    regionID?: boolean
    location?: boolean
    passportSeries?: boolean
    inn?: boolean
    region?: boolean | User$regionArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
    email?: boolean
    password?: boolean
    phone?: boolean
    image?: boolean
    role?: boolean
    status?: boolean
    regionID?: boolean
    location?: boolean
    passportSeries?: boolean
    inn?: boolean
    region?: boolean | User$regionArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
    email?: boolean
    password?: boolean
    phone?: boolean
    image?: boolean
    role?: boolean
    status?: boolean
    regionID?: boolean
    location?: boolean
    passportSeries?: boolean
    inn?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nameRu" | "nameUz" | "nameEn" | "email" | "password" | "phone" | "image" | "role" | "status" | "regionID" | "location" | "passportSeries" | "inn", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    region?: boolean | User$regionArgs<ExtArgs>
    baskets?: boolean | User$basketsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    region?: boolean | User$regionArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    region?: boolean | User$regionArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      region: Prisma.$RegionPayload<ExtArgs> | null
      baskets: Prisma.$BasketPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nameRu: string
      nameUz: string
      nameEn: string
      email: string
      password: string
      phone: string
      image: string
      role: $Enums.UserRole
      status: $Enums.UserStatus
      regionID: string | null
      location: string
      passportSeries: string | null
      inn: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    region<T extends User$regionArgs<ExtArgs> = {}>(args?: Subset<T, User$regionArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    baskets<T extends User$basketsArgs<ExtArgs> = {}>(args?: Subset<T, User$basketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly nameRu: FieldRef<"User", 'String'>
    readonly nameUz: FieldRef<"User", 'String'>
    readonly nameEn: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly image: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly status: FieldRef<"User", 'UserStatus'>
    readonly regionID: FieldRef<"User", 'String'>
    readonly location: FieldRef<"User", 'String'>
    readonly passportSeries: FieldRef<"User", 'String'>
    readonly inn: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.region
   */
  export type User$regionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    where?: RegionWhereInput
  }

  /**
   * User.baskets
   */
  export type User$basketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    where?: BasketWhereInput
    orderBy?: BasketOrderByWithRelationInput | BasketOrderByWithRelationInput[]
    cursor?: BasketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BasketScalarFieldEnum | BasketScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Region
   */

  export type AggregateRegion = {
    _count: RegionCountAggregateOutputType | null
    _min: RegionMinAggregateOutputType | null
    _max: RegionMaxAggregateOutputType | null
  }

  export type RegionMinAggregateOutputType = {
    id: string | null
    nameRu: string | null
    nameUz: string | null
    nameEn: string | null
  }

  export type RegionMaxAggregateOutputType = {
    id: string | null
    nameRu: string | null
    nameUz: string | null
    nameEn: string | null
  }

  export type RegionCountAggregateOutputType = {
    id: number
    nameRu: number
    nameUz: number
    nameEn: number
    _all: number
  }


  export type RegionMinAggregateInputType = {
    id?: true
    nameRu?: true
    nameUz?: true
    nameEn?: true
  }

  export type RegionMaxAggregateInputType = {
    id?: true
    nameRu?: true
    nameUz?: true
    nameEn?: true
  }

  export type RegionCountAggregateInputType = {
    id?: true
    nameRu?: true
    nameUz?: true
    nameEn?: true
    _all?: true
  }

  export type RegionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Region to aggregate.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Regions
    **/
    _count?: true | RegionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RegionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RegionMaxAggregateInputType
  }

  export type GetRegionAggregateType<T extends RegionAggregateArgs> = {
        [P in keyof T & keyof AggregateRegion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRegion[P]>
      : GetScalarType<T[P], AggregateRegion[P]>
  }




  export type RegionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegionWhereInput
    orderBy?: RegionOrderByWithAggregationInput | RegionOrderByWithAggregationInput[]
    by: RegionScalarFieldEnum[] | RegionScalarFieldEnum
    having?: RegionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RegionCountAggregateInputType | true
    _min?: RegionMinAggregateInputType
    _max?: RegionMaxAggregateInputType
  }

  export type RegionGroupByOutputType = {
    id: string
    nameRu: string
    nameUz: string
    nameEn: string
    _count: RegionCountAggregateOutputType | null
    _min: RegionMinAggregateOutputType | null
    _max: RegionMaxAggregateOutputType | null
  }

  type GetRegionGroupByPayload<T extends RegionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RegionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RegionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RegionGroupByOutputType[P]>
            : GetScalarType<T[P], RegionGroupByOutputType[P]>
        }
      >
    >


  export type RegionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
    users?: boolean | Region$usersArgs<ExtArgs>
    _count?: boolean | RegionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["region"]>

  export type RegionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
  }, ExtArgs["result"]["region"]>

  export type RegionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
  }, ExtArgs["result"]["region"]>

  export type RegionSelectScalar = {
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
  }

  export type RegionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nameRu" | "nameUz" | "nameEn", ExtArgs["result"]["region"]>
  export type RegionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Region$usersArgs<ExtArgs>
    _count?: boolean | RegionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RegionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type RegionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RegionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Region"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nameRu: string
      nameUz: string
      nameEn: string
    }, ExtArgs["result"]["region"]>
    composites: {}
  }

  type RegionGetPayload<S extends boolean | null | undefined | RegionDefaultArgs> = $Result.GetResult<Prisma.$RegionPayload, S>

  type RegionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RegionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RegionCountAggregateInputType | true
    }

  export interface RegionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Region'], meta: { name: 'Region' } }
    /**
     * Find zero or one Region that matches the filter.
     * @param {RegionFindUniqueArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RegionFindUniqueArgs>(args: SelectSubset<T, RegionFindUniqueArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Region that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RegionFindUniqueOrThrowArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RegionFindUniqueOrThrowArgs>(args: SelectSubset<T, RegionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Region that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionFindFirstArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RegionFindFirstArgs>(args?: SelectSubset<T, RegionFindFirstArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Region that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionFindFirstOrThrowArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RegionFindFirstOrThrowArgs>(args?: SelectSubset<T, RegionFindFirstOrThrowArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Regions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Regions
     * const regions = await prisma.region.findMany()
     * 
     * // Get first 10 Regions
     * const regions = await prisma.region.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const regionWithIdOnly = await prisma.region.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RegionFindManyArgs>(args?: SelectSubset<T, RegionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Region.
     * @param {RegionCreateArgs} args - Arguments to create a Region.
     * @example
     * // Create one Region
     * const Region = await prisma.region.create({
     *   data: {
     *     // ... data to create a Region
     *   }
     * })
     * 
     */
    create<T extends RegionCreateArgs>(args: SelectSubset<T, RegionCreateArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Regions.
     * @param {RegionCreateManyArgs} args - Arguments to create many Regions.
     * @example
     * // Create many Regions
     * const region = await prisma.region.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RegionCreateManyArgs>(args?: SelectSubset<T, RegionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Regions and returns the data saved in the database.
     * @param {RegionCreateManyAndReturnArgs} args - Arguments to create many Regions.
     * @example
     * // Create many Regions
     * const region = await prisma.region.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Regions and only return the `id`
     * const regionWithIdOnly = await prisma.region.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RegionCreateManyAndReturnArgs>(args?: SelectSubset<T, RegionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Region.
     * @param {RegionDeleteArgs} args - Arguments to delete one Region.
     * @example
     * // Delete one Region
     * const Region = await prisma.region.delete({
     *   where: {
     *     // ... filter to delete one Region
     *   }
     * })
     * 
     */
    delete<T extends RegionDeleteArgs>(args: SelectSubset<T, RegionDeleteArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Region.
     * @param {RegionUpdateArgs} args - Arguments to update one Region.
     * @example
     * // Update one Region
     * const region = await prisma.region.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RegionUpdateArgs>(args: SelectSubset<T, RegionUpdateArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Regions.
     * @param {RegionDeleteManyArgs} args - Arguments to filter Regions to delete.
     * @example
     * // Delete a few Regions
     * const { count } = await prisma.region.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RegionDeleteManyArgs>(args?: SelectSubset<T, RegionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Regions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Regions
     * const region = await prisma.region.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RegionUpdateManyArgs>(args: SelectSubset<T, RegionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Regions and returns the data updated in the database.
     * @param {RegionUpdateManyAndReturnArgs} args - Arguments to update many Regions.
     * @example
     * // Update many Regions
     * const region = await prisma.region.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Regions and only return the `id`
     * const regionWithIdOnly = await prisma.region.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RegionUpdateManyAndReturnArgs>(args: SelectSubset<T, RegionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Region.
     * @param {RegionUpsertArgs} args - Arguments to update or create a Region.
     * @example
     * // Update or create a Region
     * const region = await prisma.region.upsert({
     *   create: {
     *     // ... data to create a Region
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Region we want to update
     *   }
     * })
     */
    upsert<T extends RegionUpsertArgs>(args: SelectSubset<T, RegionUpsertArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Regions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionCountArgs} args - Arguments to filter Regions to count.
     * @example
     * // Count the number of Regions
     * const count = await prisma.region.count({
     *   where: {
     *     // ... the filter for the Regions we want to count
     *   }
     * })
    **/
    count<T extends RegionCountArgs>(
      args?: Subset<T, RegionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RegionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Region.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RegionAggregateArgs>(args: Subset<T, RegionAggregateArgs>): Prisma.PrismaPromise<GetRegionAggregateType<T>>

    /**
     * Group by Region.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RegionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RegionGroupByArgs['orderBy'] }
        : { orderBy?: RegionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RegionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRegionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Region model
   */
  readonly fields: RegionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Region.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RegionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Region$usersArgs<ExtArgs> = {}>(args?: Subset<T, Region$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Region model
   */
  interface RegionFieldRefs {
    readonly id: FieldRef<"Region", 'String'>
    readonly nameRu: FieldRef<"Region", 'String'>
    readonly nameUz: FieldRef<"Region", 'String'>
    readonly nameEn: FieldRef<"Region", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Region findUnique
   */
  export type RegionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region findUniqueOrThrow
   */
  export type RegionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region findFirst
   */
  export type RegionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Regions.
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Regions.
     */
    distinct?: RegionScalarFieldEnum | RegionScalarFieldEnum[]
  }

  /**
   * Region findFirstOrThrow
   */
  export type RegionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Regions.
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Regions.
     */
    distinct?: RegionScalarFieldEnum | RegionScalarFieldEnum[]
  }

  /**
   * Region findMany
   */
  export type RegionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Regions to fetch.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Regions.
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    distinct?: RegionScalarFieldEnum | RegionScalarFieldEnum[]
  }

  /**
   * Region create
   */
  export type RegionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * The data needed to create a Region.
     */
    data: XOR<RegionCreateInput, RegionUncheckedCreateInput>
  }

  /**
   * Region createMany
   */
  export type RegionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Regions.
     */
    data: RegionCreateManyInput | RegionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Region createManyAndReturn
   */
  export type RegionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * The data used to create many Regions.
     */
    data: RegionCreateManyInput | RegionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Region update
   */
  export type RegionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * The data needed to update a Region.
     */
    data: XOR<RegionUpdateInput, RegionUncheckedUpdateInput>
    /**
     * Choose, which Region to update.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region updateMany
   */
  export type RegionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Regions.
     */
    data: XOR<RegionUpdateManyMutationInput, RegionUncheckedUpdateManyInput>
    /**
     * Filter which Regions to update
     */
    where?: RegionWhereInput
    /**
     * Limit how many Regions to update.
     */
    limit?: number
  }

  /**
   * Region updateManyAndReturn
   */
  export type RegionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * The data used to update Regions.
     */
    data: XOR<RegionUpdateManyMutationInput, RegionUncheckedUpdateManyInput>
    /**
     * Filter which Regions to update
     */
    where?: RegionWhereInput
    /**
     * Limit how many Regions to update.
     */
    limit?: number
  }

  /**
   * Region upsert
   */
  export type RegionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * The filter to search for the Region to update in case it exists.
     */
    where: RegionWhereUniqueInput
    /**
     * In case the Region found by the `where` argument doesn't exist, create a new Region with this data.
     */
    create: XOR<RegionCreateInput, RegionUncheckedCreateInput>
    /**
     * In case the Region was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RegionUpdateInput, RegionUncheckedUpdateInput>
  }

  /**
   * Region delete
   */
  export type RegionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter which Region to delete.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region deleteMany
   */
  export type RegionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Regions to delete
     */
    where?: RegionWhereInput
    /**
     * Limit how many Regions to delete.
     */
    limit?: number
  }

  /**
   * Region.users
   */
  export type Region$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Region without action
   */
  export type RegionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
  }


  /**
   * Model Basket
   */

  export type AggregateBasket = {
    _count: BasketCountAggregateOutputType | null
    _avg: BasketAvgAggregateOutputType | null
    _sum: BasketSumAggregateOutputType | null
    _min: BasketMinAggregateOutputType | null
    _max: BasketMaxAggregateOutputType | null
  }

  export type BasketAvgAggregateOutputType = {
    timeUnit: number | null
    count: number | null
    workingHours: number | null
    totalPrice: number | null
  }

  export type BasketSumAggregateOutputType = {
    timeUnit: number | null
    count: number | null
    workingHours: number | null
    totalPrice: number | null
  }

  export type BasketMinAggregateOutputType = {
    id: string | null
    userID: string | null
    productID: string | null
    toolID: string | null
    levelID: string | null
    timeUnit: number | null
    count: number | null
    workingHours: number | null
    totalPrice: number | null
  }

  export type BasketMaxAggregateOutputType = {
    id: string | null
    userID: string | null
    productID: string | null
    toolID: string | null
    levelID: string | null
    timeUnit: number | null
    count: number | null
    workingHours: number | null
    totalPrice: number | null
  }

  export type BasketCountAggregateOutputType = {
    id: number
    userID: number
    productID: number
    toolID: number
    levelID: number
    timeUnit: number
    count: number
    workingHours: number
    totalPrice: number
    _all: number
  }


  export type BasketAvgAggregateInputType = {
    timeUnit?: true
    count?: true
    workingHours?: true
    totalPrice?: true
  }

  export type BasketSumAggregateInputType = {
    timeUnit?: true
    count?: true
    workingHours?: true
    totalPrice?: true
  }

  export type BasketMinAggregateInputType = {
    id?: true
    userID?: true
    productID?: true
    toolID?: true
    levelID?: true
    timeUnit?: true
    count?: true
    workingHours?: true
    totalPrice?: true
  }

  export type BasketMaxAggregateInputType = {
    id?: true
    userID?: true
    productID?: true
    toolID?: true
    levelID?: true
    timeUnit?: true
    count?: true
    workingHours?: true
    totalPrice?: true
  }

  export type BasketCountAggregateInputType = {
    id?: true
    userID?: true
    productID?: true
    toolID?: true
    levelID?: true
    timeUnit?: true
    count?: true
    workingHours?: true
    totalPrice?: true
    _all?: true
  }

  export type BasketAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Basket to aggregate.
     */
    where?: BasketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Baskets to fetch.
     */
    orderBy?: BasketOrderByWithRelationInput | BasketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BasketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Baskets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Baskets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Baskets
    **/
    _count?: true | BasketCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BasketAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BasketSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BasketMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BasketMaxAggregateInputType
  }

  export type GetBasketAggregateType<T extends BasketAggregateArgs> = {
        [P in keyof T & keyof AggregateBasket]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBasket[P]>
      : GetScalarType<T[P], AggregateBasket[P]>
  }




  export type BasketGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BasketWhereInput
    orderBy?: BasketOrderByWithAggregationInput | BasketOrderByWithAggregationInput[]
    by: BasketScalarFieldEnum[] | BasketScalarFieldEnum
    having?: BasketScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BasketCountAggregateInputType | true
    _avg?: BasketAvgAggregateInputType
    _sum?: BasketSumAggregateInputType
    _min?: BasketMinAggregateInputType
    _max?: BasketMaxAggregateInputType
  }

  export type BasketGroupByOutputType = {
    id: string
    userID: string
    productID: string
    toolID: string
    levelID: string
    timeUnit: number
    count: number | null
    workingHours: number
    totalPrice: number | null
    _count: BasketCountAggregateOutputType | null
    _avg: BasketAvgAggregateOutputType | null
    _sum: BasketSumAggregateOutputType | null
    _min: BasketMinAggregateOutputType | null
    _max: BasketMaxAggregateOutputType | null
  }

  type GetBasketGroupByPayload<T extends BasketGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BasketGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BasketGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BasketGroupByOutputType[P]>
            : GetScalarType<T[P], BasketGroupByOutputType[P]>
        }
      >
    >


  export type BasketSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userID?: boolean
    productID?: boolean
    toolID?: boolean
    levelID?: boolean
    timeUnit?: boolean
    count?: boolean
    workingHours?: boolean
    totalPrice?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    tool?: boolean | ToolDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["basket"]>

  export type BasketSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userID?: boolean
    productID?: boolean
    toolID?: boolean
    levelID?: boolean
    timeUnit?: boolean
    count?: boolean
    workingHours?: boolean
    totalPrice?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    tool?: boolean | ToolDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["basket"]>

  export type BasketSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userID?: boolean
    productID?: boolean
    toolID?: boolean
    levelID?: boolean
    timeUnit?: boolean
    count?: boolean
    workingHours?: boolean
    totalPrice?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    tool?: boolean | ToolDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["basket"]>

  export type BasketSelectScalar = {
    id?: boolean
    userID?: boolean
    productID?: boolean
    toolID?: boolean
    levelID?: boolean
    timeUnit?: boolean
    count?: boolean
    workingHours?: boolean
    totalPrice?: boolean
  }

  export type BasketOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userID" | "productID" | "toolID" | "levelID" | "timeUnit" | "count" | "workingHours" | "totalPrice", ExtArgs["result"]["basket"]>
  export type BasketInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    tool?: boolean | ToolDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
  }
  export type BasketIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    tool?: boolean | ToolDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
  }
  export type BasketIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    tool?: boolean | ToolDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
  }

  export type $BasketPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Basket"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      product: Prisma.$ProductPayload<ExtArgs>
      tool: Prisma.$ToolPayload<ExtArgs>
      level: Prisma.$LevelPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userID: string
      productID: string
      toolID: string
      levelID: string
      timeUnit: number
      count: number | null
      workingHours: number
      totalPrice: number | null
    }, ExtArgs["result"]["basket"]>
    composites: {}
  }

  type BasketGetPayload<S extends boolean | null | undefined | BasketDefaultArgs> = $Result.GetResult<Prisma.$BasketPayload, S>

  type BasketCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BasketFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BasketCountAggregateInputType | true
    }

  export interface BasketDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Basket'], meta: { name: 'Basket' } }
    /**
     * Find zero or one Basket that matches the filter.
     * @param {BasketFindUniqueArgs} args - Arguments to find a Basket
     * @example
     * // Get one Basket
     * const basket = await prisma.basket.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BasketFindUniqueArgs>(args: SelectSubset<T, BasketFindUniqueArgs<ExtArgs>>): Prisma__BasketClient<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Basket that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BasketFindUniqueOrThrowArgs} args - Arguments to find a Basket
     * @example
     * // Get one Basket
     * const basket = await prisma.basket.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BasketFindUniqueOrThrowArgs>(args: SelectSubset<T, BasketFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BasketClient<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Basket that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketFindFirstArgs} args - Arguments to find a Basket
     * @example
     * // Get one Basket
     * const basket = await prisma.basket.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BasketFindFirstArgs>(args?: SelectSubset<T, BasketFindFirstArgs<ExtArgs>>): Prisma__BasketClient<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Basket that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketFindFirstOrThrowArgs} args - Arguments to find a Basket
     * @example
     * // Get one Basket
     * const basket = await prisma.basket.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BasketFindFirstOrThrowArgs>(args?: SelectSubset<T, BasketFindFirstOrThrowArgs<ExtArgs>>): Prisma__BasketClient<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Baskets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Baskets
     * const baskets = await prisma.basket.findMany()
     * 
     * // Get first 10 Baskets
     * const baskets = await prisma.basket.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const basketWithIdOnly = await prisma.basket.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BasketFindManyArgs>(args?: SelectSubset<T, BasketFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Basket.
     * @param {BasketCreateArgs} args - Arguments to create a Basket.
     * @example
     * // Create one Basket
     * const Basket = await prisma.basket.create({
     *   data: {
     *     // ... data to create a Basket
     *   }
     * })
     * 
     */
    create<T extends BasketCreateArgs>(args: SelectSubset<T, BasketCreateArgs<ExtArgs>>): Prisma__BasketClient<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Baskets.
     * @param {BasketCreateManyArgs} args - Arguments to create many Baskets.
     * @example
     * // Create many Baskets
     * const basket = await prisma.basket.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BasketCreateManyArgs>(args?: SelectSubset<T, BasketCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Baskets and returns the data saved in the database.
     * @param {BasketCreateManyAndReturnArgs} args - Arguments to create many Baskets.
     * @example
     * // Create many Baskets
     * const basket = await prisma.basket.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Baskets and only return the `id`
     * const basketWithIdOnly = await prisma.basket.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BasketCreateManyAndReturnArgs>(args?: SelectSubset<T, BasketCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Basket.
     * @param {BasketDeleteArgs} args - Arguments to delete one Basket.
     * @example
     * // Delete one Basket
     * const Basket = await prisma.basket.delete({
     *   where: {
     *     // ... filter to delete one Basket
     *   }
     * })
     * 
     */
    delete<T extends BasketDeleteArgs>(args: SelectSubset<T, BasketDeleteArgs<ExtArgs>>): Prisma__BasketClient<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Basket.
     * @param {BasketUpdateArgs} args - Arguments to update one Basket.
     * @example
     * // Update one Basket
     * const basket = await prisma.basket.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BasketUpdateArgs>(args: SelectSubset<T, BasketUpdateArgs<ExtArgs>>): Prisma__BasketClient<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Baskets.
     * @param {BasketDeleteManyArgs} args - Arguments to filter Baskets to delete.
     * @example
     * // Delete a few Baskets
     * const { count } = await prisma.basket.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BasketDeleteManyArgs>(args?: SelectSubset<T, BasketDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Baskets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Baskets
     * const basket = await prisma.basket.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BasketUpdateManyArgs>(args: SelectSubset<T, BasketUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Baskets and returns the data updated in the database.
     * @param {BasketUpdateManyAndReturnArgs} args - Arguments to update many Baskets.
     * @example
     * // Update many Baskets
     * const basket = await prisma.basket.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Baskets and only return the `id`
     * const basketWithIdOnly = await prisma.basket.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BasketUpdateManyAndReturnArgs>(args: SelectSubset<T, BasketUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Basket.
     * @param {BasketUpsertArgs} args - Arguments to update or create a Basket.
     * @example
     * // Update or create a Basket
     * const basket = await prisma.basket.upsert({
     *   create: {
     *     // ... data to create a Basket
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Basket we want to update
     *   }
     * })
     */
    upsert<T extends BasketUpsertArgs>(args: SelectSubset<T, BasketUpsertArgs<ExtArgs>>): Prisma__BasketClient<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Baskets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketCountArgs} args - Arguments to filter Baskets to count.
     * @example
     * // Count the number of Baskets
     * const count = await prisma.basket.count({
     *   where: {
     *     // ... the filter for the Baskets we want to count
     *   }
     * })
    **/
    count<T extends BasketCountArgs>(
      args?: Subset<T, BasketCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BasketCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Basket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BasketAggregateArgs>(args: Subset<T, BasketAggregateArgs>): Prisma.PrismaPromise<GetBasketAggregateType<T>>

    /**
     * Group by Basket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BasketGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BasketGroupByArgs['orderBy'] }
        : { orderBy?: BasketGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BasketGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBasketGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Basket model
   */
  readonly fields: BasketFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Basket.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BasketClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tool<T extends ToolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ToolDefaultArgs<ExtArgs>>): Prisma__ToolClient<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    level<T extends LevelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LevelDefaultArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Basket model
   */
  interface BasketFieldRefs {
    readonly id: FieldRef<"Basket", 'String'>
    readonly userID: FieldRef<"Basket", 'String'>
    readonly productID: FieldRef<"Basket", 'String'>
    readonly toolID: FieldRef<"Basket", 'String'>
    readonly levelID: FieldRef<"Basket", 'String'>
    readonly timeUnit: FieldRef<"Basket", 'Int'>
    readonly count: FieldRef<"Basket", 'Int'>
    readonly workingHours: FieldRef<"Basket", 'Int'>
    readonly totalPrice: FieldRef<"Basket", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Basket findUnique
   */
  export type BasketFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    /**
     * Filter, which Basket to fetch.
     */
    where: BasketWhereUniqueInput
  }

  /**
   * Basket findUniqueOrThrow
   */
  export type BasketFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    /**
     * Filter, which Basket to fetch.
     */
    where: BasketWhereUniqueInput
  }

  /**
   * Basket findFirst
   */
  export type BasketFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    /**
     * Filter, which Basket to fetch.
     */
    where?: BasketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Baskets to fetch.
     */
    orderBy?: BasketOrderByWithRelationInput | BasketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Baskets.
     */
    cursor?: BasketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Baskets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Baskets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Baskets.
     */
    distinct?: BasketScalarFieldEnum | BasketScalarFieldEnum[]
  }

  /**
   * Basket findFirstOrThrow
   */
  export type BasketFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    /**
     * Filter, which Basket to fetch.
     */
    where?: BasketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Baskets to fetch.
     */
    orderBy?: BasketOrderByWithRelationInput | BasketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Baskets.
     */
    cursor?: BasketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Baskets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Baskets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Baskets.
     */
    distinct?: BasketScalarFieldEnum | BasketScalarFieldEnum[]
  }

  /**
   * Basket findMany
   */
  export type BasketFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    /**
     * Filter, which Baskets to fetch.
     */
    where?: BasketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Baskets to fetch.
     */
    orderBy?: BasketOrderByWithRelationInput | BasketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Baskets.
     */
    cursor?: BasketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Baskets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Baskets.
     */
    skip?: number
    distinct?: BasketScalarFieldEnum | BasketScalarFieldEnum[]
  }

  /**
   * Basket create
   */
  export type BasketCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    /**
     * The data needed to create a Basket.
     */
    data: XOR<BasketCreateInput, BasketUncheckedCreateInput>
  }

  /**
   * Basket createMany
   */
  export type BasketCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Baskets.
     */
    data: BasketCreateManyInput | BasketCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Basket createManyAndReturn
   */
  export type BasketCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * The data used to create many Baskets.
     */
    data: BasketCreateManyInput | BasketCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Basket update
   */
  export type BasketUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    /**
     * The data needed to update a Basket.
     */
    data: XOR<BasketUpdateInput, BasketUncheckedUpdateInput>
    /**
     * Choose, which Basket to update.
     */
    where: BasketWhereUniqueInput
  }

  /**
   * Basket updateMany
   */
  export type BasketUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Baskets.
     */
    data: XOR<BasketUpdateManyMutationInput, BasketUncheckedUpdateManyInput>
    /**
     * Filter which Baskets to update
     */
    where?: BasketWhereInput
    /**
     * Limit how many Baskets to update.
     */
    limit?: number
  }

  /**
   * Basket updateManyAndReturn
   */
  export type BasketUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * The data used to update Baskets.
     */
    data: XOR<BasketUpdateManyMutationInput, BasketUncheckedUpdateManyInput>
    /**
     * Filter which Baskets to update
     */
    where?: BasketWhereInput
    /**
     * Limit how many Baskets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Basket upsert
   */
  export type BasketUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    /**
     * The filter to search for the Basket to update in case it exists.
     */
    where: BasketWhereUniqueInput
    /**
     * In case the Basket found by the `where` argument doesn't exist, create a new Basket with this data.
     */
    create: XOR<BasketCreateInput, BasketUncheckedCreateInput>
    /**
     * In case the Basket was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BasketUpdateInput, BasketUncheckedUpdateInput>
  }

  /**
   * Basket delete
   */
  export type BasketDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    /**
     * Filter which Basket to delete.
     */
    where: BasketWhereUniqueInput
  }

  /**
   * Basket deleteMany
   */
  export type BasketDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Baskets to delete
     */
    where?: BasketWhereInput
    /**
     * Limit how many Baskets to delete.
     */
    limit?: number
  }

  /**
   * Basket without action
   */
  export type BasketDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
  }


  /**
   * Model Order
   */

  export type AggregateOrder = {
    _count: OrderCountAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  export type OrderMinAggregateOutputType = {
    id: string | null
    locationLat: string | null
    locationLong: string | null
    address: string | null
    orderDate: Date | null
    deliveryDate: Date | null
    paymentType: $Enums.PaymentType | null
    withDelivery: boolean | null
    status: $Enums.OrderStatus | null
    commentToDelivery: string | null
  }

  export type OrderMaxAggregateOutputType = {
    id: string | null
    locationLat: string | null
    locationLong: string | null
    address: string | null
    orderDate: Date | null
    deliveryDate: Date | null
    paymentType: $Enums.PaymentType | null
    withDelivery: boolean | null
    status: $Enums.OrderStatus | null
    commentToDelivery: string | null
  }

  export type OrderCountAggregateOutputType = {
    id: number
    locationLat: number
    locationLong: number
    address: number
    orderDate: number
    deliveryDate: number
    paymentType: number
    withDelivery: number
    status: number
    commentToDelivery: number
    _all: number
  }


  export type OrderMinAggregateInputType = {
    id?: true
    locationLat?: true
    locationLong?: true
    address?: true
    orderDate?: true
    deliveryDate?: true
    paymentType?: true
    withDelivery?: true
    status?: true
    commentToDelivery?: true
  }

  export type OrderMaxAggregateInputType = {
    id?: true
    locationLat?: true
    locationLong?: true
    address?: true
    orderDate?: true
    deliveryDate?: true
    paymentType?: true
    withDelivery?: true
    status?: true
    commentToDelivery?: true
  }

  export type OrderCountAggregateInputType = {
    id?: true
    locationLat?: true
    locationLong?: true
    address?: true
    orderDate?: true
    deliveryDate?: true
    paymentType?: true
    withDelivery?: true
    status?: true
    commentToDelivery?: true
    _all?: true
  }

  export type OrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Order to aggregate.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Orders
    **/
    _count?: true | OrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderMaxAggregateInputType
  }

  export type GetOrderAggregateType<T extends OrderAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder[P]>
      : GetScalarType<T[P], AggregateOrder[P]>
  }




  export type OrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithAggregationInput | OrderOrderByWithAggregationInput[]
    by: OrderScalarFieldEnum[] | OrderScalarFieldEnum
    having?: OrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderCountAggregateInputType | true
    _min?: OrderMinAggregateInputType
    _max?: OrderMaxAggregateInputType
  }

  export type OrderGroupByOutputType = {
    id: string
    locationLat: string
    locationLong: string
    address: string
    orderDate: Date
    deliveryDate: Date
    paymentType: $Enums.PaymentType
    withDelivery: boolean
    status: $Enums.OrderStatus
    commentToDelivery: string | null
    _count: OrderCountAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  type GetOrderGroupByPayload<T extends OrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderGroupByOutputType[P]>
            : GetScalarType<T[P], OrderGroupByOutputType[P]>
        }
      >
    >


  export type OrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    locationLat?: boolean
    locationLong?: boolean
    address?: boolean
    orderDate?: boolean
    deliveryDate?: boolean
    paymentType?: boolean
    withDelivery?: boolean
    status?: boolean
    commentToDelivery?: boolean
    items?: boolean | Order$itemsArgs<ExtArgs>
    comments?: boolean | Order$commentsArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    locationLat?: boolean
    locationLong?: boolean
    address?: boolean
    orderDate?: boolean
    deliveryDate?: boolean
    paymentType?: boolean
    withDelivery?: boolean
    status?: boolean
    commentToDelivery?: boolean
  }, ExtArgs["result"]["order"]>

  export type OrderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    locationLat?: boolean
    locationLong?: boolean
    address?: boolean
    orderDate?: boolean
    deliveryDate?: boolean
    paymentType?: boolean
    withDelivery?: boolean
    status?: boolean
    commentToDelivery?: boolean
  }, ExtArgs["result"]["order"]>

  export type OrderSelectScalar = {
    id?: boolean
    locationLat?: boolean
    locationLong?: boolean
    address?: boolean
    orderDate?: boolean
    deliveryDate?: boolean
    paymentType?: boolean
    withDelivery?: boolean
    status?: boolean
    commentToDelivery?: boolean
  }

  export type OrderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "locationLat" | "locationLong" | "address" | "orderDate" | "deliveryDate" | "paymentType" | "withDelivery" | "status" | "commentToDelivery", ExtArgs["result"]["order"]>
  export type OrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | Order$itemsArgs<ExtArgs>
    comments?: boolean | Order$commentsArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type OrderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $OrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Order"
    objects: {
      items: Prisma.$OrderItemPayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      locationLat: string
      locationLong: string
      address: string
      orderDate: Date
      deliveryDate: Date
      paymentType: $Enums.PaymentType
      withDelivery: boolean
      status: $Enums.OrderStatus
      commentToDelivery: string | null
    }, ExtArgs["result"]["order"]>
    composites: {}
  }

  type OrderGetPayload<S extends boolean | null | undefined | OrderDefaultArgs> = $Result.GetResult<Prisma.$OrderPayload, S>

  type OrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderCountAggregateInputType | true
    }

  export interface OrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Order'], meta: { name: 'Order' } }
    /**
     * Find zero or one Order that matches the filter.
     * @param {OrderFindUniqueArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderFindUniqueArgs>(args: SelectSubset<T, OrderFindUniqueArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Order that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderFindUniqueOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderFindFirstArgs>(args?: SelectSubset<T, OrderFindFirstArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Order that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.order.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.order.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderWithIdOnly = await prisma.order.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderFindManyArgs>(args?: SelectSubset<T, OrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Order.
     * @param {OrderCreateArgs} args - Arguments to create a Order.
     * @example
     * // Create one Order
     * const Order = await prisma.order.create({
     *   data: {
     *     // ... data to create a Order
     *   }
     * })
     * 
     */
    create<T extends OrderCreateArgs>(args: SelectSubset<T, OrderCreateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Orders.
     * @param {OrderCreateManyArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderCreateManyArgs>(args?: SelectSubset<T, OrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Orders and returns the data saved in the database.
     * @param {OrderCreateManyAndReturnArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Orders and only return the `id`
     * const orderWithIdOnly = await prisma.order.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrderCreateManyAndReturnArgs>(args?: SelectSubset<T, OrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Order.
     * @param {OrderDeleteArgs} args - Arguments to delete one Order.
     * @example
     * // Delete one Order
     * const Order = await prisma.order.delete({
     *   where: {
     *     // ... filter to delete one Order
     *   }
     * })
     * 
     */
    delete<T extends OrderDeleteArgs>(args: SelectSubset<T, OrderDeleteArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Order.
     * @param {OrderUpdateArgs} args - Arguments to update one Order.
     * @example
     * // Update one Order
     * const order = await prisma.order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderUpdateArgs>(args: SelectSubset<T, OrderUpdateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Orders.
     * @param {OrderDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderDeleteManyArgs>(args?: SelectSubset<T, OrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderUpdateManyArgs>(args: SelectSubset<T, OrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders and returns the data updated in the database.
     * @param {OrderUpdateManyAndReturnArgs} args - Arguments to update many Orders.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Orders and only return the `id`
     * const orderWithIdOnly = await prisma.order.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrderUpdateManyAndReturnArgs>(args: SelectSubset<T, OrderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Order.
     * @param {OrderUpsertArgs} args - Arguments to update or create a Order.
     * @example
     * // Update or create a Order
     * const order = await prisma.order.upsert({
     *   create: {
     *     // ... data to create a Order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order we want to update
     *   }
     * })
     */
    upsert<T extends OrderUpsertArgs>(args: SelectSubset<T, OrderUpsertArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.order.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends OrderCountArgs>(
      args?: Subset<T, OrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderAggregateArgs>(args: Subset<T, OrderAggregateArgs>): Prisma.PrismaPromise<GetOrderAggregateType<T>>

    /**
     * Group by Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderGroupByArgs['orderBy'] }
        : { orderBy?: OrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Order model
   */
  readonly fields: OrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    items<T extends Order$itemsArgs<ExtArgs> = {}>(args?: Subset<T, Order$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    comments<T extends Order$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Order$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Order model
   */
  interface OrderFieldRefs {
    readonly id: FieldRef<"Order", 'String'>
    readonly locationLat: FieldRef<"Order", 'String'>
    readonly locationLong: FieldRef<"Order", 'String'>
    readonly address: FieldRef<"Order", 'String'>
    readonly orderDate: FieldRef<"Order", 'DateTime'>
    readonly deliveryDate: FieldRef<"Order", 'DateTime'>
    readonly paymentType: FieldRef<"Order", 'PaymentType'>
    readonly withDelivery: FieldRef<"Order", 'Boolean'>
    readonly status: FieldRef<"Order", 'OrderStatus'>
    readonly commentToDelivery: FieldRef<"Order", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Order findUnique
   */
  export type OrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findUniqueOrThrow
   */
  export type OrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findFirst
   */
  export type OrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findFirstOrThrow
   */
  export type OrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findMany
   */
  export type OrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Orders to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order create
   */
  export type OrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to create a Order.
     */
    data: XOR<OrderCreateInput, OrderUncheckedCreateInput>
  }

  /**
   * Order createMany
   */
  export type OrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Order createManyAndReturn
   */
  export type OrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Order update
   */
  export type OrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to update a Order.
     */
    data: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
    /**
     * Choose, which Order to update.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order updateMany
   */
  export type OrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to update.
     */
    limit?: number
  }

  /**
   * Order updateManyAndReturn
   */
  export type OrderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to update.
     */
    limit?: number
  }

  /**
   * Order upsert
   */
  export type OrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The filter to search for the Order to update in case it exists.
     */
    where: OrderWhereUniqueInput
    /**
     * In case the Order found by the `where` argument doesn't exist, create a new Order with this data.
     */
    create: XOR<OrderCreateInput, OrderUncheckedCreateInput>
    /**
     * In case the Order was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
  }

  /**
   * Order delete
   */
  export type OrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter which Order to delete.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order deleteMany
   */
  export type OrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Orders to delete
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to delete.
     */
    limit?: number
  }

  /**
   * Order.items
   */
  export type Order$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    where?: OrderItemWhereInput
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    cursor?: OrderItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * Order.comments
   */
  export type Order$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Order without action
   */
  export type OrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
  }


  /**
   * Model OrderItem
   */

  export type AggregateOrderItem = {
    _count: OrderItemCountAggregateOutputType | null
    _avg: OrderItemAvgAggregateOutputType | null
    _sum: OrderItemSumAggregateOutputType | null
    _min: OrderItemMinAggregateOutputType | null
    _max: OrderItemMaxAggregateOutputType | null
  }

  export type OrderItemAvgAggregateOutputType = {
    timeUnit: number | null
    count: number | null
    workingHours: number | null
    totalPrice: number | null
  }

  export type OrderItemSumAggregateOutputType = {
    timeUnit: number | null
    count: number | null
    workingHours: number | null
    totalPrice: number | null
  }

  export type OrderItemMinAggregateOutputType = {
    id: string | null
    orderID: string | null
    productID: string | null
    toolID: string | null
    levelID: string | null
    timeUnit: number | null
    count: number | null
    workingHours: number | null
    totalPrice: number | null
  }

  export type OrderItemMaxAggregateOutputType = {
    id: string | null
    orderID: string | null
    productID: string | null
    toolID: string | null
    levelID: string | null
    timeUnit: number | null
    count: number | null
    workingHours: number | null
    totalPrice: number | null
  }

  export type OrderItemCountAggregateOutputType = {
    id: number
    orderID: number
    productID: number
    toolID: number
    levelID: number
    timeUnit: number
    count: number
    workingHours: number
    totalPrice: number
    _all: number
  }


  export type OrderItemAvgAggregateInputType = {
    timeUnit?: true
    count?: true
    workingHours?: true
    totalPrice?: true
  }

  export type OrderItemSumAggregateInputType = {
    timeUnit?: true
    count?: true
    workingHours?: true
    totalPrice?: true
  }

  export type OrderItemMinAggregateInputType = {
    id?: true
    orderID?: true
    productID?: true
    toolID?: true
    levelID?: true
    timeUnit?: true
    count?: true
    workingHours?: true
    totalPrice?: true
  }

  export type OrderItemMaxAggregateInputType = {
    id?: true
    orderID?: true
    productID?: true
    toolID?: true
    levelID?: true
    timeUnit?: true
    count?: true
    workingHours?: true
    totalPrice?: true
  }

  export type OrderItemCountAggregateInputType = {
    id?: true
    orderID?: true
    productID?: true
    toolID?: true
    levelID?: true
    timeUnit?: true
    count?: true
    workingHours?: true
    totalPrice?: true
    _all?: true
  }

  export type OrderItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderItem to aggregate.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrderItems
    **/
    _count?: true | OrderItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderItemMaxAggregateInputType
  }

  export type GetOrderItemAggregateType<T extends OrderItemAggregateArgs> = {
        [P in keyof T & keyof AggregateOrderItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderItem[P]>
      : GetScalarType<T[P], AggregateOrderItem[P]>
  }




  export type OrderItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemWhereInput
    orderBy?: OrderItemOrderByWithAggregationInput | OrderItemOrderByWithAggregationInput[]
    by: OrderItemScalarFieldEnum[] | OrderItemScalarFieldEnum
    having?: OrderItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderItemCountAggregateInputType | true
    _avg?: OrderItemAvgAggregateInputType
    _sum?: OrderItemSumAggregateInputType
    _min?: OrderItemMinAggregateInputType
    _max?: OrderItemMaxAggregateInputType
  }

  export type OrderItemGroupByOutputType = {
    id: string
    orderID: string
    productID: string
    toolID: string
    levelID: string
    timeUnit: number
    count: number
    workingHours: number
    totalPrice: number | null
    _count: OrderItemCountAggregateOutputType | null
    _avg: OrderItemAvgAggregateOutputType | null
    _sum: OrderItemSumAggregateOutputType | null
    _min: OrderItemMinAggregateOutputType | null
    _max: OrderItemMaxAggregateOutputType | null
  }

  type GetOrderItemGroupByPayload<T extends OrderItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderItemGroupByOutputType[P]>
            : GetScalarType<T[P], OrderItemGroupByOutputType[P]>
        }
      >
    >


  export type OrderItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderID?: boolean
    productID?: boolean
    toolID?: boolean
    levelID?: boolean
    timeUnit?: boolean
    count?: boolean
    workingHours?: boolean
    totalPrice?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    tool?: boolean | ToolDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderItem"]>

  export type OrderItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderID?: boolean
    productID?: boolean
    toolID?: boolean
    levelID?: boolean
    timeUnit?: boolean
    count?: boolean
    workingHours?: boolean
    totalPrice?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    tool?: boolean | ToolDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderItem"]>

  export type OrderItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderID?: boolean
    productID?: boolean
    toolID?: boolean
    levelID?: boolean
    timeUnit?: boolean
    count?: boolean
    workingHours?: boolean
    totalPrice?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    tool?: boolean | ToolDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderItem"]>

  export type OrderItemSelectScalar = {
    id?: boolean
    orderID?: boolean
    productID?: boolean
    toolID?: boolean
    levelID?: boolean
    timeUnit?: boolean
    count?: boolean
    workingHours?: boolean
    totalPrice?: boolean
  }

  export type OrderItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "orderID" | "productID" | "toolID" | "levelID" | "timeUnit" | "count" | "workingHours" | "totalPrice", ExtArgs["result"]["orderItem"]>
  export type OrderItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    tool?: boolean | ToolDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
  }
  export type OrderItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    tool?: boolean | ToolDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
  }
  export type OrderItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    tool?: boolean | ToolDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
  }

  export type $OrderItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OrderItem"
    objects: {
      order: Prisma.$OrderPayload<ExtArgs>
      product: Prisma.$ProductPayload<ExtArgs>
      tool: Prisma.$ToolPayload<ExtArgs>
      level: Prisma.$LevelPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      orderID: string
      productID: string
      toolID: string
      levelID: string
      timeUnit: number
      count: number
      workingHours: number
      totalPrice: number | null
    }, ExtArgs["result"]["orderItem"]>
    composites: {}
  }

  type OrderItemGetPayload<S extends boolean | null | undefined | OrderItemDefaultArgs> = $Result.GetResult<Prisma.$OrderItemPayload, S>

  type OrderItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrderItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderItemCountAggregateInputType | true
    }

  export interface OrderItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrderItem'], meta: { name: 'OrderItem' } }
    /**
     * Find zero or one OrderItem that matches the filter.
     * @param {OrderItemFindUniqueArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderItemFindUniqueArgs>(args: SelectSubset<T, OrderItemFindUniqueArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OrderItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderItemFindUniqueOrThrowArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderItemFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrderItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemFindFirstArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderItemFindFirstArgs>(args?: SelectSubset<T, OrderItemFindFirstArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrderItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemFindFirstOrThrowArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderItemFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OrderItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrderItems
     * const orderItems = await prisma.orderItem.findMany()
     * 
     * // Get first 10 OrderItems
     * const orderItems = await prisma.orderItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderItemWithIdOnly = await prisma.orderItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderItemFindManyArgs>(args?: SelectSubset<T, OrderItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OrderItem.
     * @param {OrderItemCreateArgs} args - Arguments to create a OrderItem.
     * @example
     * // Create one OrderItem
     * const OrderItem = await prisma.orderItem.create({
     *   data: {
     *     // ... data to create a OrderItem
     *   }
     * })
     * 
     */
    create<T extends OrderItemCreateArgs>(args: SelectSubset<T, OrderItemCreateArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OrderItems.
     * @param {OrderItemCreateManyArgs} args - Arguments to create many OrderItems.
     * @example
     * // Create many OrderItems
     * const orderItem = await prisma.orderItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderItemCreateManyArgs>(args?: SelectSubset<T, OrderItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OrderItems and returns the data saved in the database.
     * @param {OrderItemCreateManyAndReturnArgs} args - Arguments to create many OrderItems.
     * @example
     * // Create many OrderItems
     * const orderItem = await prisma.orderItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OrderItems and only return the `id`
     * const orderItemWithIdOnly = await prisma.orderItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrderItemCreateManyAndReturnArgs>(args?: SelectSubset<T, OrderItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OrderItem.
     * @param {OrderItemDeleteArgs} args - Arguments to delete one OrderItem.
     * @example
     * // Delete one OrderItem
     * const OrderItem = await prisma.orderItem.delete({
     *   where: {
     *     // ... filter to delete one OrderItem
     *   }
     * })
     * 
     */
    delete<T extends OrderItemDeleteArgs>(args: SelectSubset<T, OrderItemDeleteArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OrderItem.
     * @param {OrderItemUpdateArgs} args - Arguments to update one OrderItem.
     * @example
     * // Update one OrderItem
     * const orderItem = await prisma.orderItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderItemUpdateArgs>(args: SelectSubset<T, OrderItemUpdateArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OrderItems.
     * @param {OrderItemDeleteManyArgs} args - Arguments to filter OrderItems to delete.
     * @example
     * // Delete a few OrderItems
     * const { count } = await prisma.orderItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderItemDeleteManyArgs>(args?: SelectSubset<T, OrderItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrderItems
     * const orderItem = await prisma.orderItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderItemUpdateManyArgs>(args: SelectSubset<T, OrderItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderItems and returns the data updated in the database.
     * @param {OrderItemUpdateManyAndReturnArgs} args - Arguments to update many OrderItems.
     * @example
     * // Update many OrderItems
     * const orderItem = await prisma.orderItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OrderItems and only return the `id`
     * const orderItemWithIdOnly = await prisma.orderItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrderItemUpdateManyAndReturnArgs>(args: SelectSubset<T, OrderItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OrderItem.
     * @param {OrderItemUpsertArgs} args - Arguments to update or create a OrderItem.
     * @example
     * // Update or create a OrderItem
     * const orderItem = await prisma.orderItem.upsert({
     *   create: {
     *     // ... data to create a OrderItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrderItem we want to update
     *   }
     * })
     */
    upsert<T extends OrderItemUpsertArgs>(args: SelectSubset<T, OrderItemUpsertArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemCountArgs} args - Arguments to filter OrderItems to count.
     * @example
     * // Count the number of OrderItems
     * const count = await prisma.orderItem.count({
     *   where: {
     *     // ... the filter for the OrderItems we want to count
     *   }
     * })
    **/
    count<T extends OrderItemCountArgs>(
      args?: Subset<T, OrderItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrderItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderItemAggregateArgs>(args: Subset<T, OrderItemAggregateArgs>): Prisma.PrismaPromise<GetOrderItemAggregateType<T>>

    /**
     * Group by OrderItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderItemGroupByArgs['orderBy'] }
        : { orderBy?: OrderItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OrderItem model
   */
  readonly fields: OrderItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrderItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tool<T extends ToolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ToolDefaultArgs<ExtArgs>>): Prisma__ToolClient<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    level<T extends LevelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LevelDefaultArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OrderItem model
   */
  interface OrderItemFieldRefs {
    readonly id: FieldRef<"OrderItem", 'String'>
    readonly orderID: FieldRef<"OrderItem", 'String'>
    readonly productID: FieldRef<"OrderItem", 'String'>
    readonly toolID: FieldRef<"OrderItem", 'String'>
    readonly levelID: FieldRef<"OrderItem", 'String'>
    readonly timeUnit: FieldRef<"OrderItem", 'Int'>
    readonly count: FieldRef<"OrderItem", 'Int'>
    readonly workingHours: FieldRef<"OrderItem", 'Int'>
    readonly totalPrice: FieldRef<"OrderItem", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * OrderItem findUnique
   */
  export type OrderItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem findUniqueOrThrow
   */
  export type OrderItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem findFirst
   */
  export type OrderItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderItems.
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderItems.
     */
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * OrderItem findFirstOrThrow
   */
  export type OrderItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderItems.
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderItems.
     */
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * OrderItem findMany
   */
  export type OrderItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItems to fetch.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrderItems.
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * OrderItem create
   */
  export type OrderItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * The data needed to create a OrderItem.
     */
    data: XOR<OrderItemCreateInput, OrderItemUncheckedCreateInput>
  }

  /**
   * OrderItem createMany
   */
  export type OrderItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OrderItems.
     */
    data: OrderItemCreateManyInput | OrderItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OrderItem createManyAndReturn
   */
  export type OrderItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * The data used to create many OrderItems.
     */
    data: OrderItemCreateManyInput | OrderItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrderItem update
   */
  export type OrderItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * The data needed to update a OrderItem.
     */
    data: XOR<OrderItemUpdateInput, OrderItemUncheckedUpdateInput>
    /**
     * Choose, which OrderItem to update.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem updateMany
   */
  export type OrderItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OrderItems.
     */
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyInput>
    /**
     * Filter which OrderItems to update
     */
    where?: OrderItemWhereInput
    /**
     * Limit how many OrderItems to update.
     */
    limit?: number
  }

  /**
   * OrderItem updateManyAndReturn
   */
  export type OrderItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * The data used to update OrderItems.
     */
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyInput>
    /**
     * Filter which OrderItems to update
     */
    where?: OrderItemWhereInput
    /**
     * Limit how many OrderItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrderItem upsert
   */
  export type OrderItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * The filter to search for the OrderItem to update in case it exists.
     */
    where: OrderItemWhereUniqueInput
    /**
     * In case the OrderItem found by the `where` argument doesn't exist, create a new OrderItem with this data.
     */
    create: XOR<OrderItemCreateInput, OrderItemUncheckedCreateInput>
    /**
     * In case the OrderItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderItemUpdateInput, OrderItemUncheckedUpdateInput>
  }

  /**
   * OrderItem delete
   */
  export type OrderItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter which OrderItem to delete.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem deleteMany
   */
  export type OrderItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderItems to delete
     */
    where?: OrderItemWhereInput
    /**
     * Limit how many OrderItems to delete.
     */
    limit?: number
  }

  /**
   * OrderItem without action
   */
  export type OrderItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
  }


  /**
   * Model Brand
   */

  export type AggregateBrand = {
    _count: BrandCountAggregateOutputType | null
    _min: BrandMinAggregateOutputType | null
    _max: BrandMaxAggregateOutputType | null
  }

  export type BrandMinAggregateOutputType = {
    id: string | null
    nameRu: string | null
    nameUz: string | null
    nameEn: string | null
  }

  export type BrandMaxAggregateOutputType = {
    id: string | null
    nameRu: string | null
    nameUz: string | null
    nameEn: string | null
  }

  export type BrandCountAggregateOutputType = {
    id: number
    nameRu: number
    nameUz: number
    nameEn: number
    _all: number
  }


  export type BrandMinAggregateInputType = {
    id?: true
    nameRu?: true
    nameUz?: true
    nameEn?: true
  }

  export type BrandMaxAggregateInputType = {
    id?: true
    nameRu?: true
    nameUz?: true
    nameEn?: true
  }

  export type BrandCountAggregateInputType = {
    id?: true
    nameRu?: true
    nameUz?: true
    nameEn?: true
    _all?: true
  }

  export type BrandAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Brand to aggregate.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Brands
    **/
    _count?: true | BrandCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BrandMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BrandMaxAggregateInputType
  }

  export type GetBrandAggregateType<T extends BrandAggregateArgs> = {
        [P in keyof T & keyof AggregateBrand]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBrand[P]>
      : GetScalarType<T[P], AggregateBrand[P]>
  }




  export type BrandGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BrandWhereInput
    orderBy?: BrandOrderByWithAggregationInput | BrandOrderByWithAggregationInput[]
    by: BrandScalarFieldEnum[] | BrandScalarFieldEnum
    having?: BrandScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BrandCountAggregateInputType | true
    _min?: BrandMinAggregateInputType
    _max?: BrandMaxAggregateInputType
  }

  export type BrandGroupByOutputType = {
    id: string
    nameRu: string
    nameUz: string
    nameEn: string
    _count: BrandCountAggregateOutputType | null
    _min: BrandMinAggregateOutputType | null
    _max: BrandMaxAggregateOutputType | null
  }

  type GetBrandGroupByPayload<T extends BrandGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BrandGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BrandGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BrandGroupByOutputType[P]>
            : GetScalarType<T[P], BrandGroupByOutputType[P]>
        }
      >
    >


  export type BrandSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
    tools?: boolean | Brand$toolsArgs<ExtArgs>
    _count?: boolean | BrandCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["brand"]>

  export type BrandSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
  }, ExtArgs["result"]["brand"]>

  export type BrandSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
  }, ExtArgs["result"]["brand"]>

  export type BrandSelectScalar = {
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
  }

  export type BrandOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nameRu" | "nameUz" | "nameEn", ExtArgs["result"]["brand"]>
  export type BrandInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tools?: boolean | Brand$toolsArgs<ExtArgs>
    _count?: boolean | BrandCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BrandIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type BrandIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $BrandPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Brand"
    objects: {
      tools: Prisma.$ToolPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nameRu: string
      nameUz: string
      nameEn: string
    }, ExtArgs["result"]["brand"]>
    composites: {}
  }

  type BrandGetPayload<S extends boolean | null | undefined | BrandDefaultArgs> = $Result.GetResult<Prisma.$BrandPayload, S>

  type BrandCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BrandFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BrandCountAggregateInputType | true
    }

  export interface BrandDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Brand'], meta: { name: 'Brand' } }
    /**
     * Find zero or one Brand that matches the filter.
     * @param {BrandFindUniqueArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BrandFindUniqueArgs>(args: SelectSubset<T, BrandFindUniqueArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Brand that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BrandFindUniqueOrThrowArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BrandFindUniqueOrThrowArgs>(args: SelectSubset<T, BrandFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Brand that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandFindFirstArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BrandFindFirstArgs>(args?: SelectSubset<T, BrandFindFirstArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Brand that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandFindFirstOrThrowArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BrandFindFirstOrThrowArgs>(args?: SelectSubset<T, BrandFindFirstOrThrowArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Brands that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Brands
     * const brands = await prisma.brand.findMany()
     * 
     * // Get first 10 Brands
     * const brands = await prisma.brand.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const brandWithIdOnly = await prisma.brand.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BrandFindManyArgs>(args?: SelectSubset<T, BrandFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Brand.
     * @param {BrandCreateArgs} args - Arguments to create a Brand.
     * @example
     * // Create one Brand
     * const Brand = await prisma.brand.create({
     *   data: {
     *     // ... data to create a Brand
     *   }
     * })
     * 
     */
    create<T extends BrandCreateArgs>(args: SelectSubset<T, BrandCreateArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Brands.
     * @param {BrandCreateManyArgs} args - Arguments to create many Brands.
     * @example
     * // Create many Brands
     * const brand = await prisma.brand.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BrandCreateManyArgs>(args?: SelectSubset<T, BrandCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Brands and returns the data saved in the database.
     * @param {BrandCreateManyAndReturnArgs} args - Arguments to create many Brands.
     * @example
     * // Create many Brands
     * const brand = await prisma.brand.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Brands and only return the `id`
     * const brandWithIdOnly = await prisma.brand.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BrandCreateManyAndReturnArgs>(args?: SelectSubset<T, BrandCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Brand.
     * @param {BrandDeleteArgs} args - Arguments to delete one Brand.
     * @example
     * // Delete one Brand
     * const Brand = await prisma.brand.delete({
     *   where: {
     *     // ... filter to delete one Brand
     *   }
     * })
     * 
     */
    delete<T extends BrandDeleteArgs>(args: SelectSubset<T, BrandDeleteArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Brand.
     * @param {BrandUpdateArgs} args - Arguments to update one Brand.
     * @example
     * // Update one Brand
     * const brand = await prisma.brand.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BrandUpdateArgs>(args: SelectSubset<T, BrandUpdateArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Brands.
     * @param {BrandDeleteManyArgs} args - Arguments to filter Brands to delete.
     * @example
     * // Delete a few Brands
     * const { count } = await prisma.brand.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BrandDeleteManyArgs>(args?: SelectSubset<T, BrandDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Brands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Brands
     * const brand = await prisma.brand.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BrandUpdateManyArgs>(args: SelectSubset<T, BrandUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Brands and returns the data updated in the database.
     * @param {BrandUpdateManyAndReturnArgs} args - Arguments to update many Brands.
     * @example
     * // Update many Brands
     * const brand = await prisma.brand.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Brands and only return the `id`
     * const brandWithIdOnly = await prisma.brand.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BrandUpdateManyAndReturnArgs>(args: SelectSubset<T, BrandUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Brand.
     * @param {BrandUpsertArgs} args - Arguments to update or create a Brand.
     * @example
     * // Update or create a Brand
     * const brand = await prisma.brand.upsert({
     *   create: {
     *     // ... data to create a Brand
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Brand we want to update
     *   }
     * })
     */
    upsert<T extends BrandUpsertArgs>(args: SelectSubset<T, BrandUpsertArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Brands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandCountArgs} args - Arguments to filter Brands to count.
     * @example
     * // Count the number of Brands
     * const count = await prisma.brand.count({
     *   where: {
     *     // ... the filter for the Brands we want to count
     *   }
     * })
    **/
    count<T extends BrandCountArgs>(
      args?: Subset<T, BrandCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BrandCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Brand.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BrandAggregateArgs>(args: Subset<T, BrandAggregateArgs>): Prisma.PrismaPromise<GetBrandAggregateType<T>>

    /**
     * Group by Brand.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BrandGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BrandGroupByArgs['orderBy'] }
        : { orderBy?: BrandGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BrandGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBrandGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Brand model
   */
  readonly fields: BrandFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Brand.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BrandClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tools<T extends Brand$toolsArgs<ExtArgs> = {}>(args?: Subset<T, Brand$toolsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Brand model
   */
  interface BrandFieldRefs {
    readonly id: FieldRef<"Brand", 'String'>
    readonly nameRu: FieldRef<"Brand", 'String'>
    readonly nameUz: FieldRef<"Brand", 'String'>
    readonly nameEn: FieldRef<"Brand", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Brand findUnique
   */
  export type BrandFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand findUniqueOrThrow
   */
  export type BrandFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand findFirst
   */
  export type BrandFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Brands.
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Brands.
     */
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * Brand findFirstOrThrow
   */
  export type BrandFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Brands.
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Brands.
     */
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * Brand findMany
   */
  export type BrandFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brands to fetch.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Brands.
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * Brand create
   */
  export type BrandCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * The data needed to create a Brand.
     */
    data: XOR<BrandCreateInput, BrandUncheckedCreateInput>
  }

  /**
   * Brand createMany
   */
  export type BrandCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Brands.
     */
    data: BrandCreateManyInput | BrandCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Brand createManyAndReturn
   */
  export type BrandCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * The data used to create many Brands.
     */
    data: BrandCreateManyInput | BrandCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Brand update
   */
  export type BrandUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * The data needed to update a Brand.
     */
    data: XOR<BrandUpdateInput, BrandUncheckedUpdateInput>
    /**
     * Choose, which Brand to update.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand updateMany
   */
  export type BrandUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Brands.
     */
    data: XOR<BrandUpdateManyMutationInput, BrandUncheckedUpdateManyInput>
    /**
     * Filter which Brands to update
     */
    where?: BrandWhereInput
    /**
     * Limit how many Brands to update.
     */
    limit?: number
  }

  /**
   * Brand updateManyAndReturn
   */
  export type BrandUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * The data used to update Brands.
     */
    data: XOR<BrandUpdateManyMutationInput, BrandUncheckedUpdateManyInput>
    /**
     * Filter which Brands to update
     */
    where?: BrandWhereInput
    /**
     * Limit how many Brands to update.
     */
    limit?: number
  }

  /**
   * Brand upsert
   */
  export type BrandUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * The filter to search for the Brand to update in case it exists.
     */
    where: BrandWhereUniqueInput
    /**
     * In case the Brand found by the `where` argument doesn't exist, create a new Brand with this data.
     */
    create: XOR<BrandCreateInput, BrandUncheckedCreateInput>
    /**
     * In case the Brand was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BrandUpdateInput, BrandUncheckedUpdateInput>
  }

  /**
   * Brand delete
   */
  export type BrandDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter which Brand to delete.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand deleteMany
   */
  export type BrandDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Brands to delete
     */
    where?: BrandWhereInput
    /**
     * Limit how many Brands to delete.
     */
    limit?: number
  }

  /**
   * Brand.tools
   */
  export type Brand$toolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
    where?: ToolWhereInput
    orderBy?: ToolOrderByWithRelationInput | ToolOrderByWithRelationInput[]
    cursor?: ToolWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ToolScalarFieldEnum | ToolScalarFieldEnum[]
  }

  /**
   * Brand without action
   */
  export type BrandDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
  }


  /**
   * Model Capacity
   */

  export type AggregateCapacity = {
    _count: CapacityCountAggregateOutputType | null
    _min: CapacityMinAggregateOutputType | null
    _max: CapacityMaxAggregateOutputType | null
  }

  export type CapacityMinAggregateOutputType = {
    id: string | null
    nameRu: string | null
    nameUz: string | null
    nameEn: string | null
  }

  export type CapacityMaxAggregateOutputType = {
    id: string | null
    nameRu: string | null
    nameUz: string | null
    nameEn: string | null
  }

  export type CapacityCountAggregateOutputType = {
    id: number
    nameRu: number
    nameUz: number
    nameEn: number
    _all: number
  }


  export type CapacityMinAggregateInputType = {
    id?: true
    nameRu?: true
    nameUz?: true
    nameEn?: true
  }

  export type CapacityMaxAggregateInputType = {
    id?: true
    nameRu?: true
    nameUz?: true
    nameEn?: true
  }

  export type CapacityCountAggregateInputType = {
    id?: true
    nameRu?: true
    nameUz?: true
    nameEn?: true
    _all?: true
  }

  export type CapacityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Capacity to aggregate.
     */
    where?: CapacityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Capacities to fetch.
     */
    orderBy?: CapacityOrderByWithRelationInput | CapacityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CapacityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Capacities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Capacities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Capacities
    **/
    _count?: true | CapacityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CapacityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CapacityMaxAggregateInputType
  }

  export type GetCapacityAggregateType<T extends CapacityAggregateArgs> = {
        [P in keyof T & keyof AggregateCapacity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCapacity[P]>
      : GetScalarType<T[P], AggregateCapacity[P]>
  }




  export type CapacityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CapacityWhereInput
    orderBy?: CapacityOrderByWithAggregationInput | CapacityOrderByWithAggregationInput[]
    by: CapacityScalarFieldEnum[] | CapacityScalarFieldEnum
    having?: CapacityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CapacityCountAggregateInputType | true
    _min?: CapacityMinAggregateInputType
    _max?: CapacityMaxAggregateInputType
  }

  export type CapacityGroupByOutputType = {
    id: string
    nameRu: string
    nameUz: string
    nameEn: string
    _count: CapacityCountAggregateOutputType | null
    _min: CapacityMinAggregateOutputType | null
    _max: CapacityMaxAggregateOutputType | null
  }

  type GetCapacityGroupByPayload<T extends CapacityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CapacityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CapacityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CapacityGroupByOutputType[P]>
            : GetScalarType<T[P], CapacityGroupByOutputType[P]>
        }
      >
    >


  export type CapacitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
    tools?: boolean | Capacity$toolsArgs<ExtArgs>
    _count?: boolean | CapacityCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["capacity"]>

  export type CapacitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
  }, ExtArgs["result"]["capacity"]>

  export type CapacitySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
  }, ExtArgs["result"]["capacity"]>

  export type CapacitySelectScalar = {
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
  }

  export type CapacityOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nameRu" | "nameUz" | "nameEn", ExtArgs["result"]["capacity"]>
  export type CapacityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tools?: boolean | Capacity$toolsArgs<ExtArgs>
    _count?: boolean | CapacityCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CapacityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CapacityIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CapacityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Capacity"
    objects: {
      tools: Prisma.$ToolPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nameRu: string
      nameUz: string
      nameEn: string
    }, ExtArgs["result"]["capacity"]>
    composites: {}
  }

  type CapacityGetPayload<S extends boolean | null | undefined | CapacityDefaultArgs> = $Result.GetResult<Prisma.$CapacityPayload, S>

  type CapacityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CapacityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CapacityCountAggregateInputType | true
    }

  export interface CapacityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Capacity'], meta: { name: 'Capacity' } }
    /**
     * Find zero or one Capacity that matches the filter.
     * @param {CapacityFindUniqueArgs} args - Arguments to find a Capacity
     * @example
     * // Get one Capacity
     * const capacity = await prisma.capacity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CapacityFindUniqueArgs>(args: SelectSubset<T, CapacityFindUniqueArgs<ExtArgs>>): Prisma__CapacityClient<$Result.GetResult<Prisma.$CapacityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Capacity that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CapacityFindUniqueOrThrowArgs} args - Arguments to find a Capacity
     * @example
     * // Get one Capacity
     * const capacity = await prisma.capacity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CapacityFindUniqueOrThrowArgs>(args: SelectSubset<T, CapacityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CapacityClient<$Result.GetResult<Prisma.$CapacityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Capacity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CapacityFindFirstArgs} args - Arguments to find a Capacity
     * @example
     * // Get one Capacity
     * const capacity = await prisma.capacity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CapacityFindFirstArgs>(args?: SelectSubset<T, CapacityFindFirstArgs<ExtArgs>>): Prisma__CapacityClient<$Result.GetResult<Prisma.$CapacityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Capacity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CapacityFindFirstOrThrowArgs} args - Arguments to find a Capacity
     * @example
     * // Get one Capacity
     * const capacity = await prisma.capacity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CapacityFindFirstOrThrowArgs>(args?: SelectSubset<T, CapacityFindFirstOrThrowArgs<ExtArgs>>): Prisma__CapacityClient<$Result.GetResult<Prisma.$CapacityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Capacities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CapacityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Capacities
     * const capacities = await prisma.capacity.findMany()
     * 
     * // Get first 10 Capacities
     * const capacities = await prisma.capacity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const capacityWithIdOnly = await prisma.capacity.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CapacityFindManyArgs>(args?: SelectSubset<T, CapacityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CapacityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Capacity.
     * @param {CapacityCreateArgs} args - Arguments to create a Capacity.
     * @example
     * // Create one Capacity
     * const Capacity = await prisma.capacity.create({
     *   data: {
     *     // ... data to create a Capacity
     *   }
     * })
     * 
     */
    create<T extends CapacityCreateArgs>(args: SelectSubset<T, CapacityCreateArgs<ExtArgs>>): Prisma__CapacityClient<$Result.GetResult<Prisma.$CapacityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Capacities.
     * @param {CapacityCreateManyArgs} args - Arguments to create many Capacities.
     * @example
     * // Create many Capacities
     * const capacity = await prisma.capacity.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CapacityCreateManyArgs>(args?: SelectSubset<T, CapacityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Capacities and returns the data saved in the database.
     * @param {CapacityCreateManyAndReturnArgs} args - Arguments to create many Capacities.
     * @example
     * // Create many Capacities
     * const capacity = await prisma.capacity.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Capacities and only return the `id`
     * const capacityWithIdOnly = await prisma.capacity.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CapacityCreateManyAndReturnArgs>(args?: SelectSubset<T, CapacityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CapacityPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Capacity.
     * @param {CapacityDeleteArgs} args - Arguments to delete one Capacity.
     * @example
     * // Delete one Capacity
     * const Capacity = await prisma.capacity.delete({
     *   where: {
     *     // ... filter to delete one Capacity
     *   }
     * })
     * 
     */
    delete<T extends CapacityDeleteArgs>(args: SelectSubset<T, CapacityDeleteArgs<ExtArgs>>): Prisma__CapacityClient<$Result.GetResult<Prisma.$CapacityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Capacity.
     * @param {CapacityUpdateArgs} args - Arguments to update one Capacity.
     * @example
     * // Update one Capacity
     * const capacity = await prisma.capacity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CapacityUpdateArgs>(args: SelectSubset<T, CapacityUpdateArgs<ExtArgs>>): Prisma__CapacityClient<$Result.GetResult<Prisma.$CapacityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Capacities.
     * @param {CapacityDeleteManyArgs} args - Arguments to filter Capacities to delete.
     * @example
     * // Delete a few Capacities
     * const { count } = await prisma.capacity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CapacityDeleteManyArgs>(args?: SelectSubset<T, CapacityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Capacities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CapacityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Capacities
     * const capacity = await prisma.capacity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CapacityUpdateManyArgs>(args: SelectSubset<T, CapacityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Capacities and returns the data updated in the database.
     * @param {CapacityUpdateManyAndReturnArgs} args - Arguments to update many Capacities.
     * @example
     * // Update many Capacities
     * const capacity = await prisma.capacity.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Capacities and only return the `id`
     * const capacityWithIdOnly = await prisma.capacity.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CapacityUpdateManyAndReturnArgs>(args: SelectSubset<T, CapacityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CapacityPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Capacity.
     * @param {CapacityUpsertArgs} args - Arguments to update or create a Capacity.
     * @example
     * // Update or create a Capacity
     * const capacity = await prisma.capacity.upsert({
     *   create: {
     *     // ... data to create a Capacity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Capacity we want to update
     *   }
     * })
     */
    upsert<T extends CapacityUpsertArgs>(args: SelectSubset<T, CapacityUpsertArgs<ExtArgs>>): Prisma__CapacityClient<$Result.GetResult<Prisma.$CapacityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Capacities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CapacityCountArgs} args - Arguments to filter Capacities to count.
     * @example
     * // Count the number of Capacities
     * const count = await prisma.capacity.count({
     *   where: {
     *     // ... the filter for the Capacities we want to count
     *   }
     * })
    **/
    count<T extends CapacityCountArgs>(
      args?: Subset<T, CapacityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CapacityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Capacity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CapacityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CapacityAggregateArgs>(args: Subset<T, CapacityAggregateArgs>): Prisma.PrismaPromise<GetCapacityAggregateType<T>>

    /**
     * Group by Capacity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CapacityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CapacityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CapacityGroupByArgs['orderBy'] }
        : { orderBy?: CapacityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CapacityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCapacityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Capacity model
   */
  readonly fields: CapacityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Capacity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CapacityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tools<T extends Capacity$toolsArgs<ExtArgs> = {}>(args?: Subset<T, Capacity$toolsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Capacity model
   */
  interface CapacityFieldRefs {
    readonly id: FieldRef<"Capacity", 'String'>
    readonly nameRu: FieldRef<"Capacity", 'String'>
    readonly nameUz: FieldRef<"Capacity", 'String'>
    readonly nameEn: FieldRef<"Capacity", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Capacity findUnique
   */
  export type CapacityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capacity
     */
    select?: CapacitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Capacity
     */
    omit?: CapacityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapacityInclude<ExtArgs> | null
    /**
     * Filter, which Capacity to fetch.
     */
    where: CapacityWhereUniqueInput
  }

  /**
   * Capacity findUniqueOrThrow
   */
  export type CapacityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capacity
     */
    select?: CapacitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Capacity
     */
    omit?: CapacityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapacityInclude<ExtArgs> | null
    /**
     * Filter, which Capacity to fetch.
     */
    where: CapacityWhereUniqueInput
  }

  /**
   * Capacity findFirst
   */
  export type CapacityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capacity
     */
    select?: CapacitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Capacity
     */
    omit?: CapacityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapacityInclude<ExtArgs> | null
    /**
     * Filter, which Capacity to fetch.
     */
    where?: CapacityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Capacities to fetch.
     */
    orderBy?: CapacityOrderByWithRelationInput | CapacityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Capacities.
     */
    cursor?: CapacityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Capacities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Capacities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Capacities.
     */
    distinct?: CapacityScalarFieldEnum | CapacityScalarFieldEnum[]
  }

  /**
   * Capacity findFirstOrThrow
   */
  export type CapacityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capacity
     */
    select?: CapacitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Capacity
     */
    omit?: CapacityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapacityInclude<ExtArgs> | null
    /**
     * Filter, which Capacity to fetch.
     */
    where?: CapacityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Capacities to fetch.
     */
    orderBy?: CapacityOrderByWithRelationInput | CapacityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Capacities.
     */
    cursor?: CapacityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Capacities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Capacities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Capacities.
     */
    distinct?: CapacityScalarFieldEnum | CapacityScalarFieldEnum[]
  }

  /**
   * Capacity findMany
   */
  export type CapacityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capacity
     */
    select?: CapacitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Capacity
     */
    omit?: CapacityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapacityInclude<ExtArgs> | null
    /**
     * Filter, which Capacities to fetch.
     */
    where?: CapacityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Capacities to fetch.
     */
    orderBy?: CapacityOrderByWithRelationInput | CapacityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Capacities.
     */
    cursor?: CapacityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Capacities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Capacities.
     */
    skip?: number
    distinct?: CapacityScalarFieldEnum | CapacityScalarFieldEnum[]
  }

  /**
   * Capacity create
   */
  export type CapacityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capacity
     */
    select?: CapacitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Capacity
     */
    omit?: CapacityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapacityInclude<ExtArgs> | null
    /**
     * The data needed to create a Capacity.
     */
    data: XOR<CapacityCreateInput, CapacityUncheckedCreateInput>
  }

  /**
   * Capacity createMany
   */
  export type CapacityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Capacities.
     */
    data: CapacityCreateManyInput | CapacityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Capacity createManyAndReturn
   */
  export type CapacityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capacity
     */
    select?: CapacitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Capacity
     */
    omit?: CapacityOmit<ExtArgs> | null
    /**
     * The data used to create many Capacities.
     */
    data: CapacityCreateManyInput | CapacityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Capacity update
   */
  export type CapacityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capacity
     */
    select?: CapacitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Capacity
     */
    omit?: CapacityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapacityInclude<ExtArgs> | null
    /**
     * The data needed to update a Capacity.
     */
    data: XOR<CapacityUpdateInput, CapacityUncheckedUpdateInput>
    /**
     * Choose, which Capacity to update.
     */
    where: CapacityWhereUniqueInput
  }

  /**
   * Capacity updateMany
   */
  export type CapacityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Capacities.
     */
    data: XOR<CapacityUpdateManyMutationInput, CapacityUncheckedUpdateManyInput>
    /**
     * Filter which Capacities to update
     */
    where?: CapacityWhereInput
    /**
     * Limit how many Capacities to update.
     */
    limit?: number
  }

  /**
   * Capacity updateManyAndReturn
   */
  export type CapacityUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capacity
     */
    select?: CapacitySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Capacity
     */
    omit?: CapacityOmit<ExtArgs> | null
    /**
     * The data used to update Capacities.
     */
    data: XOR<CapacityUpdateManyMutationInput, CapacityUncheckedUpdateManyInput>
    /**
     * Filter which Capacities to update
     */
    where?: CapacityWhereInput
    /**
     * Limit how many Capacities to update.
     */
    limit?: number
  }

  /**
   * Capacity upsert
   */
  export type CapacityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capacity
     */
    select?: CapacitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Capacity
     */
    omit?: CapacityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapacityInclude<ExtArgs> | null
    /**
     * The filter to search for the Capacity to update in case it exists.
     */
    where: CapacityWhereUniqueInput
    /**
     * In case the Capacity found by the `where` argument doesn't exist, create a new Capacity with this data.
     */
    create: XOR<CapacityCreateInput, CapacityUncheckedCreateInput>
    /**
     * In case the Capacity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CapacityUpdateInput, CapacityUncheckedUpdateInput>
  }

  /**
   * Capacity delete
   */
  export type CapacityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capacity
     */
    select?: CapacitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Capacity
     */
    omit?: CapacityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapacityInclude<ExtArgs> | null
    /**
     * Filter which Capacity to delete.
     */
    where: CapacityWhereUniqueInput
  }

  /**
   * Capacity deleteMany
   */
  export type CapacityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Capacities to delete
     */
    where?: CapacityWhereInput
    /**
     * Limit how many Capacities to delete.
     */
    limit?: number
  }

  /**
   * Capacity.tools
   */
  export type Capacity$toolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
    where?: ToolWhereInput
    orderBy?: ToolOrderByWithRelationInput | ToolOrderByWithRelationInput[]
    cursor?: ToolWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ToolScalarFieldEnum | ToolScalarFieldEnum[]
  }

  /**
   * Capacity without action
   */
  export type CapacityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capacity
     */
    select?: CapacitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Capacity
     */
    omit?: CapacityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapacityInclude<ExtArgs> | null
  }


  /**
   * Model Size
   */

  export type AggregateSize = {
    _count: SizeCountAggregateOutputType | null
    _min: SizeMinAggregateOutputType | null
    _max: SizeMaxAggregateOutputType | null
  }

  export type SizeMinAggregateOutputType = {
    id: string | null
    nameRu: string | null
    nameUz: string | null
    nameEn: string | null
  }

  export type SizeMaxAggregateOutputType = {
    id: string | null
    nameRu: string | null
    nameUz: string | null
    nameEn: string | null
  }

  export type SizeCountAggregateOutputType = {
    id: number
    nameRu: number
    nameUz: number
    nameEn: number
    _all: number
  }


  export type SizeMinAggregateInputType = {
    id?: true
    nameRu?: true
    nameUz?: true
    nameEn?: true
  }

  export type SizeMaxAggregateInputType = {
    id?: true
    nameRu?: true
    nameUz?: true
    nameEn?: true
  }

  export type SizeCountAggregateInputType = {
    id?: true
    nameRu?: true
    nameUz?: true
    nameEn?: true
    _all?: true
  }

  export type SizeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Size to aggregate.
     */
    where?: SizeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sizes to fetch.
     */
    orderBy?: SizeOrderByWithRelationInput | SizeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SizeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sizes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sizes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sizes
    **/
    _count?: true | SizeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SizeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SizeMaxAggregateInputType
  }

  export type GetSizeAggregateType<T extends SizeAggregateArgs> = {
        [P in keyof T & keyof AggregateSize]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSize[P]>
      : GetScalarType<T[P], AggregateSize[P]>
  }




  export type SizeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SizeWhereInput
    orderBy?: SizeOrderByWithAggregationInput | SizeOrderByWithAggregationInput[]
    by: SizeScalarFieldEnum[] | SizeScalarFieldEnum
    having?: SizeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SizeCountAggregateInputType | true
    _min?: SizeMinAggregateInputType
    _max?: SizeMaxAggregateInputType
  }

  export type SizeGroupByOutputType = {
    id: string
    nameRu: string
    nameUz: string
    nameEn: string
    _count: SizeCountAggregateOutputType | null
    _min: SizeMinAggregateOutputType | null
    _max: SizeMaxAggregateOutputType | null
  }

  type GetSizeGroupByPayload<T extends SizeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SizeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SizeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SizeGroupByOutputType[P]>
            : GetScalarType<T[P], SizeGroupByOutputType[P]>
        }
      >
    >


  export type SizeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
    tools?: boolean | Size$toolsArgs<ExtArgs>
    _count?: boolean | SizeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["size"]>

  export type SizeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
  }, ExtArgs["result"]["size"]>

  export type SizeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
  }, ExtArgs["result"]["size"]>

  export type SizeSelectScalar = {
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
  }

  export type SizeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nameRu" | "nameUz" | "nameEn", ExtArgs["result"]["size"]>
  export type SizeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tools?: boolean | Size$toolsArgs<ExtArgs>
    _count?: boolean | SizeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SizeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type SizeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SizePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Size"
    objects: {
      tools: Prisma.$ToolPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nameRu: string
      nameUz: string
      nameEn: string
    }, ExtArgs["result"]["size"]>
    composites: {}
  }

  type SizeGetPayload<S extends boolean | null | undefined | SizeDefaultArgs> = $Result.GetResult<Prisma.$SizePayload, S>

  type SizeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SizeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SizeCountAggregateInputType | true
    }

  export interface SizeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Size'], meta: { name: 'Size' } }
    /**
     * Find zero or one Size that matches the filter.
     * @param {SizeFindUniqueArgs} args - Arguments to find a Size
     * @example
     * // Get one Size
     * const size = await prisma.size.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SizeFindUniqueArgs>(args: SelectSubset<T, SizeFindUniqueArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Size that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SizeFindUniqueOrThrowArgs} args - Arguments to find a Size
     * @example
     * // Get one Size
     * const size = await prisma.size.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SizeFindUniqueOrThrowArgs>(args: SelectSubset<T, SizeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Size that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeFindFirstArgs} args - Arguments to find a Size
     * @example
     * // Get one Size
     * const size = await prisma.size.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SizeFindFirstArgs>(args?: SelectSubset<T, SizeFindFirstArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Size that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeFindFirstOrThrowArgs} args - Arguments to find a Size
     * @example
     * // Get one Size
     * const size = await prisma.size.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SizeFindFirstOrThrowArgs>(args?: SelectSubset<T, SizeFindFirstOrThrowArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sizes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sizes
     * const sizes = await prisma.size.findMany()
     * 
     * // Get first 10 Sizes
     * const sizes = await prisma.size.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sizeWithIdOnly = await prisma.size.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SizeFindManyArgs>(args?: SelectSubset<T, SizeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Size.
     * @param {SizeCreateArgs} args - Arguments to create a Size.
     * @example
     * // Create one Size
     * const Size = await prisma.size.create({
     *   data: {
     *     // ... data to create a Size
     *   }
     * })
     * 
     */
    create<T extends SizeCreateArgs>(args: SelectSubset<T, SizeCreateArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sizes.
     * @param {SizeCreateManyArgs} args - Arguments to create many Sizes.
     * @example
     * // Create many Sizes
     * const size = await prisma.size.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SizeCreateManyArgs>(args?: SelectSubset<T, SizeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sizes and returns the data saved in the database.
     * @param {SizeCreateManyAndReturnArgs} args - Arguments to create many Sizes.
     * @example
     * // Create many Sizes
     * const size = await prisma.size.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sizes and only return the `id`
     * const sizeWithIdOnly = await prisma.size.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SizeCreateManyAndReturnArgs>(args?: SelectSubset<T, SizeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Size.
     * @param {SizeDeleteArgs} args - Arguments to delete one Size.
     * @example
     * // Delete one Size
     * const Size = await prisma.size.delete({
     *   where: {
     *     // ... filter to delete one Size
     *   }
     * })
     * 
     */
    delete<T extends SizeDeleteArgs>(args: SelectSubset<T, SizeDeleteArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Size.
     * @param {SizeUpdateArgs} args - Arguments to update one Size.
     * @example
     * // Update one Size
     * const size = await prisma.size.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SizeUpdateArgs>(args: SelectSubset<T, SizeUpdateArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sizes.
     * @param {SizeDeleteManyArgs} args - Arguments to filter Sizes to delete.
     * @example
     * // Delete a few Sizes
     * const { count } = await prisma.size.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SizeDeleteManyArgs>(args?: SelectSubset<T, SizeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sizes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sizes
     * const size = await prisma.size.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SizeUpdateManyArgs>(args: SelectSubset<T, SizeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sizes and returns the data updated in the database.
     * @param {SizeUpdateManyAndReturnArgs} args - Arguments to update many Sizes.
     * @example
     * // Update many Sizes
     * const size = await prisma.size.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sizes and only return the `id`
     * const sizeWithIdOnly = await prisma.size.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SizeUpdateManyAndReturnArgs>(args: SelectSubset<T, SizeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Size.
     * @param {SizeUpsertArgs} args - Arguments to update or create a Size.
     * @example
     * // Update or create a Size
     * const size = await prisma.size.upsert({
     *   create: {
     *     // ... data to create a Size
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Size we want to update
     *   }
     * })
     */
    upsert<T extends SizeUpsertArgs>(args: SelectSubset<T, SizeUpsertArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sizes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeCountArgs} args - Arguments to filter Sizes to count.
     * @example
     * // Count the number of Sizes
     * const count = await prisma.size.count({
     *   where: {
     *     // ... the filter for the Sizes we want to count
     *   }
     * })
    **/
    count<T extends SizeCountArgs>(
      args?: Subset<T, SizeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SizeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Size.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SizeAggregateArgs>(args: Subset<T, SizeAggregateArgs>): Prisma.PrismaPromise<GetSizeAggregateType<T>>

    /**
     * Group by Size.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SizeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SizeGroupByArgs['orderBy'] }
        : { orderBy?: SizeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SizeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSizeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Size model
   */
  readonly fields: SizeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Size.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SizeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tools<T extends Size$toolsArgs<ExtArgs> = {}>(args?: Subset<T, Size$toolsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Size model
   */
  interface SizeFieldRefs {
    readonly id: FieldRef<"Size", 'String'>
    readonly nameRu: FieldRef<"Size", 'String'>
    readonly nameUz: FieldRef<"Size", 'String'>
    readonly nameEn: FieldRef<"Size", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Size findUnique
   */
  export type SizeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * Filter, which Size to fetch.
     */
    where: SizeWhereUniqueInput
  }

  /**
   * Size findUniqueOrThrow
   */
  export type SizeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * Filter, which Size to fetch.
     */
    where: SizeWhereUniqueInput
  }

  /**
   * Size findFirst
   */
  export type SizeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * Filter, which Size to fetch.
     */
    where?: SizeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sizes to fetch.
     */
    orderBy?: SizeOrderByWithRelationInput | SizeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sizes.
     */
    cursor?: SizeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sizes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sizes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sizes.
     */
    distinct?: SizeScalarFieldEnum | SizeScalarFieldEnum[]
  }

  /**
   * Size findFirstOrThrow
   */
  export type SizeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * Filter, which Size to fetch.
     */
    where?: SizeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sizes to fetch.
     */
    orderBy?: SizeOrderByWithRelationInput | SizeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sizes.
     */
    cursor?: SizeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sizes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sizes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sizes.
     */
    distinct?: SizeScalarFieldEnum | SizeScalarFieldEnum[]
  }

  /**
   * Size findMany
   */
  export type SizeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * Filter, which Sizes to fetch.
     */
    where?: SizeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sizes to fetch.
     */
    orderBy?: SizeOrderByWithRelationInput | SizeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sizes.
     */
    cursor?: SizeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sizes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sizes.
     */
    skip?: number
    distinct?: SizeScalarFieldEnum | SizeScalarFieldEnum[]
  }

  /**
   * Size create
   */
  export type SizeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * The data needed to create a Size.
     */
    data: XOR<SizeCreateInput, SizeUncheckedCreateInput>
  }

  /**
   * Size createMany
   */
  export type SizeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sizes.
     */
    data: SizeCreateManyInput | SizeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Size createManyAndReturn
   */
  export type SizeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * The data used to create many Sizes.
     */
    data: SizeCreateManyInput | SizeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Size update
   */
  export type SizeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * The data needed to update a Size.
     */
    data: XOR<SizeUpdateInput, SizeUncheckedUpdateInput>
    /**
     * Choose, which Size to update.
     */
    where: SizeWhereUniqueInput
  }

  /**
   * Size updateMany
   */
  export type SizeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sizes.
     */
    data: XOR<SizeUpdateManyMutationInput, SizeUncheckedUpdateManyInput>
    /**
     * Filter which Sizes to update
     */
    where?: SizeWhereInput
    /**
     * Limit how many Sizes to update.
     */
    limit?: number
  }

  /**
   * Size updateManyAndReturn
   */
  export type SizeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * The data used to update Sizes.
     */
    data: XOR<SizeUpdateManyMutationInput, SizeUncheckedUpdateManyInput>
    /**
     * Filter which Sizes to update
     */
    where?: SizeWhereInput
    /**
     * Limit how many Sizes to update.
     */
    limit?: number
  }

  /**
   * Size upsert
   */
  export type SizeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * The filter to search for the Size to update in case it exists.
     */
    where: SizeWhereUniqueInput
    /**
     * In case the Size found by the `where` argument doesn't exist, create a new Size with this data.
     */
    create: XOR<SizeCreateInput, SizeUncheckedCreateInput>
    /**
     * In case the Size was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SizeUpdateInput, SizeUncheckedUpdateInput>
  }

  /**
   * Size delete
   */
  export type SizeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * Filter which Size to delete.
     */
    where: SizeWhereUniqueInput
  }

  /**
   * Size deleteMany
   */
  export type SizeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sizes to delete
     */
    where?: SizeWhereInput
    /**
     * Limit how many Sizes to delete.
     */
    limit?: number
  }

  /**
   * Size.tools
   */
  export type Size$toolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
    where?: ToolWhereInput
    orderBy?: ToolOrderByWithRelationInput | ToolOrderByWithRelationInput[]
    cursor?: ToolWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ToolScalarFieldEnum | ToolScalarFieldEnum[]
  }

  /**
   * Size without action
   */
  export type SizeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
  }


  /**
   * Model Comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentAvgAggregateOutputType = {
    star: number | null
  }

  export type CommentSumAggregateOutputType = {
    star: number | null
  }

  export type CommentMinAggregateOutputType = {
    id: string | null
    message: string | null
    star: number | null
    masterID: string | null
    orderID: string | null
  }

  export type CommentMaxAggregateOutputType = {
    id: string | null
    message: string | null
    star: number | null
    masterID: string | null
    orderID: string | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    message: number
    star: number
    masterID: number
    orderID: number
    _all: number
  }


  export type CommentAvgAggregateInputType = {
    star?: true
  }

  export type CommentSumAggregateInputType = {
    star?: true
  }

  export type CommentMinAggregateInputType = {
    id?: true
    message?: true
    star?: true
    masterID?: true
    orderID?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    message?: true
    star?: true
    masterID?: true
    orderID?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    message?: true
    star?: true
    masterID?: true
    orderID?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _avg?: CommentAvgAggregateInputType
    _sum?: CommentSumAggregateInputType
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    id: string
    message: string
    star: number
    masterID: string
    orderID: string
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    message?: boolean
    star?: boolean
    masterID?: boolean
    orderID?: boolean
    master?: boolean | MasterDefaultArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    message?: boolean
    star?: boolean
    masterID?: boolean
    orderID?: boolean
    master?: boolean | MasterDefaultArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    message?: boolean
    star?: boolean
    masterID?: boolean
    orderID?: boolean
    master?: boolean | MasterDefaultArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectScalar = {
    id?: boolean
    message?: boolean
    star?: boolean
    masterID?: boolean
    orderID?: boolean
  }

  export type CommentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "message" | "star" | "masterID" | "orderID", ExtArgs["result"]["comment"]>
  export type CommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    master?: boolean | MasterDefaultArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }
  export type CommentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    master?: boolean | MasterDefaultArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }
  export type CommentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    master?: boolean | MasterDefaultArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }

  export type $CommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comment"
    objects: {
      master: Prisma.$MasterPayload<ExtArgs>
      order: Prisma.$OrderPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      message: string
      star: number
      masterID: string
      orderID: string
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }

  type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> = $Result.GetResult<Prisma.$CommentPayload, S>

  type CommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CommentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommentFindUniqueArgs>(args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Comment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(args: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommentFindFirstArgs>(args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommentFindManyArgs>(args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
     */
    create<T extends CommentCreateArgs>(args: SelectSubset<T, CommentCreateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Comments.
     * @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommentCreateManyArgs>(args?: SelectSubset<T, CommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Comments and returns the data saved in the database.
     * @param {CommentCreateManyAndReturnArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommentCreateManyAndReturnArgs>(args?: SelectSubset<T, CommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
     */
    delete<T extends CommentDeleteArgs>(args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommentUpdateArgs>(args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommentDeleteManyArgs>(args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommentUpdateManyArgs>(args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments and returns the data updated in the database.
     * @param {CommentUpdateManyAndReturnArgs} args - Arguments to update many Comments.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CommentUpdateManyAndReturnArgs>(args: SelectSubset<T, CommentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
     */
    upsert<T extends CommentUpsertArgs>(args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comment model
   */
  readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    master<T extends MasterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MasterDefaultArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Comment model
   */
  interface CommentFieldRefs {
    readonly id: FieldRef<"Comment", 'String'>
    readonly message: FieldRef<"Comment", 'String'>
    readonly star: FieldRef<"Comment", 'Int'>
    readonly masterID: FieldRef<"Comment", 'String'>
    readonly orderID: FieldRef<"Comment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment create
   */
  export type CommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }

  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Comment createManyAndReturn
   */
  export type CommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comment update
   */
  export type CommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to update.
     */
    limit?: number
  }

  /**
   * Comment updateManyAndReturn
   */
  export type CommentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }

  /**
   * Comment delete
   */
  export type CommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to delete.
     */
    limit?: number
  }

  /**
   * Comment without action
   */
  export type CommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
  }


  /**
   * Model Master
   */

  export type AggregateMaster = {
    _count: MasterCountAggregateOutputType | null
    _avg: MasterAvgAggregateOutputType | null
    _sum: MasterSumAggregateOutputType | null
    _min: MasterMinAggregateOutputType | null
    _max: MasterMaxAggregateOutputType | null
  }

  export type MasterAvgAggregateOutputType = {
    rating: number | null
  }

  export type MasterSumAggregateOutputType = {
    rating: number | null
  }

  export type MasterMinAggregateOutputType = {
    id: string | null
    nameRu: string | null
    nameUz: string | null
    nameEn: string | null
    isActive: boolean | null
    phone: string | null
    dob: string | null
    image: string | null
    passportImage: string | null
    rating: number | null
  }

  export type MasterMaxAggregateOutputType = {
    id: string | null
    nameRu: string | null
    nameUz: string | null
    nameEn: string | null
    isActive: boolean | null
    phone: string | null
    dob: string | null
    image: string | null
    passportImage: string | null
    rating: number | null
  }

  export type MasterCountAggregateOutputType = {
    id: number
    nameRu: number
    nameUz: number
    nameEn: number
    isActive: number
    phone: number
    dob: number
    image: number
    passportImage: number
    rating: number
    _all: number
  }


  export type MasterAvgAggregateInputType = {
    rating?: true
  }

  export type MasterSumAggregateInputType = {
    rating?: true
  }

  export type MasterMinAggregateInputType = {
    id?: true
    nameRu?: true
    nameUz?: true
    nameEn?: true
    isActive?: true
    phone?: true
    dob?: true
    image?: true
    passportImage?: true
    rating?: true
  }

  export type MasterMaxAggregateInputType = {
    id?: true
    nameRu?: true
    nameUz?: true
    nameEn?: true
    isActive?: true
    phone?: true
    dob?: true
    image?: true
    passportImage?: true
    rating?: true
  }

  export type MasterCountAggregateInputType = {
    id?: true
    nameRu?: true
    nameUz?: true
    nameEn?: true
    isActive?: true
    phone?: true
    dob?: true
    image?: true
    passportImage?: true
    rating?: true
    _all?: true
  }

  export type MasterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Master to aggregate.
     */
    where?: MasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Masters to fetch.
     */
    orderBy?: MasterOrderByWithRelationInput | MasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Masters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Masters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Masters
    **/
    _count?: true | MasterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MasterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MasterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MasterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MasterMaxAggregateInputType
  }

  export type GetMasterAggregateType<T extends MasterAggregateArgs> = {
        [P in keyof T & keyof AggregateMaster]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMaster[P]>
      : GetScalarType<T[P], AggregateMaster[P]>
  }




  export type MasterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MasterWhereInput
    orderBy?: MasterOrderByWithAggregationInput | MasterOrderByWithAggregationInput[]
    by: MasterScalarFieldEnum[] | MasterScalarFieldEnum
    having?: MasterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MasterCountAggregateInputType | true
    _avg?: MasterAvgAggregateInputType
    _sum?: MasterSumAggregateInputType
    _min?: MasterMinAggregateInputType
    _max?: MasterMaxAggregateInputType
  }

  export type MasterGroupByOutputType = {
    id: string
    nameRu: string
    nameUz: string
    nameEn: string
    isActive: boolean
    phone: string
    dob: string
    image: string
    passportImage: string
    rating: number | null
    _count: MasterCountAggregateOutputType | null
    _avg: MasterAvgAggregateOutputType | null
    _sum: MasterSumAggregateOutputType | null
    _min: MasterMinAggregateOutputType | null
    _max: MasterMaxAggregateOutputType | null
  }

  type GetMasterGroupByPayload<T extends MasterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MasterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MasterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MasterGroupByOutputType[P]>
            : GetScalarType<T[P], MasterGroupByOutputType[P]>
        }
      >
    >


  export type MasterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
    isActive?: boolean
    phone?: boolean
    dob?: boolean
    image?: boolean
    passportImage?: boolean
    rating?: boolean
    masterJobs?: boolean | Master$masterJobsArgs<ExtArgs>
    comments?: boolean | Master$commentsArgs<ExtArgs>
    _count?: boolean | MasterCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["master"]>

  export type MasterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
    isActive?: boolean
    phone?: boolean
    dob?: boolean
    image?: boolean
    passportImage?: boolean
    rating?: boolean
  }, ExtArgs["result"]["master"]>

  export type MasterSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
    isActive?: boolean
    phone?: boolean
    dob?: boolean
    image?: boolean
    passportImage?: boolean
    rating?: boolean
  }, ExtArgs["result"]["master"]>

  export type MasterSelectScalar = {
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
    isActive?: boolean
    phone?: boolean
    dob?: boolean
    image?: boolean
    passportImage?: boolean
    rating?: boolean
  }

  export type MasterOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nameRu" | "nameUz" | "nameEn" | "isActive" | "phone" | "dob" | "image" | "passportImage" | "rating", ExtArgs["result"]["master"]>
  export type MasterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    masterJobs?: boolean | Master$masterJobsArgs<ExtArgs>
    comments?: boolean | Master$commentsArgs<ExtArgs>
    _count?: boolean | MasterCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MasterIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type MasterIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MasterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Master"
    objects: {
      masterJobs: Prisma.$MasterJobsPayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nameRu: string
      nameUz: string
      nameEn: string
      isActive: boolean
      phone: string
      dob: string
      image: string
      passportImage: string
      rating: number | null
    }, ExtArgs["result"]["master"]>
    composites: {}
  }

  type MasterGetPayload<S extends boolean | null | undefined | MasterDefaultArgs> = $Result.GetResult<Prisma.$MasterPayload, S>

  type MasterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MasterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MasterCountAggregateInputType | true
    }

  export interface MasterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Master'], meta: { name: 'Master' } }
    /**
     * Find zero or one Master that matches the filter.
     * @param {MasterFindUniqueArgs} args - Arguments to find a Master
     * @example
     * // Get one Master
     * const master = await prisma.master.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MasterFindUniqueArgs>(args: SelectSubset<T, MasterFindUniqueArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Master that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MasterFindUniqueOrThrowArgs} args - Arguments to find a Master
     * @example
     * // Get one Master
     * const master = await prisma.master.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MasterFindUniqueOrThrowArgs>(args: SelectSubset<T, MasterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Master that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterFindFirstArgs} args - Arguments to find a Master
     * @example
     * // Get one Master
     * const master = await prisma.master.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MasterFindFirstArgs>(args?: SelectSubset<T, MasterFindFirstArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Master that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterFindFirstOrThrowArgs} args - Arguments to find a Master
     * @example
     * // Get one Master
     * const master = await prisma.master.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MasterFindFirstOrThrowArgs>(args?: SelectSubset<T, MasterFindFirstOrThrowArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Masters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Masters
     * const masters = await prisma.master.findMany()
     * 
     * // Get first 10 Masters
     * const masters = await prisma.master.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const masterWithIdOnly = await prisma.master.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MasterFindManyArgs>(args?: SelectSubset<T, MasterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Master.
     * @param {MasterCreateArgs} args - Arguments to create a Master.
     * @example
     * // Create one Master
     * const Master = await prisma.master.create({
     *   data: {
     *     // ... data to create a Master
     *   }
     * })
     * 
     */
    create<T extends MasterCreateArgs>(args: SelectSubset<T, MasterCreateArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Masters.
     * @param {MasterCreateManyArgs} args - Arguments to create many Masters.
     * @example
     * // Create many Masters
     * const master = await prisma.master.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MasterCreateManyArgs>(args?: SelectSubset<T, MasterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Masters and returns the data saved in the database.
     * @param {MasterCreateManyAndReturnArgs} args - Arguments to create many Masters.
     * @example
     * // Create many Masters
     * const master = await prisma.master.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Masters and only return the `id`
     * const masterWithIdOnly = await prisma.master.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MasterCreateManyAndReturnArgs>(args?: SelectSubset<T, MasterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Master.
     * @param {MasterDeleteArgs} args - Arguments to delete one Master.
     * @example
     * // Delete one Master
     * const Master = await prisma.master.delete({
     *   where: {
     *     // ... filter to delete one Master
     *   }
     * })
     * 
     */
    delete<T extends MasterDeleteArgs>(args: SelectSubset<T, MasterDeleteArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Master.
     * @param {MasterUpdateArgs} args - Arguments to update one Master.
     * @example
     * // Update one Master
     * const master = await prisma.master.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MasterUpdateArgs>(args: SelectSubset<T, MasterUpdateArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Masters.
     * @param {MasterDeleteManyArgs} args - Arguments to filter Masters to delete.
     * @example
     * // Delete a few Masters
     * const { count } = await prisma.master.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MasterDeleteManyArgs>(args?: SelectSubset<T, MasterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Masters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Masters
     * const master = await prisma.master.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MasterUpdateManyArgs>(args: SelectSubset<T, MasterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Masters and returns the data updated in the database.
     * @param {MasterUpdateManyAndReturnArgs} args - Arguments to update many Masters.
     * @example
     * // Update many Masters
     * const master = await prisma.master.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Masters and only return the `id`
     * const masterWithIdOnly = await prisma.master.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MasterUpdateManyAndReturnArgs>(args: SelectSubset<T, MasterUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Master.
     * @param {MasterUpsertArgs} args - Arguments to update or create a Master.
     * @example
     * // Update or create a Master
     * const master = await prisma.master.upsert({
     *   create: {
     *     // ... data to create a Master
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Master we want to update
     *   }
     * })
     */
    upsert<T extends MasterUpsertArgs>(args: SelectSubset<T, MasterUpsertArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Masters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterCountArgs} args - Arguments to filter Masters to count.
     * @example
     * // Count the number of Masters
     * const count = await prisma.master.count({
     *   where: {
     *     // ... the filter for the Masters we want to count
     *   }
     * })
    **/
    count<T extends MasterCountArgs>(
      args?: Subset<T, MasterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MasterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Master.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MasterAggregateArgs>(args: Subset<T, MasterAggregateArgs>): Prisma.PrismaPromise<GetMasterAggregateType<T>>

    /**
     * Group by Master.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MasterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MasterGroupByArgs['orderBy'] }
        : { orderBy?: MasterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MasterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMasterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Master model
   */
  readonly fields: MasterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Master.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MasterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    masterJobs<T extends Master$masterJobsArgs<ExtArgs> = {}>(args?: Subset<T, Master$masterJobsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterJobsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    comments<T extends Master$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Master$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Master model
   */
  interface MasterFieldRefs {
    readonly id: FieldRef<"Master", 'String'>
    readonly nameRu: FieldRef<"Master", 'String'>
    readonly nameUz: FieldRef<"Master", 'String'>
    readonly nameEn: FieldRef<"Master", 'String'>
    readonly isActive: FieldRef<"Master", 'Boolean'>
    readonly phone: FieldRef<"Master", 'String'>
    readonly dob: FieldRef<"Master", 'String'>
    readonly image: FieldRef<"Master", 'String'>
    readonly passportImage: FieldRef<"Master", 'String'>
    readonly rating: FieldRef<"Master", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Master findUnique
   */
  export type MasterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * Filter, which Master to fetch.
     */
    where: MasterWhereUniqueInput
  }

  /**
   * Master findUniqueOrThrow
   */
  export type MasterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * Filter, which Master to fetch.
     */
    where: MasterWhereUniqueInput
  }

  /**
   * Master findFirst
   */
  export type MasterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * Filter, which Master to fetch.
     */
    where?: MasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Masters to fetch.
     */
    orderBy?: MasterOrderByWithRelationInput | MasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Masters.
     */
    cursor?: MasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Masters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Masters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Masters.
     */
    distinct?: MasterScalarFieldEnum | MasterScalarFieldEnum[]
  }

  /**
   * Master findFirstOrThrow
   */
  export type MasterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * Filter, which Master to fetch.
     */
    where?: MasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Masters to fetch.
     */
    orderBy?: MasterOrderByWithRelationInput | MasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Masters.
     */
    cursor?: MasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Masters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Masters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Masters.
     */
    distinct?: MasterScalarFieldEnum | MasterScalarFieldEnum[]
  }

  /**
   * Master findMany
   */
  export type MasterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * Filter, which Masters to fetch.
     */
    where?: MasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Masters to fetch.
     */
    orderBy?: MasterOrderByWithRelationInput | MasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Masters.
     */
    cursor?: MasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Masters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Masters.
     */
    skip?: number
    distinct?: MasterScalarFieldEnum | MasterScalarFieldEnum[]
  }

  /**
   * Master create
   */
  export type MasterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * The data needed to create a Master.
     */
    data: XOR<MasterCreateInput, MasterUncheckedCreateInput>
  }

  /**
   * Master createMany
   */
  export type MasterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Masters.
     */
    data: MasterCreateManyInput | MasterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Master createManyAndReturn
   */
  export type MasterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * The data used to create many Masters.
     */
    data: MasterCreateManyInput | MasterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Master update
   */
  export type MasterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * The data needed to update a Master.
     */
    data: XOR<MasterUpdateInput, MasterUncheckedUpdateInput>
    /**
     * Choose, which Master to update.
     */
    where: MasterWhereUniqueInput
  }

  /**
   * Master updateMany
   */
  export type MasterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Masters.
     */
    data: XOR<MasterUpdateManyMutationInput, MasterUncheckedUpdateManyInput>
    /**
     * Filter which Masters to update
     */
    where?: MasterWhereInput
    /**
     * Limit how many Masters to update.
     */
    limit?: number
  }

  /**
   * Master updateManyAndReturn
   */
  export type MasterUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * The data used to update Masters.
     */
    data: XOR<MasterUpdateManyMutationInput, MasterUncheckedUpdateManyInput>
    /**
     * Filter which Masters to update
     */
    where?: MasterWhereInput
    /**
     * Limit how many Masters to update.
     */
    limit?: number
  }

  /**
   * Master upsert
   */
  export type MasterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * The filter to search for the Master to update in case it exists.
     */
    where: MasterWhereUniqueInput
    /**
     * In case the Master found by the `where` argument doesn't exist, create a new Master with this data.
     */
    create: XOR<MasterCreateInput, MasterUncheckedCreateInput>
    /**
     * In case the Master was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MasterUpdateInput, MasterUncheckedUpdateInput>
  }

  /**
   * Master delete
   */
  export type MasterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * Filter which Master to delete.
     */
    where: MasterWhereUniqueInput
  }

  /**
   * Master deleteMany
   */
  export type MasterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Masters to delete
     */
    where?: MasterWhereInput
    /**
     * Limit how many Masters to delete.
     */
    limit?: number
  }

  /**
   * Master.masterJobs
   */
  export type Master$masterJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterJobs
     */
    select?: MasterJobsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterJobs
     */
    omit?: MasterJobsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterJobsInclude<ExtArgs> | null
    where?: MasterJobsWhereInput
    orderBy?: MasterJobsOrderByWithRelationInput | MasterJobsOrderByWithRelationInput[]
    cursor?: MasterJobsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MasterJobsScalarFieldEnum | MasterJobsScalarFieldEnum[]
  }

  /**
   * Master.comments
   */
  export type Master$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Master without action
   */
  export type MasterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
  }


  /**
   * Model MasterJobs
   */

  export type AggregateMasterJobs = {
    _count: MasterJobsCountAggregateOutputType | null
    _avg: MasterJobsAvgAggregateOutputType | null
    _sum: MasterJobsSumAggregateOutputType | null
    _min: MasterJobsMinAggregateOutputType | null
    _max: MasterJobsMaxAggregateOutputType | null
  }

  export type MasterJobsAvgAggregateOutputType = {
    minWorkingHour: number | null
    workingHours: number | null
    priceHourly: number | null
    priceDaily: number | null
  }

  export type MasterJobsSumAggregateOutputType = {
    minWorkingHour: number | null
    workingHours: number | null
    priceHourly: number | null
    priceDaily: number | null
  }

  export type MasterJobsMinAggregateOutputType = {
    id: string | null
    toolID: string | null
    productID: string | null
    minWorkingHour: number | null
    workingHours: number | null
    levelID: string | null
    priceHourly: number | null
    priceDaily: number | null
    experience: string | null
    masterID: string | null
  }

  export type MasterJobsMaxAggregateOutputType = {
    id: string | null
    toolID: string | null
    productID: string | null
    minWorkingHour: number | null
    workingHours: number | null
    levelID: string | null
    priceHourly: number | null
    priceDaily: number | null
    experience: string | null
    masterID: string | null
  }

  export type MasterJobsCountAggregateOutputType = {
    id: number
    toolID: number
    productID: number
    minWorkingHour: number
    workingHours: number
    levelID: number
    priceHourly: number
    priceDaily: number
    experience: number
    masterID: number
    _all: number
  }


  export type MasterJobsAvgAggregateInputType = {
    minWorkingHour?: true
    workingHours?: true
    priceHourly?: true
    priceDaily?: true
  }

  export type MasterJobsSumAggregateInputType = {
    minWorkingHour?: true
    workingHours?: true
    priceHourly?: true
    priceDaily?: true
  }

  export type MasterJobsMinAggregateInputType = {
    id?: true
    toolID?: true
    productID?: true
    minWorkingHour?: true
    workingHours?: true
    levelID?: true
    priceHourly?: true
    priceDaily?: true
    experience?: true
    masterID?: true
  }

  export type MasterJobsMaxAggregateInputType = {
    id?: true
    toolID?: true
    productID?: true
    minWorkingHour?: true
    workingHours?: true
    levelID?: true
    priceHourly?: true
    priceDaily?: true
    experience?: true
    masterID?: true
  }

  export type MasterJobsCountAggregateInputType = {
    id?: true
    toolID?: true
    productID?: true
    minWorkingHour?: true
    workingHours?: true
    levelID?: true
    priceHourly?: true
    priceDaily?: true
    experience?: true
    masterID?: true
    _all?: true
  }

  export type MasterJobsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MasterJobs to aggregate.
     */
    where?: MasterJobsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterJobs to fetch.
     */
    orderBy?: MasterJobsOrderByWithRelationInput | MasterJobsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MasterJobsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MasterJobs
    **/
    _count?: true | MasterJobsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MasterJobsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MasterJobsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MasterJobsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MasterJobsMaxAggregateInputType
  }

  export type GetMasterJobsAggregateType<T extends MasterJobsAggregateArgs> = {
        [P in keyof T & keyof AggregateMasterJobs]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMasterJobs[P]>
      : GetScalarType<T[P], AggregateMasterJobs[P]>
  }




  export type MasterJobsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MasterJobsWhereInput
    orderBy?: MasterJobsOrderByWithAggregationInput | MasterJobsOrderByWithAggregationInput[]
    by: MasterJobsScalarFieldEnum[] | MasterJobsScalarFieldEnum
    having?: MasterJobsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MasterJobsCountAggregateInputType | true
    _avg?: MasterJobsAvgAggregateInputType
    _sum?: MasterJobsSumAggregateInputType
    _min?: MasterJobsMinAggregateInputType
    _max?: MasterJobsMaxAggregateInputType
  }

  export type MasterJobsGroupByOutputType = {
    id: string
    toolID: string
    productID: string
    minWorkingHour: number
    workingHours: number
    levelID: string
    priceHourly: number
    priceDaily: number
    experience: string
    masterID: string
    _count: MasterJobsCountAggregateOutputType | null
    _avg: MasterJobsAvgAggregateOutputType | null
    _sum: MasterJobsSumAggregateOutputType | null
    _min: MasterJobsMinAggregateOutputType | null
    _max: MasterJobsMaxAggregateOutputType | null
  }

  type GetMasterJobsGroupByPayload<T extends MasterJobsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MasterJobsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MasterJobsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MasterJobsGroupByOutputType[P]>
            : GetScalarType<T[P], MasterJobsGroupByOutputType[P]>
        }
      >
    >


  export type MasterJobsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    toolID?: boolean
    productID?: boolean
    minWorkingHour?: boolean
    workingHours?: boolean
    levelID?: boolean
    priceHourly?: boolean
    priceDaily?: boolean
    experience?: boolean
    masterID?: boolean
    tool?: boolean | ToolDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
    master?: boolean | MasterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["masterJobs"]>

  export type MasterJobsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    toolID?: boolean
    productID?: boolean
    minWorkingHour?: boolean
    workingHours?: boolean
    levelID?: boolean
    priceHourly?: boolean
    priceDaily?: boolean
    experience?: boolean
    masterID?: boolean
    tool?: boolean | ToolDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
    master?: boolean | MasterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["masterJobs"]>

  export type MasterJobsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    toolID?: boolean
    productID?: boolean
    minWorkingHour?: boolean
    workingHours?: boolean
    levelID?: boolean
    priceHourly?: boolean
    priceDaily?: boolean
    experience?: boolean
    masterID?: boolean
    tool?: boolean | ToolDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
    master?: boolean | MasterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["masterJobs"]>

  export type MasterJobsSelectScalar = {
    id?: boolean
    toolID?: boolean
    productID?: boolean
    minWorkingHour?: boolean
    workingHours?: boolean
    levelID?: boolean
    priceHourly?: boolean
    priceDaily?: boolean
    experience?: boolean
    masterID?: boolean
  }

  export type MasterJobsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "toolID" | "productID" | "minWorkingHour" | "workingHours" | "levelID" | "priceHourly" | "priceDaily" | "experience" | "masterID", ExtArgs["result"]["masterJobs"]>
  export type MasterJobsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tool?: boolean | ToolDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
    master?: boolean | MasterDefaultArgs<ExtArgs>
  }
  export type MasterJobsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tool?: boolean | ToolDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
    master?: boolean | MasterDefaultArgs<ExtArgs>
  }
  export type MasterJobsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tool?: boolean | ToolDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
    master?: boolean | MasterDefaultArgs<ExtArgs>
  }

  export type $MasterJobsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MasterJobs"
    objects: {
      tool: Prisma.$ToolPayload<ExtArgs>
      product: Prisma.$ProductPayload<ExtArgs>
      level: Prisma.$LevelPayload<ExtArgs>
      master: Prisma.$MasterPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      toolID: string
      productID: string
      minWorkingHour: number
      workingHours: number
      levelID: string
      priceHourly: number
      priceDaily: number
      experience: string
      masterID: string
    }, ExtArgs["result"]["masterJobs"]>
    composites: {}
  }

  type MasterJobsGetPayload<S extends boolean | null | undefined | MasterJobsDefaultArgs> = $Result.GetResult<Prisma.$MasterJobsPayload, S>

  type MasterJobsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MasterJobsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MasterJobsCountAggregateInputType | true
    }

  export interface MasterJobsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MasterJobs'], meta: { name: 'MasterJobs' } }
    /**
     * Find zero or one MasterJobs that matches the filter.
     * @param {MasterJobsFindUniqueArgs} args - Arguments to find a MasterJobs
     * @example
     * // Get one MasterJobs
     * const masterJobs = await prisma.masterJobs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MasterJobsFindUniqueArgs>(args: SelectSubset<T, MasterJobsFindUniqueArgs<ExtArgs>>): Prisma__MasterJobsClient<$Result.GetResult<Prisma.$MasterJobsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MasterJobs that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MasterJobsFindUniqueOrThrowArgs} args - Arguments to find a MasterJobs
     * @example
     * // Get one MasterJobs
     * const masterJobs = await prisma.masterJobs.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MasterJobsFindUniqueOrThrowArgs>(args: SelectSubset<T, MasterJobsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MasterJobsClient<$Result.GetResult<Prisma.$MasterJobsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MasterJobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterJobsFindFirstArgs} args - Arguments to find a MasterJobs
     * @example
     * // Get one MasterJobs
     * const masterJobs = await prisma.masterJobs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MasterJobsFindFirstArgs>(args?: SelectSubset<T, MasterJobsFindFirstArgs<ExtArgs>>): Prisma__MasterJobsClient<$Result.GetResult<Prisma.$MasterJobsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MasterJobs that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterJobsFindFirstOrThrowArgs} args - Arguments to find a MasterJobs
     * @example
     * // Get one MasterJobs
     * const masterJobs = await prisma.masterJobs.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MasterJobsFindFirstOrThrowArgs>(args?: SelectSubset<T, MasterJobsFindFirstOrThrowArgs<ExtArgs>>): Prisma__MasterJobsClient<$Result.GetResult<Prisma.$MasterJobsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MasterJobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterJobsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MasterJobs
     * const masterJobs = await prisma.masterJobs.findMany()
     * 
     * // Get first 10 MasterJobs
     * const masterJobs = await prisma.masterJobs.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const masterJobsWithIdOnly = await prisma.masterJobs.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MasterJobsFindManyArgs>(args?: SelectSubset<T, MasterJobsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterJobsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MasterJobs.
     * @param {MasterJobsCreateArgs} args - Arguments to create a MasterJobs.
     * @example
     * // Create one MasterJobs
     * const MasterJobs = await prisma.masterJobs.create({
     *   data: {
     *     // ... data to create a MasterJobs
     *   }
     * })
     * 
     */
    create<T extends MasterJobsCreateArgs>(args: SelectSubset<T, MasterJobsCreateArgs<ExtArgs>>): Prisma__MasterJobsClient<$Result.GetResult<Prisma.$MasterJobsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MasterJobs.
     * @param {MasterJobsCreateManyArgs} args - Arguments to create many MasterJobs.
     * @example
     * // Create many MasterJobs
     * const masterJobs = await prisma.masterJobs.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MasterJobsCreateManyArgs>(args?: SelectSubset<T, MasterJobsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MasterJobs and returns the data saved in the database.
     * @param {MasterJobsCreateManyAndReturnArgs} args - Arguments to create many MasterJobs.
     * @example
     * // Create many MasterJobs
     * const masterJobs = await prisma.masterJobs.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MasterJobs and only return the `id`
     * const masterJobsWithIdOnly = await prisma.masterJobs.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MasterJobsCreateManyAndReturnArgs>(args?: SelectSubset<T, MasterJobsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterJobsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MasterJobs.
     * @param {MasterJobsDeleteArgs} args - Arguments to delete one MasterJobs.
     * @example
     * // Delete one MasterJobs
     * const MasterJobs = await prisma.masterJobs.delete({
     *   where: {
     *     // ... filter to delete one MasterJobs
     *   }
     * })
     * 
     */
    delete<T extends MasterJobsDeleteArgs>(args: SelectSubset<T, MasterJobsDeleteArgs<ExtArgs>>): Prisma__MasterJobsClient<$Result.GetResult<Prisma.$MasterJobsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MasterJobs.
     * @param {MasterJobsUpdateArgs} args - Arguments to update one MasterJobs.
     * @example
     * // Update one MasterJobs
     * const masterJobs = await prisma.masterJobs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MasterJobsUpdateArgs>(args: SelectSubset<T, MasterJobsUpdateArgs<ExtArgs>>): Prisma__MasterJobsClient<$Result.GetResult<Prisma.$MasterJobsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MasterJobs.
     * @param {MasterJobsDeleteManyArgs} args - Arguments to filter MasterJobs to delete.
     * @example
     * // Delete a few MasterJobs
     * const { count } = await prisma.masterJobs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MasterJobsDeleteManyArgs>(args?: SelectSubset<T, MasterJobsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MasterJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterJobsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MasterJobs
     * const masterJobs = await prisma.masterJobs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MasterJobsUpdateManyArgs>(args: SelectSubset<T, MasterJobsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MasterJobs and returns the data updated in the database.
     * @param {MasterJobsUpdateManyAndReturnArgs} args - Arguments to update many MasterJobs.
     * @example
     * // Update many MasterJobs
     * const masterJobs = await prisma.masterJobs.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MasterJobs and only return the `id`
     * const masterJobsWithIdOnly = await prisma.masterJobs.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MasterJobsUpdateManyAndReturnArgs>(args: SelectSubset<T, MasterJobsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterJobsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MasterJobs.
     * @param {MasterJobsUpsertArgs} args - Arguments to update or create a MasterJobs.
     * @example
     * // Update or create a MasterJobs
     * const masterJobs = await prisma.masterJobs.upsert({
     *   create: {
     *     // ... data to create a MasterJobs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MasterJobs we want to update
     *   }
     * })
     */
    upsert<T extends MasterJobsUpsertArgs>(args: SelectSubset<T, MasterJobsUpsertArgs<ExtArgs>>): Prisma__MasterJobsClient<$Result.GetResult<Prisma.$MasterJobsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MasterJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterJobsCountArgs} args - Arguments to filter MasterJobs to count.
     * @example
     * // Count the number of MasterJobs
     * const count = await prisma.masterJobs.count({
     *   where: {
     *     // ... the filter for the MasterJobs we want to count
     *   }
     * })
    **/
    count<T extends MasterJobsCountArgs>(
      args?: Subset<T, MasterJobsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MasterJobsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MasterJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterJobsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MasterJobsAggregateArgs>(args: Subset<T, MasterJobsAggregateArgs>): Prisma.PrismaPromise<GetMasterJobsAggregateType<T>>

    /**
     * Group by MasterJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterJobsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MasterJobsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MasterJobsGroupByArgs['orderBy'] }
        : { orderBy?: MasterJobsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MasterJobsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMasterJobsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MasterJobs model
   */
  readonly fields: MasterJobsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MasterJobs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MasterJobsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tool<T extends ToolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ToolDefaultArgs<ExtArgs>>): Prisma__ToolClient<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    level<T extends LevelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LevelDefaultArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    master<T extends MasterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MasterDefaultArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MasterJobs model
   */
  interface MasterJobsFieldRefs {
    readonly id: FieldRef<"MasterJobs", 'String'>
    readonly toolID: FieldRef<"MasterJobs", 'String'>
    readonly productID: FieldRef<"MasterJobs", 'String'>
    readonly minWorkingHour: FieldRef<"MasterJobs", 'Int'>
    readonly workingHours: FieldRef<"MasterJobs", 'Int'>
    readonly levelID: FieldRef<"MasterJobs", 'String'>
    readonly priceHourly: FieldRef<"MasterJobs", 'Int'>
    readonly priceDaily: FieldRef<"MasterJobs", 'Int'>
    readonly experience: FieldRef<"MasterJobs", 'String'>
    readonly masterID: FieldRef<"MasterJobs", 'String'>
  }
    

  // Custom InputTypes
  /**
   * MasterJobs findUnique
   */
  export type MasterJobsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterJobs
     */
    select?: MasterJobsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterJobs
     */
    omit?: MasterJobsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterJobsInclude<ExtArgs> | null
    /**
     * Filter, which MasterJobs to fetch.
     */
    where: MasterJobsWhereUniqueInput
  }

  /**
   * MasterJobs findUniqueOrThrow
   */
  export type MasterJobsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterJobs
     */
    select?: MasterJobsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterJobs
     */
    omit?: MasterJobsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterJobsInclude<ExtArgs> | null
    /**
     * Filter, which MasterJobs to fetch.
     */
    where: MasterJobsWhereUniqueInput
  }

  /**
   * MasterJobs findFirst
   */
  export type MasterJobsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterJobs
     */
    select?: MasterJobsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterJobs
     */
    omit?: MasterJobsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterJobsInclude<ExtArgs> | null
    /**
     * Filter, which MasterJobs to fetch.
     */
    where?: MasterJobsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterJobs to fetch.
     */
    orderBy?: MasterJobsOrderByWithRelationInput | MasterJobsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MasterJobs.
     */
    cursor?: MasterJobsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MasterJobs.
     */
    distinct?: MasterJobsScalarFieldEnum | MasterJobsScalarFieldEnum[]
  }

  /**
   * MasterJobs findFirstOrThrow
   */
  export type MasterJobsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterJobs
     */
    select?: MasterJobsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterJobs
     */
    omit?: MasterJobsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterJobsInclude<ExtArgs> | null
    /**
     * Filter, which MasterJobs to fetch.
     */
    where?: MasterJobsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterJobs to fetch.
     */
    orderBy?: MasterJobsOrderByWithRelationInput | MasterJobsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MasterJobs.
     */
    cursor?: MasterJobsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MasterJobs.
     */
    distinct?: MasterJobsScalarFieldEnum | MasterJobsScalarFieldEnum[]
  }

  /**
   * MasterJobs findMany
   */
  export type MasterJobsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterJobs
     */
    select?: MasterJobsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterJobs
     */
    omit?: MasterJobsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterJobsInclude<ExtArgs> | null
    /**
     * Filter, which MasterJobs to fetch.
     */
    where?: MasterJobsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterJobs to fetch.
     */
    orderBy?: MasterJobsOrderByWithRelationInput | MasterJobsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MasterJobs.
     */
    cursor?: MasterJobsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterJobs.
     */
    skip?: number
    distinct?: MasterJobsScalarFieldEnum | MasterJobsScalarFieldEnum[]
  }

  /**
   * MasterJobs create
   */
  export type MasterJobsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterJobs
     */
    select?: MasterJobsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterJobs
     */
    omit?: MasterJobsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterJobsInclude<ExtArgs> | null
    /**
     * The data needed to create a MasterJobs.
     */
    data: XOR<MasterJobsCreateInput, MasterJobsUncheckedCreateInput>
  }

  /**
   * MasterJobs createMany
   */
  export type MasterJobsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MasterJobs.
     */
    data: MasterJobsCreateManyInput | MasterJobsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MasterJobs createManyAndReturn
   */
  export type MasterJobsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterJobs
     */
    select?: MasterJobsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MasterJobs
     */
    omit?: MasterJobsOmit<ExtArgs> | null
    /**
     * The data used to create many MasterJobs.
     */
    data: MasterJobsCreateManyInput | MasterJobsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterJobsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MasterJobs update
   */
  export type MasterJobsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterJobs
     */
    select?: MasterJobsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterJobs
     */
    omit?: MasterJobsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterJobsInclude<ExtArgs> | null
    /**
     * The data needed to update a MasterJobs.
     */
    data: XOR<MasterJobsUpdateInput, MasterJobsUncheckedUpdateInput>
    /**
     * Choose, which MasterJobs to update.
     */
    where: MasterJobsWhereUniqueInput
  }

  /**
   * MasterJobs updateMany
   */
  export type MasterJobsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MasterJobs.
     */
    data: XOR<MasterJobsUpdateManyMutationInput, MasterJobsUncheckedUpdateManyInput>
    /**
     * Filter which MasterJobs to update
     */
    where?: MasterJobsWhereInput
    /**
     * Limit how many MasterJobs to update.
     */
    limit?: number
  }

  /**
   * MasterJobs updateManyAndReturn
   */
  export type MasterJobsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterJobs
     */
    select?: MasterJobsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MasterJobs
     */
    omit?: MasterJobsOmit<ExtArgs> | null
    /**
     * The data used to update MasterJobs.
     */
    data: XOR<MasterJobsUpdateManyMutationInput, MasterJobsUncheckedUpdateManyInput>
    /**
     * Filter which MasterJobs to update
     */
    where?: MasterJobsWhereInput
    /**
     * Limit how many MasterJobs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterJobsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MasterJobs upsert
   */
  export type MasterJobsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterJobs
     */
    select?: MasterJobsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterJobs
     */
    omit?: MasterJobsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterJobsInclude<ExtArgs> | null
    /**
     * The filter to search for the MasterJobs to update in case it exists.
     */
    where: MasterJobsWhereUniqueInput
    /**
     * In case the MasterJobs found by the `where` argument doesn't exist, create a new MasterJobs with this data.
     */
    create: XOR<MasterJobsCreateInput, MasterJobsUncheckedCreateInput>
    /**
     * In case the MasterJobs was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MasterJobsUpdateInput, MasterJobsUncheckedUpdateInput>
  }

  /**
   * MasterJobs delete
   */
  export type MasterJobsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterJobs
     */
    select?: MasterJobsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterJobs
     */
    omit?: MasterJobsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterJobsInclude<ExtArgs> | null
    /**
     * Filter which MasterJobs to delete.
     */
    where: MasterJobsWhereUniqueInput
  }

  /**
   * MasterJobs deleteMany
   */
  export type MasterJobsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MasterJobs to delete
     */
    where?: MasterJobsWhereInput
    /**
     * Limit how many MasterJobs to delete.
     */
    limit?: number
  }

  /**
   * MasterJobs without action
   */
  export type MasterJobsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterJobs
     */
    select?: MasterJobsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterJobs
     */
    omit?: MasterJobsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterJobsInclude<ExtArgs> | null
  }


  /**
   * Model GeneralInfo
   */

  export type AggregateGeneralInfo = {
    _count: GeneralInfoCountAggregateOutputType | null
    _min: GeneralInfoMinAggregateOutputType | null
    _max: GeneralInfoMaxAggregateOutputType | null
  }

  export type GeneralInfoMinAggregateOutputType = {
    id: string | null
    email: string | null
    link: string | null
    location: string | null
    phone: string | null
  }

  export type GeneralInfoMaxAggregateOutputType = {
    id: string | null
    email: string | null
    link: string | null
    location: string | null
    phone: string | null
  }

  export type GeneralInfoCountAggregateOutputType = {
    id: number
    email: number
    link: number
    location: number
    phone: number
    _all: number
  }


  export type GeneralInfoMinAggregateInputType = {
    id?: true
    email?: true
    link?: true
    location?: true
    phone?: true
  }

  export type GeneralInfoMaxAggregateInputType = {
    id?: true
    email?: true
    link?: true
    location?: true
    phone?: true
  }

  export type GeneralInfoCountAggregateInputType = {
    id?: true
    email?: true
    link?: true
    location?: true
    phone?: true
    _all?: true
  }

  export type GeneralInfoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GeneralInfo to aggregate.
     */
    where?: GeneralInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneralInfos to fetch.
     */
    orderBy?: GeneralInfoOrderByWithRelationInput | GeneralInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GeneralInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneralInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneralInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GeneralInfos
    **/
    _count?: true | GeneralInfoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GeneralInfoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GeneralInfoMaxAggregateInputType
  }

  export type GetGeneralInfoAggregateType<T extends GeneralInfoAggregateArgs> = {
        [P in keyof T & keyof AggregateGeneralInfo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGeneralInfo[P]>
      : GetScalarType<T[P], AggregateGeneralInfo[P]>
  }




  export type GeneralInfoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GeneralInfoWhereInput
    orderBy?: GeneralInfoOrderByWithAggregationInput | GeneralInfoOrderByWithAggregationInput[]
    by: GeneralInfoScalarFieldEnum[] | GeneralInfoScalarFieldEnum
    having?: GeneralInfoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GeneralInfoCountAggregateInputType | true
    _min?: GeneralInfoMinAggregateInputType
    _max?: GeneralInfoMaxAggregateInputType
  }

  export type GeneralInfoGroupByOutputType = {
    id: string
    email: string
    link: string
    location: string
    phone: string
    _count: GeneralInfoCountAggregateOutputType | null
    _min: GeneralInfoMinAggregateOutputType | null
    _max: GeneralInfoMaxAggregateOutputType | null
  }

  type GetGeneralInfoGroupByPayload<T extends GeneralInfoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GeneralInfoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GeneralInfoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GeneralInfoGroupByOutputType[P]>
            : GetScalarType<T[P], GeneralInfoGroupByOutputType[P]>
        }
      >
    >


  export type GeneralInfoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    link?: boolean
    location?: boolean
    phone?: boolean
  }, ExtArgs["result"]["generalInfo"]>

  export type GeneralInfoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    link?: boolean
    location?: boolean
    phone?: boolean
  }, ExtArgs["result"]["generalInfo"]>

  export type GeneralInfoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    link?: boolean
    location?: boolean
    phone?: boolean
  }, ExtArgs["result"]["generalInfo"]>

  export type GeneralInfoSelectScalar = {
    id?: boolean
    email?: boolean
    link?: boolean
    location?: boolean
    phone?: boolean
  }

  export type GeneralInfoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "link" | "location" | "phone", ExtArgs["result"]["generalInfo"]>

  export type $GeneralInfoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GeneralInfo"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      link: string
      location: string
      phone: string
    }, ExtArgs["result"]["generalInfo"]>
    composites: {}
  }

  type GeneralInfoGetPayload<S extends boolean | null | undefined | GeneralInfoDefaultArgs> = $Result.GetResult<Prisma.$GeneralInfoPayload, S>

  type GeneralInfoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GeneralInfoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GeneralInfoCountAggregateInputType | true
    }

  export interface GeneralInfoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GeneralInfo'], meta: { name: 'GeneralInfo' } }
    /**
     * Find zero or one GeneralInfo that matches the filter.
     * @param {GeneralInfoFindUniqueArgs} args - Arguments to find a GeneralInfo
     * @example
     * // Get one GeneralInfo
     * const generalInfo = await prisma.generalInfo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GeneralInfoFindUniqueArgs>(args: SelectSubset<T, GeneralInfoFindUniqueArgs<ExtArgs>>): Prisma__GeneralInfoClient<$Result.GetResult<Prisma.$GeneralInfoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GeneralInfo that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GeneralInfoFindUniqueOrThrowArgs} args - Arguments to find a GeneralInfo
     * @example
     * // Get one GeneralInfo
     * const generalInfo = await prisma.generalInfo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GeneralInfoFindUniqueOrThrowArgs>(args: SelectSubset<T, GeneralInfoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GeneralInfoClient<$Result.GetResult<Prisma.$GeneralInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GeneralInfo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralInfoFindFirstArgs} args - Arguments to find a GeneralInfo
     * @example
     * // Get one GeneralInfo
     * const generalInfo = await prisma.generalInfo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GeneralInfoFindFirstArgs>(args?: SelectSubset<T, GeneralInfoFindFirstArgs<ExtArgs>>): Prisma__GeneralInfoClient<$Result.GetResult<Prisma.$GeneralInfoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GeneralInfo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralInfoFindFirstOrThrowArgs} args - Arguments to find a GeneralInfo
     * @example
     * // Get one GeneralInfo
     * const generalInfo = await prisma.generalInfo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GeneralInfoFindFirstOrThrowArgs>(args?: SelectSubset<T, GeneralInfoFindFirstOrThrowArgs<ExtArgs>>): Prisma__GeneralInfoClient<$Result.GetResult<Prisma.$GeneralInfoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GeneralInfos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralInfoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GeneralInfos
     * const generalInfos = await prisma.generalInfo.findMany()
     * 
     * // Get first 10 GeneralInfos
     * const generalInfos = await prisma.generalInfo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const generalInfoWithIdOnly = await prisma.generalInfo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GeneralInfoFindManyArgs>(args?: SelectSubset<T, GeneralInfoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeneralInfoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GeneralInfo.
     * @param {GeneralInfoCreateArgs} args - Arguments to create a GeneralInfo.
     * @example
     * // Create one GeneralInfo
     * const GeneralInfo = await prisma.generalInfo.create({
     *   data: {
     *     // ... data to create a GeneralInfo
     *   }
     * })
     * 
     */
    create<T extends GeneralInfoCreateArgs>(args: SelectSubset<T, GeneralInfoCreateArgs<ExtArgs>>): Prisma__GeneralInfoClient<$Result.GetResult<Prisma.$GeneralInfoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GeneralInfos.
     * @param {GeneralInfoCreateManyArgs} args - Arguments to create many GeneralInfos.
     * @example
     * // Create many GeneralInfos
     * const generalInfo = await prisma.generalInfo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GeneralInfoCreateManyArgs>(args?: SelectSubset<T, GeneralInfoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GeneralInfos and returns the data saved in the database.
     * @param {GeneralInfoCreateManyAndReturnArgs} args - Arguments to create many GeneralInfos.
     * @example
     * // Create many GeneralInfos
     * const generalInfo = await prisma.generalInfo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GeneralInfos and only return the `id`
     * const generalInfoWithIdOnly = await prisma.generalInfo.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GeneralInfoCreateManyAndReturnArgs>(args?: SelectSubset<T, GeneralInfoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeneralInfoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GeneralInfo.
     * @param {GeneralInfoDeleteArgs} args - Arguments to delete one GeneralInfo.
     * @example
     * // Delete one GeneralInfo
     * const GeneralInfo = await prisma.generalInfo.delete({
     *   where: {
     *     // ... filter to delete one GeneralInfo
     *   }
     * })
     * 
     */
    delete<T extends GeneralInfoDeleteArgs>(args: SelectSubset<T, GeneralInfoDeleteArgs<ExtArgs>>): Prisma__GeneralInfoClient<$Result.GetResult<Prisma.$GeneralInfoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GeneralInfo.
     * @param {GeneralInfoUpdateArgs} args - Arguments to update one GeneralInfo.
     * @example
     * // Update one GeneralInfo
     * const generalInfo = await prisma.generalInfo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GeneralInfoUpdateArgs>(args: SelectSubset<T, GeneralInfoUpdateArgs<ExtArgs>>): Prisma__GeneralInfoClient<$Result.GetResult<Prisma.$GeneralInfoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GeneralInfos.
     * @param {GeneralInfoDeleteManyArgs} args - Arguments to filter GeneralInfos to delete.
     * @example
     * // Delete a few GeneralInfos
     * const { count } = await prisma.generalInfo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GeneralInfoDeleteManyArgs>(args?: SelectSubset<T, GeneralInfoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GeneralInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralInfoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GeneralInfos
     * const generalInfo = await prisma.generalInfo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GeneralInfoUpdateManyArgs>(args: SelectSubset<T, GeneralInfoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GeneralInfos and returns the data updated in the database.
     * @param {GeneralInfoUpdateManyAndReturnArgs} args - Arguments to update many GeneralInfos.
     * @example
     * // Update many GeneralInfos
     * const generalInfo = await prisma.generalInfo.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GeneralInfos and only return the `id`
     * const generalInfoWithIdOnly = await prisma.generalInfo.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GeneralInfoUpdateManyAndReturnArgs>(args: SelectSubset<T, GeneralInfoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeneralInfoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GeneralInfo.
     * @param {GeneralInfoUpsertArgs} args - Arguments to update or create a GeneralInfo.
     * @example
     * // Update or create a GeneralInfo
     * const generalInfo = await prisma.generalInfo.upsert({
     *   create: {
     *     // ... data to create a GeneralInfo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GeneralInfo we want to update
     *   }
     * })
     */
    upsert<T extends GeneralInfoUpsertArgs>(args: SelectSubset<T, GeneralInfoUpsertArgs<ExtArgs>>): Prisma__GeneralInfoClient<$Result.GetResult<Prisma.$GeneralInfoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GeneralInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralInfoCountArgs} args - Arguments to filter GeneralInfos to count.
     * @example
     * // Count the number of GeneralInfos
     * const count = await prisma.generalInfo.count({
     *   where: {
     *     // ... the filter for the GeneralInfos we want to count
     *   }
     * })
    **/
    count<T extends GeneralInfoCountArgs>(
      args?: Subset<T, GeneralInfoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GeneralInfoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GeneralInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GeneralInfoAggregateArgs>(args: Subset<T, GeneralInfoAggregateArgs>): Prisma.PrismaPromise<GetGeneralInfoAggregateType<T>>

    /**
     * Group by GeneralInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralInfoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GeneralInfoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GeneralInfoGroupByArgs['orderBy'] }
        : { orderBy?: GeneralInfoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GeneralInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGeneralInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GeneralInfo model
   */
  readonly fields: GeneralInfoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GeneralInfo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GeneralInfoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GeneralInfo model
   */
  interface GeneralInfoFieldRefs {
    readonly id: FieldRef<"GeneralInfo", 'String'>
    readonly email: FieldRef<"GeneralInfo", 'String'>
    readonly link: FieldRef<"GeneralInfo", 'String'>
    readonly location: FieldRef<"GeneralInfo", 'String'>
    readonly phone: FieldRef<"GeneralInfo", 'String'>
  }
    

  // Custom InputTypes
  /**
   * GeneralInfo findUnique
   */
  export type GeneralInfoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralInfo
     */
    select?: GeneralInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneralInfo
     */
    omit?: GeneralInfoOmit<ExtArgs> | null
    /**
     * Filter, which GeneralInfo to fetch.
     */
    where: GeneralInfoWhereUniqueInput
  }

  /**
   * GeneralInfo findUniqueOrThrow
   */
  export type GeneralInfoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralInfo
     */
    select?: GeneralInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneralInfo
     */
    omit?: GeneralInfoOmit<ExtArgs> | null
    /**
     * Filter, which GeneralInfo to fetch.
     */
    where: GeneralInfoWhereUniqueInput
  }

  /**
   * GeneralInfo findFirst
   */
  export type GeneralInfoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralInfo
     */
    select?: GeneralInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneralInfo
     */
    omit?: GeneralInfoOmit<ExtArgs> | null
    /**
     * Filter, which GeneralInfo to fetch.
     */
    where?: GeneralInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneralInfos to fetch.
     */
    orderBy?: GeneralInfoOrderByWithRelationInput | GeneralInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GeneralInfos.
     */
    cursor?: GeneralInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneralInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneralInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GeneralInfos.
     */
    distinct?: GeneralInfoScalarFieldEnum | GeneralInfoScalarFieldEnum[]
  }

  /**
   * GeneralInfo findFirstOrThrow
   */
  export type GeneralInfoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralInfo
     */
    select?: GeneralInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneralInfo
     */
    omit?: GeneralInfoOmit<ExtArgs> | null
    /**
     * Filter, which GeneralInfo to fetch.
     */
    where?: GeneralInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneralInfos to fetch.
     */
    orderBy?: GeneralInfoOrderByWithRelationInput | GeneralInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GeneralInfos.
     */
    cursor?: GeneralInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneralInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneralInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GeneralInfos.
     */
    distinct?: GeneralInfoScalarFieldEnum | GeneralInfoScalarFieldEnum[]
  }

  /**
   * GeneralInfo findMany
   */
  export type GeneralInfoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralInfo
     */
    select?: GeneralInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneralInfo
     */
    omit?: GeneralInfoOmit<ExtArgs> | null
    /**
     * Filter, which GeneralInfos to fetch.
     */
    where?: GeneralInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneralInfos to fetch.
     */
    orderBy?: GeneralInfoOrderByWithRelationInput | GeneralInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GeneralInfos.
     */
    cursor?: GeneralInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneralInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneralInfos.
     */
    skip?: number
    distinct?: GeneralInfoScalarFieldEnum | GeneralInfoScalarFieldEnum[]
  }

  /**
   * GeneralInfo create
   */
  export type GeneralInfoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralInfo
     */
    select?: GeneralInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneralInfo
     */
    omit?: GeneralInfoOmit<ExtArgs> | null
    /**
     * The data needed to create a GeneralInfo.
     */
    data: XOR<GeneralInfoCreateInput, GeneralInfoUncheckedCreateInput>
  }

  /**
   * GeneralInfo createMany
   */
  export type GeneralInfoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GeneralInfos.
     */
    data: GeneralInfoCreateManyInput | GeneralInfoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GeneralInfo createManyAndReturn
   */
  export type GeneralInfoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralInfo
     */
    select?: GeneralInfoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GeneralInfo
     */
    omit?: GeneralInfoOmit<ExtArgs> | null
    /**
     * The data used to create many GeneralInfos.
     */
    data: GeneralInfoCreateManyInput | GeneralInfoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GeneralInfo update
   */
  export type GeneralInfoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralInfo
     */
    select?: GeneralInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneralInfo
     */
    omit?: GeneralInfoOmit<ExtArgs> | null
    /**
     * The data needed to update a GeneralInfo.
     */
    data: XOR<GeneralInfoUpdateInput, GeneralInfoUncheckedUpdateInput>
    /**
     * Choose, which GeneralInfo to update.
     */
    where: GeneralInfoWhereUniqueInput
  }

  /**
   * GeneralInfo updateMany
   */
  export type GeneralInfoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GeneralInfos.
     */
    data: XOR<GeneralInfoUpdateManyMutationInput, GeneralInfoUncheckedUpdateManyInput>
    /**
     * Filter which GeneralInfos to update
     */
    where?: GeneralInfoWhereInput
    /**
     * Limit how many GeneralInfos to update.
     */
    limit?: number
  }

  /**
   * GeneralInfo updateManyAndReturn
   */
  export type GeneralInfoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralInfo
     */
    select?: GeneralInfoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GeneralInfo
     */
    omit?: GeneralInfoOmit<ExtArgs> | null
    /**
     * The data used to update GeneralInfos.
     */
    data: XOR<GeneralInfoUpdateManyMutationInput, GeneralInfoUncheckedUpdateManyInput>
    /**
     * Filter which GeneralInfos to update
     */
    where?: GeneralInfoWhereInput
    /**
     * Limit how many GeneralInfos to update.
     */
    limit?: number
  }

  /**
   * GeneralInfo upsert
   */
  export type GeneralInfoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralInfo
     */
    select?: GeneralInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneralInfo
     */
    omit?: GeneralInfoOmit<ExtArgs> | null
    /**
     * The filter to search for the GeneralInfo to update in case it exists.
     */
    where: GeneralInfoWhereUniqueInput
    /**
     * In case the GeneralInfo found by the `where` argument doesn't exist, create a new GeneralInfo with this data.
     */
    create: XOR<GeneralInfoCreateInput, GeneralInfoUncheckedCreateInput>
    /**
     * In case the GeneralInfo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GeneralInfoUpdateInput, GeneralInfoUncheckedUpdateInput>
  }

  /**
   * GeneralInfo delete
   */
  export type GeneralInfoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralInfo
     */
    select?: GeneralInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneralInfo
     */
    omit?: GeneralInfoOmit<ExtArgs> | null
    /**
     * Filter which GeneralInfo to delete.
     */
    where: GeneralInfoWhereUniqueInput
  }

  /**
   * GeneralInfo deleteMany
   */
  export type GeneralInfoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GeneralInfos to delete
     */
    where?: GeneralInfoWhereInput
    /**
     * Limit how many GeneralInfos to delete.
     */
    limit?: number
  }

  /**
   * GeneralInfo without action
   */
  export type GeneralInfoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralInfo
     */
    select?: GeneralInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneralInfo
     */
    omit?: GeneralInfoOmit<ExtArgs> | null
  }


  /**
   * Model ShowCase
   */

  export type AggregateShowCase = {
    _count: ShowCaseCountAggregateOutputType | null
    _min: ShowCaseMinAggregateOutputType | null
    _max: ShowCaseMaxAggregateOutputType | null
  }

  export type ShowCaseMinAggregateOutputType = {
    id: string | null
    nameRu: string | null
    nameUz: string | null
    nameEn: string | null
    descriptionRu: string | null
    descriptionUz: string | null
    descriptionEn: string | null
    image: string | null
    link: string | null
    type: $Enums.ShowCaseType | null
    isActive: boolean | null
    startDate: Date | null
    endDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ShowCaseMaxAggregateOutputType = {
    id: string | null
    nameRu: string | null
    nameUz: string | null
    nameEn: string | null
    descriptionRu: string | null
    descriptionUz: string | null
    descriptionEn: string | null
    image: string | null
    link: string | null
    type: $Enums.ShowCaseType | null
    isActive: boolean | null
    startDate: Date | null
    endDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ShowCaseCountAggregateOutputType = {
    id: number
    nameRu: number
    nameUz: number
    nameEn: number
    descriptionRu: number
    descriptionUz: number
    descriptionEn: number
    image: number
    link: number
    type: number
    isActive: number
    startDate: number
    endDate: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ShowCaseMinAggregateInputType = {
    id?: true
    nameRu?: true
    nameUz?: true
    nameEn?: true
    descriptionRu?: true
    descriptionUz?: true
    descriptionEn?: true
    image?: true
    link?: true
    type?: true
    isActive?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ShowCaseMaxAggregateInputType = {
    id?: true
    nameRu?: true
    nameUz?: true
    nameEn?: true
    descriptionRu?: true
    descriptionUz?: true
    descriptionEn?: true
    image?: true
    link?: true
    type?: true
    isActive?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ShowCaseCountAggregateInputType = {
    id?: true
    nameRu?: true
    nameUz?: true
    nameEn?: true
    descriptionRu?: true
    descriptionUz?: true
    descriptionEn?: true
    image?: true
    link?: true
    type?: true
    isActive?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ShowCaseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShowCase to aggregate.
     */
    where?: ShowCaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShowCases to fetch.
     */
    orderBy?: ShowCaseOrderByWithRelationInput | ShowCaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShowCaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShowCases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShowCases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ShowCases
    **/
    _count?: true | ShowCaseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShowCaseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShowCaseMaxAggregateInputType
  }

  export type GetShowCaseAggregateType<T extends ShowCaseAggregateArgs> = {
        [P in keyof T & keyof AggregateShowCase]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShowCase[P]>
      : GetScalarType<T[P], AggregateShowCase[P]>
  }




  export type ShowCaseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShowCaseWhereInput
    orderBy?: ShowCaseOrderByWithAggregationInput | ShowCaseOrderByWithAggregationInput[]
    by: ShowCaseScalarFieldEnum[] | ShowCaseScalarFieldEnum
    having?: ShowCaseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShowCaseCountAggregateInputType | true
    _min?: ShowCaseMinAggregateInputType
    _max?: ShowCaseMaxAggregateInputType
  }

  export type ShowCaseGroupByOutputType = {
    id: string
    nameRu: string
    nameUz: string
    nameEn: string
    descriptionRu: string
    descriptionUz: string
    descriptionEn: string
    image: string
    link: string
    type: $Enums.ShowCaseType
    isActive: boolean
    startDate: Date
    endDate: Date
    createdAt: Date
    updatedAt: Date
    _count: ShowCaseCountAggregateOutputType | null
    _min: ShowCaseMinAggregateOutputType | null
    _max: ShowCaseMaxAggregateOutputType | null
  }

  type GetShowCaseGroupByPayload<T extends ShowCaseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShowCaseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShowCaseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShowCaseGroupByOutputType[P]>
            : GetScalarType<T[P], ShowCaseGroupByOutputType[P]>
        }
      >
    >


  export type ShowCaseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
    descriptionRu?: boolean
    descriptionUz?: boolean
    descriptionEn?: boolean
    image?: boolean
    link?: boolean
    type?: boolean
    isActive?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["showCase"]>

  export type ShowCaseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
    descriptionRu?: boolean
    descriptionUz?: boolean
    descriptionEn?: boolean
    image?: boolean
    link?: boolean
    type?: boolean
    isActive?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["showCase"]>

  export type ShowCaseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
    descriptionRu?: boolean
    descriptionUz?: boolean
    descriptionEn?: boolean
    image?: boolean
    link?: boolean
    type?: boolean
    isActive?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["showCase"]>

  export type ShowCaseSelectScalar = {
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
    descriptionRu?: boolean
    descriptionUz?: boolean
    descriptionEn?: boolean
    image?: boolean
    link?: boolean
    type?: boolean
    isActive?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ShowCaseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nameRu" | "nameUz" | "nameEn" | "descriptionRu" | "descriptionUz" | "descriptionEn" | "image" | "link" | "type" | "isActive" | "startDate" | "endDate" | "createdAt" | "updatedAt", ExtArgs["result"]["showCase"]>

  export type $ShowCasePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ShowCase"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nameRu: string
      nameUz: string
      nameEn: string
      descriptionRu: string
      descriptionUz: string
      descriptionEn: string
      image: string
      link: string
      type: $Enums.ShowCaseType
      isActive: boolean
      startDate: Date
      endDate: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["showCase"]>
    composites: {}
  }

  type ShowCaseGetPayload<S extends boolean | null | undefined | ShowCaseDefaultArgs> = $Result.GetResult<Prisma.$ShowCasePayload, S>

  type ShowCaseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ShowCaseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ShowCaseCountAggregateInputType | true
    }

  export interface ShowCaseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ShowCase'], meta: { name: 'ShowCase' } }
    /**
     * Find zero or one ShowCase that matches the filter.
     * @param {ShowCaseFindUniqueArgs} args - Arguments to find a ShowCase
     * @example
     * // Get one ShowCase
     * const showCase = await prisma.showCase.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShowCaseFindUniqueArgs>(args: SelectSubset<T, ShowCaseFindUniqueArgs<ExtArgs>>): Prisma__ShowCaseClient<$Result.GetResult<Prisma.$ShowCasePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ShowCase that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ShowCaseFindUniqueOrThrowArgs} args - Arguments to find a ShowCase
     * @example
     * // Get one ShowCase
     * const showCase = await prisma.showCase.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShowCaseFindUniqueOrThrowArgs>(args: SelectSubset<T, ShowCaseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShowCaseClient<$Result.GetResult<Prisma.$ShowCasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ShowCase that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShowCaseFindFirstArgs} args - Arguments to find a ShowCase
     * @example
     * // Get one ShowCase
     * const showCase = await prisma.showCase.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShowCaseFindFirstArgs>(args?: SelectSubset<T, ShowCaseFindFirstArgs<ExtArgs>>): Prisma__ShowCaseClient<$Result.GetResult<Prisma.$ShowCasePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ShowCase that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShowCaseFindFirstOrThrowArgs} args - Arguments to find a ShowCase
     * @example
     * // Get one ShowCase
     * const showCase = await prisma.showCase.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShowCaseFindFirstOrThrowArgs>(args?: SelectSubset<T, ShowCaseFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShowCaseClient<$Result.GetResult<Prisma.$ShowCasePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ShowCases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShowCaseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShowCases
     * const showCases = await prisma.showCase.findMany()
     * 
     * // Get first 10 ShowCases
     * const showCases = await prisma.showCase.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const showCaseWithIdOnly = await prisma.showCase.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShowCaseFindManyArgs>(args?: SelectSubset<T, ShowCaseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShowCasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ShowCase.
     * @param {ShowCaseCreateArgs} args - Arguments to create a ShowCase.
     * @example
     * // Create one ShowCase
     * const ShowCase = await prisma.showCase.create({
     *   data: {
     *     // ... data to create a ShowCase
     *   }
     * })
     * 
     */
    create<T extends ShowCaseCreateArgs>(args: SelectSubset<T, ShowCaseCreateArgs<ExtArgs>>): Prisma__ShowCaseClient<$Result.GetResult<Prisma.$ShowCasePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ShowCases.
     * @param {ShowCaseCreateManyArgs} args - Arguments to create many ShowCases.
     * @example
     * // Create many ShowCases
     * const showCase = await prisma.showCase.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShowCaseCreateManyArgs>(args?: SelectSubset<T, ShowCaseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ShowCases and returns the data saved in the database.
     * @param {ShowCaseCreateManyAndReturnArgs} args - Arguments to create many ShowCases.
     * @example
     * // Create many ShowCases
     * const showCase = await prisma.showCase.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ShowCases and only return the `id`
     * const showCaseWithIdOnly = await prisma.showCase.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ShowCaseCreateManyAndReturnArgs>(args?: SelectSubset<T, ShowCaseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShowCasePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ShowCase.
     * @param {ShowCaseDeleteArgs} args - Arguments to delete one ShowCase.
     * @example
     * // Delete one ShowCase
     * const ShowCase = await prisma.showCase.delete({
     *   where: {
     *     // ... filter to delete one ShowCase
     *   }
     * })
     * 
     */
    delete<T extends ShowCaseDeleteArgs>(args: SelectSubset<T, ShowCaseDeleteArgs<ExtArgs>>): Prisma__ShowCaseClient<$Result.GetResult<Prisma.$ShowCasePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ShowCase.
     * @param {ShowCaseUpdateArgs} args - Arguments to update one ShowCase.
     * @example
     * // Update one ShowCase
     * const showCase = await prisma.showCase.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShowCaseUpdateArgs>(args: SelectSubset<T, ShowCaseUpdateArgs<ExtArgs>>): Prisma__ShowCaseClient<$Result.GetResult<Prisma.$ShowCasePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ShowCases.
     * @param {ShowCaseDeleteManyArgs} args - Arguments to filter ShowCases to delete.
     * @example
     * // Delete a few ShowCases
     * const { count } = await prisma.showCase.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShowCaseDeleteManyArgs>(args?: SelectSubset<T, ShowCaseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShowCases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShowCaseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShowCases
     * const showCase = await prisma.showCase.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShowCaseUpdateManyArgs>(args: SelectSubset<T, ShowCaseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShowCases and returns the data updated in the database.
     * @param {ShowCaseUpdateManyAndReturnArgs} args - Arguments to update many ShowCases.
     * @example
     * // Update many ShowCases
     * const showCase = await prisma.showCase.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ShowCases and only return the `id`
     * const showCaseWithIdOnly = await prisma.showCase.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ShowCaseUpdateManyAndReturnArgs>(args: SelectSubset<T, ShowCaseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShowCasePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ShowCase.
     * @param {ShowCaseUpsertArgs} args - Arguments to update or create a ShowCase.
     * @example
     * // Update or create a ShowCase
     * const showCase = await prisma.showCase.upsert({
     *   create: {
     *     // ... data to create a ShowCase
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShowCase we want to update
     *   }
     * })
     */
    upsert<T extends ShowCaseUpsertArgs>(args: SelectSubset<T, ShowCaseUpsertArgs<ExtArgs>>): Prisma__ShowCaseClient<$Result.GetResult<Prisma.$ShowCasePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ShowCases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShowCaseCountArgs} args - Arguments to filter ShowCases to count.
     * @example
     * // Count the number of ShowCases
     * const count = await prisma.showCase.count({
     *   where: {
     *     // ... the filter for the ShowCases we want to count
     *   }
     * })
    **/
    count<T extends ShowCaseCountArgs>(
      args?: Subset<T, ShowCaseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShowCaseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShowCase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShowCaseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShowCaseAggregateArgs>(args: Subset<T, ShowCaseAggregateArgs>): Prisma.PrismaPromise<GetShowCaseAggregateType<T>>

    /**
     * Group by ShowCase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShowCaseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShowCaseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShowCaseGroupByArgs['orderBy'] }
        : { orderBy?: ShowCaseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShowCaseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShowCaseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ShowCase model
   */
  readonly fields: ShowCaseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ShowCase.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShowCaseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ShowCase model
   */
  interface ShowCaseFieldRefs {
    readonly id: FieldRef<"ShowCase", 'String'>
    readonly nameRu: FieldRef<"ShowCase", 'String'>
    readonly nameUz: FieldRef<"ShowCase", 'String'>
    readonly nameEn: FieldRef<"ShowCase", 'String'>
    readonly descriptionRu: FieldRef<"ShowCase", 'String'>
    readonly descriptionUz: FieldRef<"ShowCase", 'String'>
    readonly descriptionEn: FieldRef<"ShowCase", 'String'>
    readonly image: FieldRef<"ShowCase", 'String'>
    readonly link: FieldRef<"ShowCase", 'String'>
    readonly type: FieldRef<"ShowCase", 'ShowCaseType'>
    readonly isActive: FieldRef<"ShowCase", 'Boolean'>
    readonly startDate: FieldRef<"ShowCase", 'DateTime'>
    readonly endDate: FieldRef<"ShowCase", 'DateTime'>
    readonly createdAt: FieldRef<"ShowCase", 'DateTime'>
    readonly updatedAt: FieldRef<"ShowCase", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ShowCase findUnique
   */
  export type ShowCaseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShowCase
     */
    select?: ShowCaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShowCase
     */
    omit?: ShowCaseOmit<ExtArgs> | null
    /**
     * Filter, which ShowCase to fetch.
     */
    where: ShowCaseWhereUniqueInput
  }

  /**
   * ShowCase findUniqueOrThrow
   */
  export type ShowCaseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShowCase
     */
    select?: ShowCaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShowCase
     */
    omit?: ShowCaseOmit<ExtArgs> | null
    /**
     * Filter, which ShowCase to fetch.
     */
    where: ShowCaseWhereUniqueInput
  }

  /**
   * ShowCase findFirst
   */
  export type ShowCaseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShowCase
     */
    select?: ShowCaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShowCase
     */
    omit?: ShowCaseOmit<ExtArgs> | null
    /**
     * Filter, which ShowCase to fetch.
     */
    where?: ShowCaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShowCases to fetch.
     */
    orderBy?: ShowCaseOrderByWithRelationInput | ShowCaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShowCases.
     */
    cursor?: ShowCaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShowCases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShowCases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShowCases.
     */
    distinct?: ShowCaseScalarFieldEnum | ShowCaseScalarFieldEnum[]
  }

  /**
   * ShowCase findFirstOrThrow
   */
  export type ShowCaseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShowCase
     */
    select?: ShowCaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShowCase
     */
    omit?: ShowCaseOmit<ExtArgs> | null
    /**
     * Filter, which ShowCase to fetch.
     */
    where?: ShowCaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShowCases to fetch.
     */
    orderBy?: ShowCaseOrderByWithRelationInput | ShowCaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShowCases.
     */
    cursor?: ShowCaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShowCases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShowCases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShowCases.
     */
    distinct?: ShowCaseScalarFieldEnum | ShowCaseScalarFieldEnum[]
  }

  /**
   * ShowCase findMany
   */
  export type ShowCaseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShowCase
     */
    select?: ShowCaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShowCase
     */
    omit?: ShowCaseOmit<ExtArgs> | null
    /**
     * Filter, which ShowCases to fetch.
     */
    where?: ShowCaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShowCases to fetch.
     */
    orderBy?: ShowCaseOrderByWithRelationInput | ShowCaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ShowCases.
     */
    cursor?: ShowCaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShowCases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShowCases.
     */
    skip?: number
    distinct?: ShowCaseScalarFieldEnum | ShowCaseScalarFieldEnum[]
  }

  /**
   * ShowCase create
   */
  export type ShowCaseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShowCase
     */
    select?: ShowCaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShowCase
     */
    omit?: ShowCaseOmit<ExtArgs> | null
    /**
     * The data needed to create a ShowCase.
     */
    data: XOR<ShowCaseCreateInput, ShowCaseUncheckedCreateInput>
  }

  /**
   * ShowCase createMany
   */
  export type ShowCaseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ShowCases.
     */
    data: ShowCaseCreateManyInput | ShowCaseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ShowCase createManyAndReturn
   */
  export type ShowCaseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShowCase
     */
    select?: ShowCaseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ShowCase
     */
    omit?: ShowCaseOmit<ExtArgs> | null
    /**
     * The data used to create many ShowCases.
     */
    data: ShowCaseCreateManyInput | ShowCaseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ShowCase update
   */
  export type ShowCaseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShowCase
     */
    select?: ShowCaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShowCase
     */
    omit?: ShowCaseOmit<ExtArgs> | null
    /**
     * The data needed to update a ShowCase.
     */
    data: XOR<ShowCaseUpdateInput, ShowCaseUncheckedUpdateInput>
    /**
     * Choose, which ShowCase to update.
     */
    where: ShowCaseWhereUniqueInput
  }

  /**
   * ShowCase updateMany
   */
  export type ShowCaseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ShowCases.
     */
    data: XOR<ShowCaseUpdateManyMutationInput, ShowCaseUncheckedUpdateManyInput>
    /**
     * Filter which ShowCases to update
     */
    where?: ShowCaseWhereInput
    /**
     * Limit how many ShowCases to update.
     */
    limit?: number
  }

  /**
   * ShowCase updateManyAndReturn
   */
  export type ShowCaseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShowCase
     */
    select?: ShowCaseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ShowCase
     */
    omit?: ShowCaseOmit<ExtArgs> | null
    /**
     * The data used to update ShowCases.
     */
    data: XOR<ShowCaseUpdateManyMutationInput, ShowCaseUncheckedUpdateManyInput>
    /**
     * Filter which ShowCases to update
     */
    where?: ShowCaseWhereInput
    /**
     * Limit how many ShowCases to update.
     */
    limit?: number
  }

  /**
   * ShowCase upsert
   */
  export type ShowCaseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShowCase
     */
    select?: ShowCaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShowCase
     */
    omit?: ShowCaseOmit<ExtArgs> | null
    /**
     * The filter to search for the ShowCase to update in case it exists.
     */
    where: ShowCaseWhereUniqueInput
    /**
     * In case the ShowCase found by the `where` argument doesn't exist, create a new ShowCase with this data.
     */
    create: XOR<ShowCaseCreateInput, ShowCaseUncheckedCreateInput>
    /**
     * In case the ShowCase was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShowCaseUpdateInput, ShowCaseUncheckedUpdateInput>
  }

  /**
   * ShowCase delete
   */
  export type ShowCaseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShowCase
     */
    select?: ShowCaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShowCase
     */
    omit?: ShowCaseOmit<ExtArgs> | null
    /**
     * Filter which ShowCase to delete.
     */
    where: ShowCaseWhereUniqueInput
  }

  /**
   * ShowCase deleteMany
   */
  export type ShowCaseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShowCases to delete
     */
    where?: ShowCaseWhereInput
    /**
     * Limit how many ShowCases to delete.
     */
    limit?: number
  }

  /**
   * ShowCase without action
   */
  export type ShowCaseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShowCase
     */
    select?: ShowCaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShowCase
     */
    omit?: ShowCaseOmit<ExtArgs> | null
  }


  /**
   * Model FAQ
   */

  export type AggregateFAQ = {
    _count: FAQCountAggregateOutputType | null
    _min: FAQMinAggregateOutputType | null
    _max: FAQMaxAggregateOutputType | null
  }

  export type FAQMinAggregateOutputType = {
    id: string | null
    questionUz: string | null
    questionRu: string | null
    questionEn: string | null
    answerUz: string | null
    answerRu: string | null
    answerEn: string | null
  }

  export type FAQMaxAggregateOutputType = {
    id: string | null
    questionUz: string | null
    questionRu: string | null
    questionEn: string | null
    answerUz: string | null
    answerRu: string | null
    answerEn: string | null
  }

  export type FAQCountAggregateOutputType = {
    id: number
    questionUz: number
    questionRu: number
    questionEn: number
    answerUz: number
    answerRu: number
    answerEn: number
    _all: number
  }


  export type FAQMinAggregateInputType = {
    id?: true
    questionUz?: true
    questionRu?: true
    questionEn?: true
    answerUz?: true
    answerRu?: true
    answerEn?: true
  }

  export type FAQMaxAggregateInputType = {
    id?: true
    questionUz?: true
    questionRu?: true
    questionEn?: true
    answerUz?: true
    answerRu?: true
    answerEn?: true
  }

  export type FAQCountAggregateInputType = {
    id?: true
    questionUz?: true
    questionRu?: true
    questionEn?: true
    answerUz?: true
    answerRu?: true
    answerEn?: true
    _all?: true
  }

  export type FAQAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FAQ to aggregate.
     */
    where?: FAQWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FAQS to fetch.
     */
    orderBy?: FAQOrderByWithRelationInput | FAQOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FAQWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FAQS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FAQS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FAQS
    **/
    _count?: true | FAQCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FAQMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FAQMaxAggregateInputType
  }

  export type GetFAQAggregateType<T extends FAQAggregateArgs> = {
        [P in keyof T & keyof AggregateFAQ]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFAQ[P]>
      : GetScalarType<T[P], AggregateFAQ[P]>
  }




  export type FAQGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FAQWhereInput
    orderBy?: FAQOrderByWithAggregationInput | FAQOrderByWithAggregationInput[]
    by: FAQScalarFieldEnum[] | FAQScalarFieldEnum
    having?: FAQScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FAQCountAggregateInputType | true
    _min?: FAQMinAggregateInputType
    _max?: FAQMaxAggregateInputType
  }

  export type FAQGroupByOutputType = {
    id: string
    questionUz: string
    questionRu: string
    questionEn: string
    answerUz: string
    answerRu: string
    answerEn: string
    _count: FAQCountAggregateOutputType | null
    _min: FAQMinAggregateOutputType | null
    _max: FAQMaxAggregateOutputType | null
  }

  type GetFAQGroupByPayload<T extends FAQGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FAQGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FAQGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FAQGroupByOutputType[P]>
            : GetScalarType<T[P], FAQGroupByOutputType[P]>
        }
      >
    >


  export type FAQSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    questionUz?: boolean
    questionRu?: boolean
    questionEn?: boolean
    answerUz?: boolean
    answerRu?: boolean
    answerEn?: boolean
  }, ExtArgs["result"]["fAQ"]>

  export type FAQSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    questionUz?: boolean
    questionRu?: boolean
    questionEn?: boolean
    answerUz?: boolean
    answerRu?: boolean
    answerEn?: boolean
  }, ExtArgs["result"]["fAQ"]>

  export type FAQSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    questionUz?: boolean
    questionRu?: boolean
    questionEn?: boolean
    answerUz?: boolean
    answerRu?: boolean
    answerEn?: boolean
  }, ExtArgs["result"]["fAQ"]>

  export type FAQSelectScalar = {
    id?: boolean
    questionUz?: boolean
    questionRu?: boolean
    questionEn?: boolean
    answerUz?: boolean
    answerRu?: boolean
    answerEn?: boolean
  }

  export type FAQOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "questionUz" | "questionRu" | "questionEn" | "answerUz" | "answerRu" | "answerEn", ExtArgs["result"]["fAQ"]>

  export type $FAQPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FAQ"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      questionUz: string
      questionRu: string
      questionEn: string
      answerUz: string
      answerRu: string
      answerEn: string
    }, ExtArgs["result"]["fAQ"]>
    composites: {}
  }

  type FAQGetPayload<S extends boolean | null | undefined | FAQDefaultArgs> = $Result.GetResult<Prisma.$FAQPayload, S>

  type FAQCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FAQFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FAQCountAggregateInputType | true
    }

  export interface FAQDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FAQ'], meta: { name: 'FAQ' } }
    /**
     * Find zero or one FAQ that matches the filter.
     * @param {FAQFindUniqueArgs} args - Arguments to find a FAQ
     * @example
     * // Get one FAQ
     * const fAQ = await prisma.fAQ.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FAQFindUniqueArgs>(args: SelectSubset<T, FAQFindUniqueArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FAQ that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FAQFindUniqueOrThrowArgs} args - Arguments to find a FAQ
     * @example
     * // Get one FAQ
     * const fAQ = await prisma.fAQ.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FAQFindUniqueOrThrowArgs>(args: SelectSubset<T, FAQFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FAQ that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQFindFirstArgs} args - Arguments to find a FAQ
     * @example
     * // Get one FAQ
     * const fAQ = await prisma.fAQ.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FAQFindFirstArgs>(args?: SelectSubset<T, FAQFindFirstArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FAQ that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQFindFirstOrThrowArgs} args - Arguments to find a FAQ
     * @example
     * // Get one FAQ
     * const fAQ = await prisma.fAQ.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FAQFindFirstOrThrowArgs>(args?: SelectSubset<T, FAQFindFirstOrThrowArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FAQS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FAQS
     * const fAQS = await prisma.fAQ.findMany()
     * 
     * // Get first 10 FAQS
     * const fAQS = await prisma.fAQ.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fAQWithIdOnly = await prisma.fAQ.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FAQFindManyArgs>(args?: SelectSubset<T, FAQFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FAQ.
     * @param {FAQCreateArgs} args - Arguments to create a FAQ.
     * @example
     * // Create one FAQ
     * const FAQ = await prisma.fAQ.create({
     *   data: {
     *     // ... data to create a FAQ
     *   }
     * })
     * 
     */
    create<T extends FAQCreateArgs>(args: SelectSubset<T, FAQCreateArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FAQS.
     * @param {FAQCreateManyArgs} args - Arguments to create many FAQS.
     * @example
     * // Create many FAQS
     * const fAQ = await prisma.fAQ.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FAQCreateManyArgs>(args?: SelectSubset<T, FAQCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FAQS and returns the data saved in the database.
     * @param {FAQCreateManyAndReturnArgs} args - Arguments to create many FAQS.
     * @example
     * // Create many FAQS
     * const fAQ = await prisma.fAQ.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FAQS and only return the `id`
     * const fAQWithIdOnly = await prisma.fAQ.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FAQCreateManyAndReturnArgs>(args?: SelectSubset<T, FAQCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FAQ.
     * @param {FAQDeleteArgs} args - Arguments to delete one FAQ.
     * @example
     * // Delete one FAQ
     * const FAQ = await prisma.fAQ.delete({
     *   where: {
     *     // ... filter to delete one FAQ
     *   }
     * })
     * 
     */
    delete<T extends FAQDeleteArgs>(args: SelectSubset<T, FAQDeleteArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FAQ.
     * @param {FAQUpdateArgs} args - Arguments to update one FAQ.
     * @example
     * // Update one FAQ
     * const fAQ = await prisma.fAQ.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FAQUpdateArgs>(args: SelectSubset<T, FAQUpdateArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FAQS.
     * @param {FAQDeleteManyArgs} args - Arguments to filter FAQS to delete.
     * @example
     * // Delete a few FAQS
     * const { count } = await prisma.fAQ.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FAQDeleteManyArgs>(args?: SelectSubset<T, FAQDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FAQS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FAQS
     * const fAQ = await prisma.fAQ.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FAQUpdateManyArgs>(args: SelectSubset<T, FAQUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FAQS and returns the data updated in the database.
     * @param {FAQUpdateManyAndReturnArgs} args - Arguments to update many FAQS.
     * @example
     * // Update many FAQS
     * const fAQ = await prisma.fAQ.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FAQS and only return the `id`
     * const fAQWithIdOnly = await prisma.fAQ.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FAQUpdateManyAndReturnArgs>(args: SelectSubset<T, FAQUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FAQ.
     * @param {FAQUpsertArgs} args - Arguments to update or create a FAQ.
     * @example
     * // Update or create a FAQ
     * const fAQ = await prisma.fAQ.upsert({
     *   create: {
     *     // ... data to create a FAQ
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FAQ we want to update
     *   }
     * })
     */
    upsert<T extends FAQUpsertArgs>(args: SelectSubset<T, FAQUpsertArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FAQS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQCountArgs} args - Arguments to filter FAQS to count.
     * @example
     * // Count the number of FAQS
     * const count = await prisma.fAQ.count({
     *   where: {
     *     // ... the filter for the FAQS we want to count
     *   }
     * })
    **/
    count<T extends FAQCountArgs>(
      args?: Subset<T, FAQCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FAQCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FAQ.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FAQAggregateArgs>(args: Subset<T, FAQAggregateArgs>): Prisma.PrismaPromise<GetFAQAggregateType<T>>

    /**
     * Group by FAQ.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FAQGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FAQGroupByArgs['orderBy'] }
        : { orderBy?: FAQGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FAQGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFAQGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FAQ model
   */
  readonly fields: FAQFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FAQ.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FAQClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FAQ model
   */
  interface FAQFieldRefs {
    readonly id: FieldRef<"FAQ", 'String'>
    readonly questionUz: FieldRef<"FAQ", 'String'>
    readonly questionRu: FieldRef<"FAQ", 'String'>
    readonly questionEn: FieldRef<"FAQ", 'String'>
    readonly answerUz: FieldRef<"FAQ", 'String'>
    readonly answerRu: FieldRef<"FAQ", 'String'>
    readonly answerEn: FieldRef<"FAQ", 'String'>
  }
    

  // Custom InputTypes
  /**
   * FAQ findUnique
   */
  export type FAQFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * Filter, which FAQ to fetch.
     */
    where: FAQWhereUniqueInput
  }

  /**
   * FAQ findUniqueOrThrow
   */
  export type FAQFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * Filter, which FAQ to fetch.
     */
    where: FAQWhereUniqueInput
  }

  /**
   * FAQ findFirst
   */
  export type FAQFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * Filter, which FAQ to fetch.
     */
    where?: FAQWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FAQS to fetch.
     */
    orderBy?: FAQOrderByWithRelationInput | FAQOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FAQS.
     */
    cursor?: FAQWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FAQS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FAQS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FAQS.
     */
    distinct?: FAQScalarFieldEnum | FAQScalarFieldEnum[]
  }

  /**
   * FAQ findFirstOrThrow
   */
  export type FAQFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * Filter, which FAQ to fetch.
     */
    where?: FAQWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FAQS to fetch.
     */
    orderBy?: FAQOrderByWithRelationInput | FAQOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FAQS.
     */
    cursor?: FAQWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FAQS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FAQS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FAQS.
     */
    distinct?: FAQScalarFieldEnum | FAQScalarFieldEnum[]
  }

  /**
   * FAQ findMany
   */
  export type FAQFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * Filter, which FAQS to fetch.
     */
    where?: FAQWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FAQS to fetch.
     */
    orderBy?: FAQOrderByWithRelationInput | FAQOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FAQS.
     */
    cursor?: FAQWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FAQS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FAQS.
     */
    skip?: number
    distinct?: FAQScalarFieldEnum | FAQScalarFieldEnum[]
  }

  /**
   * FAQ create
   */
  export type FAQCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * The data needed to create a FAQ.
     */
    data: XOR<FAQCreateInput, FAQUncheckedCreateInput>
  }

  /**
   * FAQ createMany
   */
  export type FAQCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FAQS.
     */
    data: FAQCreateManyInput | FAQCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FAQ createManyAndReturn
   */
  export type FAQCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * The data used to create many FAQS.
     */
    data: FAQCreateManyInput | FAQCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FAQ update
   */
  export type FAQUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * The data needed to update a FAQ.
     */
    data: XOR<FAQUpdateInput, FAQUncheckedUpdateInput>
    /**
     * Choose, which FAQ to update.
     */
    where: FAQWhereUniqueInput
  }

  /**
   * FAQ updateMany
   */
  export type FAQUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FAQS.
     */
    data: XOR<FAQUpdateManyMutationInput, FAQUncheckedUpdateManyInput>
    /**
     * Filter which FAQS to update
     */
    where?: FAQWhereInput
    /**
     * Limit how many FAQS to update.
     */
    limit?: number
  }

  /**
   * FAQ updateManyAndReturn
   */
  export type FAQUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * The data used to update FAQS.
     */
    data: XOR<FAQUpdateManyMutationInput, FAQUncheckedUpdateManyInput>
    /**
     * Filter which FAQS to update
     */
    where?: FAQWhereInput
    /**
     * Limit how many FAQS to update.
     */
    limit?: number
  }

  /**
   * FAQ upsert
   */
  export type FAQUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * The filter to search for the FAQ to update in case it exists.
     */
    where: FAQWhereUniqueInput
    /**
     * In case the FAQ found by the `where` argument doesn't exist, create a new FAQ with this data.
     */
    create: XOR<FAQCreateInput, FAQUncheckedCreateInput>
    /**
     * In case the FAQ was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FAQUpdateInput, FAQUncheckedUpdateInput>
  }

  /**
   * FAQ delete
   */
  export type FAQDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * Filter which FAQ to delete.
     */
    where: FAQWhereUniqueInput
  }

  /**
   * FAQ deleteMany
   */
  export type FAQDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FAQS to delete
     */
    where?: FAQWhereInput
    /**
     * Limit how many FAQS to delete.
     */
    limit?: number
  }

  /**
   * FAQ without action
   */
  export type FAQDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
  }


  /**
   * Model Contact
   */

  export type AggregateContact = {
    _count: ContactCountAggregateOutputType | null
    _min: ContactMinAggregateOutputType | null
    _max: ContactMaxAggregateOutputType | null
  }

  export type ContactMinAggregateOutputType = {
    id: string | null
    nameRu: string | null
    nameUz: string | null
    nameEn: string | null
    phone: string | null
    address: string | null
    message: string | null
    email: string | null
  }

  export type ContactMaxAggregateOutputType = {
    id: string | null
    nameRu: string | null
    nameUz: string | null
    nameEn: string | null
    phone: string | null
    address: string | null
    message: string | null
    email: string | null
  }

  export type ContactCountAggregateOutputType = {
    id: number
    nameRu: number
    nameUz: number
    nameEn: number
    phone: number
    address: number
    message: number
    email: number
    _all: number
  }


  export type ContactMinAggregateInputType = {
    id?: true
    nameRu?: true
    nameUz?: true
    nameEn?: true
    phone?: true
    address?: true
    message?: true
    email?: true
  }

  export type ContactMaxAggregateInputType = {
    id?: true
    nameRu?: true
    nameUz?: true
    nameEn?: true
    phone?: true
    address?: true
    message?: true
    email?: true
  }

  export type ContactCountAggregateInputType = {
    id?: true
    nameRu?: true
    nameUz?: true
    nameEn?: true
    phone?: true
    address?: true
    message?: true
    email?: true
    _all?: true
  }

  export type ContactAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contact to aggregate.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contacts
    **/
    _count?: true | ContactCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContactMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContactMaxAggregateInputType
  }

  export type GetContactAggregateType<T extends ContactAggregateArgs> = {
        [P in keyof T & keyof AggregateContact]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContact[P]>
      : GetScalarType<T[P], AggregateContact[P]>
  }




  export type ContactGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactWhereInput
    orderBy?: ContactOrderByWithAggregationInput | ContactOrderByWithAggregationInput[]
    by: ContactScalarFieldEnum[] | ContactScalarFieldEnum
    having?: ContactScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContactCountAggregateInputType | true
    _min?: ContactMinAggregateInputType
    _max?: ContactMaxAggregateInputType
  }

  export type ContactGroupByOutputType = {
    id: string
    nameRu: string
    nameUz: string
    nameEn: string
    phone: string
    address: string
    message: string
    email: string
    _count: ContactCountAggregateOutputType | null
    _min: ContactMinAggregateOutputType | null
    _max: ContactMaxAggregateOutputType | null
  }

  type GetContactGroupByPayload<T extends ContactGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContactGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContactGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContactGroupByOutputType[P]>
            : GetScalarType<T[P], ContactGroupByOutputType[P]>
        }
      >
    >


  export type ContactSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
    phone?: boolean
    address?: boolean
    message?: boolean
    email?: boolean
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
    phone?: boolean
    address?: boolean
    message?: boolean
    email?: boolean
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
    phone?: boolean
    address?: boolean
    message?: boolean
    email?: boolean
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectScalar = {
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
    phone?: boolean
    address?: boolean
    message?: boolean
    email?: boolean
  }

  export type ContactOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nameRu" | "nameUz" | "nameEn" | "phone" | "address" | "message" | "email", ExtArgs["result"]["contact"]>

  export type $ContactPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Contact"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nameRu: string
      nameUz: string
      nameEn: string
      phone: string
      address: string
      message: string
      email: string
    }, ExtArgs["result"]["contact"]>
    composites: {}
  }

  type ContactGetPayload<S extends boolean | null | undefined | ContactDefaultArgs> = $Result.GetResult<Prisma.$ContactPayload, S>

  type ContactCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContactFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContactCountAggregateInputType | true
    }

  export interface ContactDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contact'], meta: { name: 'Contact' } }
    /**
     * Find zero or one Contact that matches the filter.
     * @param {ContactFindUniqueArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContactFindUniqueArgs>(args: SelectSubset<T, ContactFindUniqueArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Contact that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContactFindUniqueOrThrowArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContactFindUniqueOrThrowArgs>(args: SelectSubset<T, ContactFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contact that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindFirstArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContactFindFirstArgs>(args?: SelectSubset<T, ContactFindFirstArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contact that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindFirstOrThrowArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContactFindFirstOrThrowArgs>(args?: SelectSubset<T, ContactFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Contacts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contacts
     * const contacts = await prisma.contact.findMany()
     * 
     * // Get first 10 Contacts
     * const contacts = await prisma.contact.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contactWithIdOnly = await prisma.contact.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContactFindManyArgs>(args?: SelectSubset<T, ContactFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Contact.
     * @param {ContactCreateArgs} args - Arguments to create a Contact.
     * @example
     * // Create one Contact
     * const Contact = await prisma.contact.create({
     *   data: {
     *     // ... data to create a Contact
     *   }
     * })
     * 
     */
    create<T extends ContactCreateArgs>(args: SelectSubset<T, ContactCreateArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Contacts.
     * @param {ContactCreateManyArgs} args - Arguments to create many Contacts.
     * @example
     * // Create many Contacts
     * const contact = await prisma.contact.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContactCreateManyArgs>(args?: SelectSubset<T, ContactCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Contacts and returns the data saved in the database.
     * @param {ContactCreateManyAndReturnArgs} args - Arguments to create many Contacts.
     * @example
     * // Create many Contacts
     * const contact = await prisma.contact.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Contacts and only return the `id`
     * const contactWithIdOnly = await prisma.contact.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContactCreateManyAndReturnArgs>(args?: SelectSubset<T, ContactCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Contact.
     * @param {ContactDeleteArgs} args - Arguments to delete one Contact.
     * @example
     * // Delete one Contact
     * const Contact = await prisma.contact.delete({
     *   where: {
     *     // ... filter to delete one Contact
     *   }
     * })
     * 
     */
    delete<T extends ContactDeleteArgs>(args: SelectSubset<T, ContactDeleteArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Contact.
     * @param {ContactUpdateArgs} args - Arguments to update one Contact.
     * @example
     * // Update one Contact
     * const contact = await prisma.contact.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContactUpdateArgs>(args: SelectSubset<T, ContactUpdateArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Contacts.
     * @param {ContactDeleteManyArgs} args - Arguments to filter Contacts to delete.
     * @example
     * // Delete a few Contacts
     * const { count } = await prisma.contact.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContactDeleteManyArgs>(args?: SelectSubset<T, ContactDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contacts
     * const contact = await prisma.contact.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContactUpdateManyArgs>(args: SelectSubset<T, ContactUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contacts and returns the data updated in the database.
     * @param {ContactUpdateManyAndReturnArgs} args - Arguments to update many Contacts.
     * @example
     * // Update many Contacts
     * const contact = await prisma.contact.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Contacts and only return the `id`
     * const contactWithIdOnly = await prisma.contact.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ContactUpdateManyAndReturnArgs>(args: SelectSubset<T, ContactUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Contact.
     * @param {ContactUpsertArgs} args - Arguments to update or create a Contact.
     * @example
     * // Update or create a Contact
     * const contact = await prisma.contact.upsert({
     *   create: {
     *     // ... data to create a Contact
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contact we want to update
     *   }
     * })
     */
    upsert<T extends ContactUpsertArgs>(args: SelectSubset<T, ContactUpsertArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactCountArgs} args - Arguments to filter Contacts to count.
     * @example
     * // Count the number of Contacts
     * const count = await prisma.contact.count({
     *   where: {
     *     // ... the filter for the Contacts we want to count
     *   }
     * })
    **/
    count<T extends ContactCountArgs>(
      args?: Subset<T, ContactCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContactCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContactAggregateArgs>(args: Subset<T, ContactAggregateArgs>): Prisma.PrismaPromise<GetContactAggregateType<T>>

    /**
     * Group by Contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContactGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContactGroupByArgs['orderBy'] }
        : { orderBy?: ContactGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContactGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Contact model
   */
  readonly fields: ContactFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Contact.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContactClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Contact model
   */
  interface ContactFieldRefs {
    readonly id: FieldRef<"Contact", 'String'>
    readonly nameRu: FieldRef<"Contact", 'String'>
    readonly nameUz: FieldRef<"Contact", 'String'>
    readonly nameEn: FieldRef<"Contact", 'String'>
    readonly phone: FieldRef<"Contact", 'String'>
    readonly address: FieldRef<"Contact", 'String'>
    readonly message: FieldRef<"Contact", 'String'>
    readonly email: FieldRef<"Contact", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Contact findUnique
   */
  export type ContactFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact findUniqueOrThrow
   */
  export type ContactFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact findFirst
   */
  export type ContactFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contacts.
     */
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact findFirstOrThrow
   */
  export type ContactFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contacts.
     */
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact findMany
   */
  export type ContactFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Filter, which Contacts to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact create
   */
  export type ContactCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * The data needed to create a Contact.
     */
    data: XOR<ContactCreateInput, ContactUncheckedCreateInput>
  }

  /**
   * Contact createMany
   */
  export type ContactCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Contacts.
     */
    data: ContactCreateManyInput | ContactCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Contact createManyAndReturn
   */
  export type ContactCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * The data used to create many Contacts.
     */
    data: ContactCreateManyInput | ContactCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Contact update
   */
  export type ContactUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * The data needed to update a Contact.
     */
    data: XOR<ContactUpdateInput, ContactUncheckedUpdateInput>
    /**
     * Choose, which Contact to update.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact updateMany
   */
  export type ContactUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Contacts.
     */
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyInput>
    /**
     * Filter which Contacts to update
     */
    where?: ContactWhereInput
    /**
     * Limit how many Contacts to update.
     */
    limit?: number
  }

  /**
   * Contact updateManyAndReturn
   */
  export type ContactUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * The data used to update Contacts.
     */
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyInput>
    /**
     * Filter which Contacts to update
     */
    where?: ContactWhereInput
    /**
     * Limit how many Contacts to update.
     */
    limit?: number
  }

  /**
   * Contact upsert
   */
  export type ContactUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * The filter to search for the Contact to update in case it exists.
     */
    where: ContactWhereUniqueInput
    /**
     * In case the Contact found by the `where` argument doesn't exist, create a new Contact with this data.
     */
    create: XOR<ContactCreateInput, ContactUncheckedCreateInput>
    /**
     * In case the Contact was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContactUpdateInput, ContactUncheckedUpdateInput>
  }

  /**
   * Contact delete
   */
  export type ContactDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Filter which Contact to delete.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact deleteMany
   */
  export type ContactDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contacts to delete
     */
    where?: ContactWhereInput
    /**
     * Limit how many Contacts to delete.
     */
    limit?: number
  }

  /**
   * Contact without action
   */
  export type ContactDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
  }


  /**
   * Model Partner
   */

  export type AggregatePartner = {
    _count: PartnerCountAggregateOutputType | null
    _min: PartnerMinAggregateOutputType | null
    _max: PartnerMaxAggregateOutputType | null
  }

  export type PartnerMinAggregateOutputType = {
    id: string | null
    nameRu: string | null
    nameUz: string | null
    nameEn: string | null
    image: string | null
    phone: string | null
    address: string | null
    status: boolean | null
    paymentTerms: string | null
    agreementStart: Date | null
    agreementEnd: Date | null
  }

  export type PartnerMaxAggregateOutputType = {
    id: string | null
    nameRu: string | null
    nameUz: string | null
    nameEn: string | null
    image: string | null
    phone: string | null
    address: string | null
    status: boolean | null
    paymentTerms: string | null
    agreementStart: Date | null
    agreementEnd: Date | null
  }

  export type PartnerCountAggregateOutputType = {
    id: number
    nameRu: number
    nameUz: number
    nameEn: number
    image: number
    phone: number
    address: number
    status: number
    paymentTerms: number
    agreementStart: number
    agreementEnd: number
    _all: number
  }


  export type PartnerMinAggregateInputType = {
    id?: true
    nameRu?: true
    nameUz?: true
    nameEn?: true
    image?: true
    phone?: true
    address?: true
    status?: true
    paymentTerms?: true
    agreementStart?: true
    agreementEnd?: true
  }

  export type PartnerMaxAggregateInputType = {
    id?: true
    nameRu?: true
    nameUz?: true
    nameEn?: true
    image?: true
    phone?: true
    address?: true
    status?: true
    paymentTerms?: true
    agreementStart?: true
    agreementEnd?: true
  }

  export type PartnerCountAggregateInputType = {
    id?: true
    nameRu?: true
    nameUz?: true
    nameEn?: true
    image?: true
    phone?: true
    address?: true
    status?: true
    paymentTerms?: true
    agreementStart?: true
    agreementEnd?: true
    _all?: true
  }

  export type PartnerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Partner to aggregate.
     */
    where?: PartnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partners to fetch.
     */
    orderBy?: PartnerOrderByWithRelationInput | PartnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PartnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Partners
    **/
    _count?: true | PartnerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PartnerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PartnerMaxAggregateInputType
  }

  export type GetPartnerAggregateType<T extends PartnerAggregateArgs> = {
        [P in keyof T & keyof AggregatePartner]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePartner[P]>
      : GetScalarType<T[P], AggregatePartner[P]>
  }




  export type PartnerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartnerWhereInput
    orderBy?: PartnerOrderByWithAggregationInput | PartnerOrderByWithAggregationInput[]
    by: PartnerScalarFieldEnum[] | PartnerScalarFieldEnum
    having?: PartnerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PartnerCountAggregateInputType | true
    _min?: PartnerMinAggregateInputType
    _max?: PartnerMaxAggregateInputType
  }

  export type PartnerGroupByOutputType = {
    id: string
    nameRu: string
    nameUz: string
    nameEn: string
    image: string
    phone: string
    address: string
    status: boolean
    paymentTerms: string
    agreementStart: Date
    agreementEnd: Date
    _count: PartnerCountAggregateOutputType | null
    _min: PartnerMinAggregateOutputType | null
    _max: PartnerMaxAggregateOutputType | null
  }

  type GetPartnerGroupByPayload<T extends PartnerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PartnerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PartnerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PartnerGroupByOutputType[P]>
            : GetScalarType<T[P], PartnerGroupByOutputType[P]>
        }
      >
    >


  export type PartnerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
    image?: boolean
    phone?: boolean
    address?: boolean
    status?: boolean
    paymentTerms?: boolean
    agreementStart?: boolean
    agreementEnd?: boolean
  }, ExtArgs["result"]["partner"]>

  export type PartnerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
    image?: boolean
    phone?: boolean
    address?: boolean
    status?: boolean
    paymentTerms?: boolean
    agreementStart?: boolean
    agreementEnd?: boolean
  }, ExtArgs["result"]["partner"]>

  export type PartnerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
    image?: boolean
    phone?: boolean
    address?: boolean
    status?: boolean
    paymentTerms?: boolean
    agreementStart?: boolean
    agreementEnd?: boolean
  }, ExtArgs["result"]["partner"]>

  export type PartnerSelectScalar = {
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
    image?: boolean
    phone?: boolean
    address?: boolean
    status?: boolean
    paymentTerms?: boolean
    agreementStart?: boolean
    agreementEnd?: boolean
  }

  export type PartnerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nameRu" | "nameUz" | "nameEn" | "image" | "phone" | "address" | "status" | "paymentTerms" | "agreementStart" | "agreementEnd", ExtArgs["result"]["partner"]>

  export type $PartnerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Partner"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nameRu: string
      nameUz: string
      nameEn: string
      image: string
      phone: string
      address: string
      status: boolean
      paymentTerms: string
      agreementStart: Date
      agreementEnd: Date
    }, ExtArgs["result"]["partner"]>
    composites: {}
  }

  type PartnerGetPayload<S extends boolean | null | undefined | PartnerDefaultArgs> = $Result.GetResult<Prisma.$PartnerPayload, S>

  type PartnerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PartnerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PartnerCountAggregateInputType | true
    }

  export interface PartnerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Partner'], meta: { name: 'Partner' } }
    /**
     * Find zero or one Partner that matches the filter.
     * @param {PartnerFindUniqueArgs} args - Arguments to find a Partner
     * @example
     * // Get one Partner
     * const partner = await prisma.partner.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PartnerFindUniqueArgs>(args: SelectSubset<T, PartnerFindUniqueArgs<ExtArgs>>): Prisma__PartnerClient<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Partner that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PartnerFindUniqueOrThrowArgs} args - Arguments to find a Partner
     * @example
     * // Get one Partner
     * const partner = await prisma.partner.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PartnerFindUniqueOrThrowArgs>(args: SelectSubset<T, PartnerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PartnerClient<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Partner that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnerFindFirstArgs} args - Arguments to find a Partner
     * @example
     * // Get one Partner
     * const partner = await prisma.partner.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PartnerFindFirstArgs>(args?: SelectSubset<T, PartnerFindFirstArgs<ExtArgs>>): Prisma__PartnerClient<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Partner that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnerFindFirstOrThrowArgs} args - Arguments to find a Partner
     * @example
     * // Get one Partner
     * const partner = await prisma.partner.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PartnerFindFirstOrThrowArgs>(args?: SelectSubset<T, PartnerFindFirstOrThrowArgs<ExtArgs>>): Prisma__PartnerClient<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Partners that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Partners
     * const partners = await prisma.partner.findMany()
     * 
     * // Get first 10 Partners
     * const partners = await prisma.partner.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const partnerWithIdOnly = await prisma.partner.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PartnerFindManyArgs>(args?: SelectSubset<T, PartnerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Partner.
     * @param {PartnerCreateArgs} args - Arguments to create a Partner.
     * @example
     * // Create one Partner
     * const Partner = await prisma.partner.create({
     *   data: {
     *     // ... data to create a Partner
     *   }
     * })
     * 
     */
    create<T extends PartnerCreateArgs>(args: SelectSubset<T, PartnerCreateArgs<ExtArgs>>): Prisma__PartnerClient<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Partners.
     * @param {PartnerCreateManyArgs} args - Arguments to create many Partners.
     * @example
     * // Create many Partners
     * const partner = await prisma.partner.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PartnerCreateManyArgs>(args?: SelectSubset<T, PartnerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Partners and returns the data saved in the database.
     * @param {PartnerCreateManyAndReturnArgs} args - Arguments to create many Partners.
     * @example
     * // Create many Partners
     * const partner = await prisma.partner.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Partners and only return the `id`
     * const partnerWithIdOnly = await prisma.partner.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PartnerCreateManyAndReturnArgs>(args?: SelectSubset<T, PartnerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Partner.
     * @param {PartnerDeleteArgs} args - Arguments to delete one Partner.
     * @example
     * // Delete one Partner
     * const Partner = await prisma.partner.delete({
     *   where: {
     *     // ... filter to delete one Partner
     *   }
     * })
     * 
     */
    delete<T extends PartnerDeleteArgs>(args: SelectSubset<T, PartnerDeleteArgs<ExtArgs>>): Prisma__PartnerClient<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Partner.
     * @param {PartnerUpdateArgs} args - Arguments to update one Partner.
     * @example
     * // Update one Partner
     * const partner = await prisma.partner.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PartnerUpdateArgs>(args: SelectSubset<T, PartnerUpdateArgs<ExtArgs>>): Prisma__PartnerClient<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Partners.
     * @param {PartnerDeleteManyArgs} args - Arguments to filter Partners to delete.
     * @example
     * // Delete a few Partners
     * const { count } = await prisma.partner.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PartnerDeleteManyArgs>(args?: SelectSubset<T, PartnerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Partners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Partners
     * const partner = await prisma.partner.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PartnerUpdateManyArgs>(args: SelectSubset<T, PartnerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Partners and returns the data updated in the database.
     * @param {PartnerUpdateManyAndReturnArgs} args - Arguments to update many Partners.
     * @example
     * // Update many Partners
     * const partner = await prisma.partner.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Partners and only return the `id`
     * const partnerWithIdOnly = await prisma.partner.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PartnerUpdateManyAndReturnArgs>(args: SelectSubset<T, PartnerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Partner.
     * @param {PartnerUpsertArgs} args - Arguments to update or create a Partner.
     * @example
     * // Update or create a Partner
     * const partner = await prisma.partner.upsert({
     *   create: {
     *     // ... data to create a Partner
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Partner we want to update
     *   }
     * })
     */
    upsert<T extends PartnerUpsertArgs>(args: SelectSubset<T, PartnerUpsertArgs<ExtArgs>>): Prisma__PartnerClient<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Partners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnerCountArgs} args - Arguments to filter Partners to count.
     * @example
     * // Count the number of Partners
     * const count = await prisma.partner.count({
     *   where: {
     *     // ... the filter for the Partners we want to count
     *   }
     * })
    **/
    count<T extends PartnerCountArgs>(
      args?: Subset<T, PartnerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PartnerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Partner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PartnerAggregateArgs>(args: Subset<T, PartnerAggregateArgs>): Prisma.PrismaPromise<GetPartnerAggregateType<T>>

    /**
     * Group by Partner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PartnerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PartnerGroupByArgs['orderBy'] }
        : { orderBy?: PartnerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PartnerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPartnerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Partner model
   */
  readonly fields: PartnerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Partner.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PartnerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Partner model
   */
  interface PartnerFieldRefs {
    readonly id: FieldRef<"Partner", 'String'>
    readonly nameRu: FieldRef<"Partner", 'String'>
    readonly nameUz: FieldRef<"Partner", 'String'>
    readonly nameEn: FieldRef<"Partner", 'String'>
    readonly image: FieldRef<"Partner", 'String'>
    readonly phone: FieldRef<"Partner", 'String'>
    readonly address: FieldRef<"Partner", 'String'>
    readonly status: FieldRef<"Partner", 'Boolean'>
    readonly paymentTerms: FieldRef<"Partner", 'String'>
    readonly agreementStart: FieldRef<"Partner", 'DateTime'>
    readonly agreementEnd: FieldRef<"Partner", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Partner findUnique
   */
  export type PartnerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partner
     */
    omit?: PartnerOmit<ExtArgs> | null
    /**
     * Filter, which Partner to fetch.
     */
    where: PartnerWhereUniqueInput
  }

  /**
   * Partner findUniqueOrThrow
   */
  export type PartnerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partner
     */
    omit?: PartnerOmit<ExtArgs> | null
    /**
     * Filter, which Partner to fetch.
     */
    where: PartnerWhereUniqueInput
  }

  /**
   * Partner findFirst
   */
  export type PartnerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partner
     */
    omit?: PartnerOmit<ExtArgs> | null
    /**
     * Filter, which Partner to fetch.
     */
    where?: PartnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partners to fetch.
     */
    orderBy?: PartnerOrderByWithRelationInput | PartnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Partners.
     */
    cursor?: PartnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Partners.
     */
    distinct?: PartnerScalarFieldEnum | PartnerScalarFieldEnum[]
  }

  /**
   * Partner findFirstOrThrow
   */
  export type PartnerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partner
     */
    omit?: PartnerOmit<ExtArgs> | null
    /**
     * Filter, which Partner to fetch.
     */
    where?: PartnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partners to fetch.
     */
    orderBy?: PartnerOrderByWithRelationInput | PartnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Partners.
     */
    cursor?: PartnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Partners.
     */
    distinct?: PartnerScalarFieldEnum | PartnerScalarFieldEnum[]
  }

  /**
   * Partner findMany
   */
  export type PartnerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partner
     */
    omit?: PartnerOmit<ExtArgs> | null
    /**
     * Filter, which Partners to fetch.
     */
    where?: PartnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partners to fetch.
     */
    orderBy?: PartnerOrderByWithRelationInput | PartnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Partners.
     */
    cursor?: PartnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partners.
     */
    skip?: number
    distinct?: PartnerScalarFieldEnum | PartnerScalarFieldEnum[]
  }

  /**
   * Partner create
   */
  export type PartnerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partner
     */
    omit?: PartnerOmit<ExtArgs> | null
    /**
     * The data needed to create a Partner.
     */
    data: XOR<PartnerCreateInput, PartnerUncheckedCreateInput>
  }

  /**
   * Partner createMany
   */
  export type PartnerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Partners.
     */
    data: PartnerCreateManyInput | PartnerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Partner createManyAndReturn
   */
  export type PartnerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Partner
     */
    omit?: PartnerOmit<ExtArgs> | null
    /**
     * The data used to create many Partners.
     */
    data: PartnerCreateManyInput | PartnerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Partner update
   */
  export type PartnerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partner
     */
    omit?: PartnerOmit<ExtArgs> | null
    /**
     * The data needed to update a Partner.
     */
    data: XOR<PartnerUpdateInput, PartnerUncheckedUpdateInput>
    /**
     * Choose, which Partner to update.
     */
    where: PartnerWhereUniqueInput
  }

  /**
   * Partner updateMany
   */
  export type PartnerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Partners.
     */
    data: XOR<PartnerUpdateManyMutationInput, PartnerUncheckedUpdateManyInput>
    /**
     * Filter which Partners to update
     */
    where?: PartnerWhereInput
    /**
     * Limit how many Partners to update.
     */
    limit?: number
  }

  /**
   * Partner updateManyAndReturn
   */
  export type PartnerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Partner
     */
    omit?: PartnerOmit<ExtArgs> | null
    /**
     * The data used to update Partners.
     */
    data: XOR<PartnerUpdateManyMutationInput, PartnerUncheckedUpdateManyInput>
    /**
     * Filter which Partners to update
     */
    where?: PartnerWhereInput
    /**
     * Limit how many Partners to update.
     */
    limit?: number
  }

  /**
   * Partner upsert
   */
  export type PartnerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partner
     */
    omit?: PartnerOmit<ExtArgs> | null
    /**
     * The filter to search for the Partner to update in case it exists.
     */
    where: PartnerWhereUniqueInput
    /**
     * In case the Partner found by the `where` argument doesn't exist, create a new Partner with this data.
     */
    create: XOR<PartnerCreateInput, PartnerUncheckedCreateInput>
    /**
     * In case the Partner was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PartnerUpdateInput, PartnerUncheckedUpdateInput>
  }

  /**
   * Partner delete
   */
  export type PartnerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partner
     */
    omit?: PartnerOmit<ExtArgs> | null
    /**
     * Filter which Partner to delete.
     */
    where: PartnerWhereUniqueInput
  }

  /**
   * Partner deleteMany
   */
  export type PartnerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Partners to delete
     */
    where?: PartnerWhereInput
    /**
     * Limit how many Partners to delete.
     */
    limit?: number
  }

  /**
   * Partner without action
   */
  export type PartnerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partner
     */
    omit?: PartnerOmit<ExtArgs> | null
  }


  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    hourlyPrice: number | null
    dailyPrice: number | null
  }

  export type ProductSumAggregateOutputType = {
    hourlyPrice: number | null
    dailyPrice: number | null
  }

  export type ProductMinAggregateOutputType = {
    id: string | null
    isActive: boolean | null
    nameRu: string | null
    nameUz: string | null
    nameEn: string | null
    image: string | null
    minWorkingHours: string | null
    hourlyPrice: number | null
    dailyPrice: number | null
  }

  export type ProductMaxAggregateOutputType = {
    id: string | null
    isActive: boolean | null
    nameRu: string | null
    nameUz: string | null
    nameEn: string | null
    image: string | null
    minWorkingHours: string | null
    hourlyPrice: number | null
    dailyPrice: number | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    isActive: number
    nameRu: number
    nameUz: number
    nameEn: number
    image: number
    minWorkingHours: number
    hourlyPrice: number
    dailyPrice: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    hourlyPrice?: true
    dailyPrice?: true
  }

  export type ProductSumAggregateInputType = {
    hourlyPrice?: true
    dailyPrice?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    isActive?: true
    nameRu?: true
    nameUz?: true
    nameEn?: true
    image?: true
    minWorkingHours?: true
    hourlyPrice?: true
    dailyPrice?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    isActive?: true
    nameRu?: true
    nameUz?: true
    nameEn?: true
    image?: true
    minWorkingHours?: true
    hourlyPrice?: true
    dailyPrice?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    isActive?: true
    nameRu?: true
    nameUz?: true
    nameEn?: true
    image?: true
    minWorkingHours?: true
    hourlyPrice?: true
    dailyPrice?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithAggregationInput | ProductOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    id: string
    isActive: boolean
    nameRu: string
    nameUz: string
    nameEn: string
    image: string
    minWorkingHours: string
    hourlyPrice: number
    dailyPrice: number
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    isActive?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
    image?: boolean
    minWorkingHours?: boolean
    hourlyPrice?: boolean
    dailyPrice?: boolean
    baskets?: boolean | Product$basketsArgs<ExtArgs>
    orderItems?: boolean | Product$orderItemsArgs<ExtArgs>
    masterJobs?: boolean | Product$masterJobsArgs<ExtArgs>
    levels?: boolean | Product$levelsArgs<ExtArgs>
    tools?: boolean | Product$toolsArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    isActive?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
    image?: boolean
    minWorkingHours?: boolean
    hourlyPrice?: boolean
    dailyPrice?: boolean
  }, ExtArgs["result"]["product"]>

  export type ProductSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    isActive?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
    image?: boolean
    minWorkingHours?: boolean
    hourlyPrice?: boolean
    dailyPrice?: boolean
  }, ExtArgs["result"]["product"]>

  export type ProductSelectScalar = {
    id?: boolean
    isActive?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
    image?: boolean
    minWorkingHours?: boolean
    hourlyPrice?: boolean
    dailyPrice?: boolean
  }

  export type ProductOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "isActive" | "nameRu" | "nameUz" | "nameEn" | "image" | "minWorkingHours" | "hourlyPrice" | "dailyPrice", ExtArgs["result"]["product"]>
  export type ProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    baskets?: boolean | Product$basketsArgs<ExtArgs>
    orderItems?: boolean | Product$orderItemsArgs<ExtArgs>
    masterJobs?: boolean | Product$masterJobsArgs<ExtArgs>
    levels?: boolean | Product$levelsArgs<ExtArgs>
    tools?: boolean | Product$toolsArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProductIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ProductIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Product"
    objects: {
      baskets: Prisma.$BasketPayload<ExtArgs>[]
      orderItems: Prisma.$OrderItemPayload<ExtArgs>[]
      masterJobs: Prisma.$MasterJobsPayload<ExtArgs>[]
      levels: Prisma.$ProductLevelPayload<ExtArgs>[]
      tools: Prisma.$ProductToolPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      isActive: boolean
      nameRu: string
      nameUz: string
      nameEn: string
      image: string
      minWorkingHours: string
      hourlyPrice: number
      dailyPrice: number
    }, ExtArgs["result"]["product"]>
    composites: {}
  }

  type ProductGetPayload<S extends boolean | null | undefined | ProductDefaultArgs> = $Result.GetResult<Prisma.$ProductPayload, S>

  type ProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product'], meta: { name: 'Product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductFindUniqueArgs>(args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Product that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductFindFirstArgs>(args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductFindManyArgs>(args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
     */
    create<T extends ProductCreateArgs>(args: SelectSubset<T, ProductCreateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Products.
     * @param {ProductCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductCreateManyArgs>(args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Products and returns the data saved in the database.
     * @param {ProductCreateManyAndReturnArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Products and only return the `id`
     * const productWithIdOnly = await prisma.product.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
     */
    delete<T extends ProductDeleteArgs>(args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductUpdateArgs>(args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductDeleteManyArgs>(args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductUpdateManyArgs>(args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products and returns the data updated in the database.
     * @param {ProductUpdateManyAndReturnArgs} args - Arguments to update many Products.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Products and only return the `id`
     * const productWithIdOnly = await prisma.product.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProductUpdateManyAndReturnArgs>(args: SelectSubset<T, ProductUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
     */
    upsert<T extends ProductUpsertArgs>(args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product model
   */
  readonly fields: ProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    baskets<T extends Product$basketsArgs<ExtArgs> = {}>(args?: Subset<T, Product$basketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    orderItems<T extends Product$orderItemsArgs<ExtArgs> = {}>(args?: Subset<T, Product$orderItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    masterJobs<T extends Product$masterJobsArgs<ExtArgs> = {}>(args?: Subset<T, Product$masterJobsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterJobsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    levels<T extends Product$levelsArgs<ExtArgs> = {}>(args?: Subset<T, Product$levelsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductLevelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tools<T extends Product$toolsArgs<ExtArgs> = {}>(args?: Subset<T, Product$toolsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductToolPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Product model
   */
  interface ProductFieldRefs {
    readonly id: FieldRef<"Product", 'String'>
    readonly isActive: FieldRef<"Product", 'Boolean'>
    readonly nameRu: FieldRef<"Product", 'String'>
    readonly nameUz: FieldRef<"Product", 'String'>
    readonly nameEn: FieldRef<"Product", 'String'>
    readonly image: FieldRef<"Product", 'String'>
    readonly minWorkingHours: FieldRef<"Product", 'String'>
    readonly hourlyPrice: FieldRef<"Product", 'Int'>
    readonly dailyPrice: FieldRef<"Product", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findMany
   */
  export type ProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product create
   */
  export type ProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }

  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Product createManyAndReturn
   */
  export type ProductCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Product update
   */
  export type ProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to update.
     */
    limit?: number
  }

  /**
   * Product updateManyAndReturn
   */
  export type ProductUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to update.
     */
    limit?: number
  }

  /**
   * Product upsert
   */
  export type ProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }

  /**
   * Product delete
   */
  export type ProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to delete.
     */
    limit?: number
  }

  /**
   * Product.baskets
   */
  export type Product$basketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    where?: BasketWhereInput
    orderBy?: BasketOrderByWithRelationInput | BasketOrderByWithRelationInput[]
    cursor?: BasketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BasketScalarFieldEnum | BasketScalarFieldEnum[]
  }

  /**
   * Product.orderItems
   */
  export type Product$orderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    where?: OrderItemWhereInput
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    cursor?: OrderItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * Product.masterJobs
   */
  export type Product$masterJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterJobs
     */
    select?: MasterJobsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterJobs
     */
    omit?: MasterJobsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterJobsInclude<ExtArgs> | null
    where?: MasterJobsWhereInput
    orderBy?: MasterJobsOrderByWithRelationInput | MasterJobsOrderByWithRelationInput[]
    cursor?: MasterJobsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MasterJobsScalarFieldEnum | MasterJobsScalarFieldEnum[]
  }

  /**
   * Product.levels
   */
  export type Product$levelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductLevel
     */
    select?: ProductLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductLevel
     */
    omit?: ProductLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductLevelInclude<ExtArgs> | null
    where?: ProductLevelWhereInput
    orderBy?: ProductLevelOrderByWithRelationInput | ProductLevelOrderByWithRelationInput[]
    cursor?: ProductLevelWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductLevelScalarFieldEnum | ProductLevelScalarFieldEnum[]
  }

  /**
   * Product.tools
   */
  export type Product$toolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTool
     */
    select?: ProductToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTool
     */
    omit?: ProductToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductToolInclude<ExtArgs> | null
    where?: ProductToolWhereInput
    orderBy?: ProductToolOrderByWithRelationInput | ProductToolOrderByWithRelationInput[]
    cursor?: ProductToolWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductToolScalarFieldEnum | ProductToolScalarFieldEnum[]
  }

  /**
   * Product without action
   */
  export type ProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
  }


  /**
   * Model Level
   */

  export type AggregateLevel = {
    _count: LevelCountAggregateOutputType | null
    _min: LevelMinAggregateOutputType | null
    _max: LevelMaxAggregateOutputType | null
  }

  export type LevelMinAggregateOutputType = {
    id: string | null
    nameRu: string | null
    nameUz: string | null
    nameEn: string | null
  }

  export type LevelMaxAggregateOutputType = {
    id: string | null
    nameRu: string | null
    nameUz: string | null
    nameEn: string | null
  }

  export type LevelCountAggregateOutputType = {
    id: number
    nameRu: number
    nameUz: number
    nameEn: number
    _all: number
  }


  export type LevelMinAggregateInputType = {
    id?: true
    nameRu?: true
    nameUz?: true
    nameEn?: true
  }

  export type LevelMaxAggregateInputType = {
    id?: true
    nameRu?: true
    nameUz?: true
    nameEn?: true
  }

  export type LevelCountAggregateInputType = {
    id?: true
    nameRu?: true
    nameUz?: true
    nameEn?: true
    _all?: true
  }

  export type LevelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Level to aggregate.
     */
    where?: LevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Levels to fetch.
     */
    orderBy?: LevelOrderByWithRelationInput | LevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Levels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Levels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Levels
    **/
    _count?: true | LevelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LevelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LevelMaxAggregateInputType
  }

  export type GetLevelAggregateType<T extends LevelAggregateArgs> = {
        [P in keyof T & keyof AggregateLevel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLevel[P]>
      : GetScalarType<T[P], AggregateLevel[P]>
  }




  export type LevelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LevelWhereInput
    orderBy?: LevelOrderByWithAggregationInput | LevelOrderByWithAggregationInput[]
    by: LevelScalarFieldEnum[] | LevelScalarFieldEnum
    having?: LevelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LevelCountAggregateInputType | true
    _min?: LevelMinAggregateInputType
    _max?: LevelMaxAggregateInputType
  }

  export type LevelGroupByOutputType = {
    id: string
    nameRu: string
    nameUz: string
    nameEn: string
    _count: LevelCountAggregateOutputType | null
    _min: LevelMinAggregateOutputType | null
    _max: LevelMaxAggregateOutputType | null
  }

  type GetLevelGroupByPayload<T extends LevelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LevelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LevelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LevelGroupByOutputType[P]>
            : GetScalarType<T[P], LevelGroupByOutputType[P]>
        }
      >
    >


  export type LevelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
    orderItems?: boolean | Level$orderItemsArgs<ExtArgs>
    masterJobs?: boolean | Level$masterJobsArgs<ExtArgs>
    products?: boolean | Level$productsArgs<ExtArgs>
    baskets?: boolean | Level$basketsArgs<ExtArgs>
    _count?: boolean | LevelCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["level"]>

  export type LevelSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
  }, ExtArgs["result"]["level"]>

  export type LevelSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
  }, ExtArgs["result"]["level"]>

  export type LevelSelectScalar = {
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
  }

  export type LevelOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nameRu" | "nameUz" | "nameEn", ExtArgs["result"]["level"]>
  export type LevelInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderItems?: boolean | Level$orderItemsArgs<ExtArgs>
    masterJobs?: boolean | Level$masterJobsArgs<ExtArgs>
    products?: boolean | Level$productsArgs<ExtArgs>
    baskets?: boolean | Level$basketsArgs<ExtArgs>
    _count?: boolean | LevelCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LevelIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type LevelIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $LevelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Level"
    objects: {
      orderItems: Prisma.$OrderItemPayload<ExtArgs>[]
      masterJobs: Prisma.$MasterJobsPayload<ExtArgs>[]
      products: Prisma.$ProductLevelPayload<ExtArgs>[]
      baskets: Prisma.$BasketPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nameRu: string
      nameUz: string
      nameEn: string
    }, ExtArgs["result"]["level"]>
    composites: {}
  }

  type LevelGetPayload<S extends boolean | null | undefined | LevelDefaultArgs> = $Result.GetResult<Prisma.$LevelPayload, S>

  type LevelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LevelFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LevelCountAggregateInputType | true
    }

  export interface LevelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Level'], meta: { name: 'Level' } }
    /**
     * Find zero or one Level that matches the filter.
     * @param {LevelFindUniqueArgs} args - Arguments to find a Level
     * @example
     * // Get one Level
     * const level = await prisma.level.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LevelFindUniqueArgs>(args: SelectSubset<T, LevelFindUniqueArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Level that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LevelFindUniqueOrThrowArgs} args - Arguments to find a Level
     * @example
     * // Get one Level
     * const level = await prisma.level.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LevelFindUniqueOrThrowArgs>(args: SelectSubset<T, LevelFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Level that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelFindFirstArgs} args - Arguments to find a Level
     * @example
     * // Get one Level
     * const level = await prisma.level.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LevelFindFirstArgs>(args?: SelectSubset<T, LevelFindFirstArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Level that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelFindFirstOrThrowArgs} args - Arguments to find a Level
     * @example
     * // Get one Level
     * const level = await prisma.level.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LevelFindFirstOrThrowArgs>(args?: SelectSubset<T, LevelFindFirstOrThrowArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Levels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Levels
     * const levels = await prisma.level.findMany()
     * 
     * // Get first 10 Levels
     * const levels = await prisma.level.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const levelWithIdOnly = await prisma.level.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LevelFindManyArgs>(args?: SelectSubset<T, LevelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Level.
     * @param {LevelCreateArgs} args - Arguments to create a Level.
     * @example
     * // Create one Level
     * const Level = await prisma.level.create({
     *   data: {
     *     // ... data to create a Level
     *   }
     * })
     * 
     */
    create<T extends LevelCreateArgs>(args: SelectSubset<T, LevelCreateArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Levels.
     * @param {LevelCreateManyArgs} args - Arguments to create many Levels.
     * @example
     * // Create many Levels
     * const level = await prisma.level.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LevelCreateManyArgs>(args?: SelectSubset<T, LevelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Levels and returns the data saved in the database.
     * @param {LevelCreateManyAndReturnArgs} args - Arguments to create many Levels.
     * @example
     * // Create many Levels
     * const level = await prisma.level.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Levels and only return the `id`
     * const levelWithIdOnly = await prisma.level.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LevelCreateManyAndReturnArgs>(args?: SelectSubset<T, LevelCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Level.
     * @param {LevelDeleteArgs} args - Arguments to delete one Level.
     * @example
     * // Delete one Level
     * const Level = await prisma.level.delete({
     *   where: {
     *     // ... filter to delete one Level
     *   }
     * })
     * 
     */
    delete<T extends LevelDeleteArgs>(args: SelectSubset<T, LevelDeleteArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Level.
     * @param {LevelUpdateArgs} args - Arguments to update one Level.
     * @example
     * // Update one Level
     * const level = await prisma.level.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LevelUpdateArgs>(args: SelectSubset<T, LevelUpdateArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Levels.
     * @param {LevelDeleteManyArgs} args - Arguments to filter Levels to delete.
     * @example
     * // Delete a few Levels
     * const { count } = await prisma.level.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LevelDeleteManyArgs>(args?: SelectSubset<T, LevelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Levels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Levels
     * const level = await prisma.level.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LevelUpdateManyArgs>(args: SelectSubset<T, LevelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Levels and returns the data updated in the database.
     * @param {LevelUpdateManyAndReturnArgs} args - Arguments to update many Levels.
     * @example
     * // Update many Levels
     * const level = await prisma.level.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Levels and only return the `id`
     * const levelWithIdOnly = await prisma.level.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LevelUpdateManyAndReturnArgs>(args: SelectSubset<T, LevelUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Level.
     * @param {LevelUpsertArgs} args - Arguments to update or create a Level.
     * @example
     * // Update or create a Level
     * const level = await prisma.level.upsert({
     *   create: {
     *     // ... data to create a Level
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Level we want to update
     *   }
     * })
     */
    upsert<T extends LevelUpsertArgs>(args: SelectSubset<T, LevelUpsertArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Levels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelCountArgs} args - Arguments to filter Levels to count.
     * @example
     * // Count the number of Levels
     * const count = await prisma.level.count({
     *   where: {
     *     // ... the filter for the Levels we want to count
     *   }
     * })
    **/
    count<T extends LevelCountArgs>(
      args?: Subset<T, LevelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LevelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Level.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LevelAggregateArgs>(args: Subset<T, LevelAggregateArgs>): Prisma.PrismaPromise<GetLevelAggregateType<T>>

    /**
     * Group by Level.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LevelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LevelGroupByArgs['orderBy'] }
        : { orderBy?: LevelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LevelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLevelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Level model
   */
  readonly fields: LevelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Level.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LevelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    orderItems<T extends Level$orderItemsArgs<ExtArgs> = {}>(args?: Subset<T, Level$orderItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    masterJobs<T extends Level$masterJobsArgs<ExtArgs> = {}>(args?: Subset<T, Level$masterJobsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterJobsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    products<T extends Level$productsArgs<ExtArgs> = {}>(args?: Subset<T, Level$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductLevelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    baskets<T extends Level$basketsArgs<ExtArgs> = {}>(args?: Subset<T, Level$basketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Level model
   */
  interface LevelFieldRefs {
    readonly id: FieldRef<"Level", 'String'>
    readonly nameRu: FieldRef<"Level", 'String'>
    readonly nameUz: FieldRef<"Level", 'String'>
    readonly nameEn: FieldRef<"Level", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Level findUnique
   */
  export type LevelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * Filter, which Level to fetch.
     */
    where: LevelWhereUniqueInput
  }

  /**
   * Level findUniqueOrThrow
   */
  export type LevelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * Filter, which Level to fetch.
     */
    where: LevelWhereUniqueInput
  }

  /**
   * Level findFirst
   */
  export type LevelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * Filter, which Level to fetch.
     */
    where?: LevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Levels to fetch.
     */
    orderBy?: LevelOrderByWithRelationInput | LevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Levels.
     */
    cursor?: LevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Levels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Levels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Levels.
     */
    distinct?: LevelScalarFieldEnum | LevelScalarFieldEnum[]
  }

  /**
   * Level findFirstOrThrow
   */
  export type LevelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * Filter, which Level to fetch.
     */
    where?: LevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Levels to fetch.
     */
    orderBy?: LevelOrderByWithRelationInput | LevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Levels.
     */
    cursor?: LevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Levels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Levels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Levels.
     */
    distinct?: LevelScalarFieldEnum | LevelScalarFieldEnum[]
  }

  /**
   * Level findMany
   */
  export type LevelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * Filter, which Levels to fetch.
     */
    where?: LevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Levels to fetch.
     */
    orderBy?: LevelOrderByWithRelationInput | LevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Levels.
     */
    cursor?: LevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Levels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Levels.
     */
    skip?: number
    distinct?: LevelScalarFieldEnum | LevelScalarFieldEnum[]
  }

  /**
   * Level create
   */
  export type LevelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * The data needed to create a Level.
     */
    data: XOR<LevelCreateInput, LevelUncheckedCreateInput>
  }

  /**
   * Level createMany
   */
  export type LevelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Levels.
     */
    data: LevelCreateManyInput | LevelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Level createManyAndReturn
   */
  export type LevelCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * The data used to create many Levels.
     */
    data: LevelCreateManyInput | LevelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Level update
   */
  export type LevelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * The data needed to update a Level.
     */
    data: XOR<LevelUpdateInput, LevelUncheckedUpdateInput>
    /**
     * Choose, which Level to update.
     */
    where: LevelWhereUniqueInput
  }

  /**
   * Level updateMany
   */
  export type LevelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Levels.
     */
    data: XOR<LevelUpdateManyMutationInput, LevelUncheckedUpdateManyInput>
    /**
     * Filter which Levels to update
     */
    where?: LevelWhereInput
    /**
     * Limit how many Levels to update.
     */
    limit?: number
  }

  /**
   * Level updateManyAndReturn
   */
  export type LevelUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * The data used to update Levels.
     */
    data: XOR<LevelUpdateManyMutationInput, LevelUncheckedUpdateManyInput>
    /**
     * Filter which Levels to update
     */
    where?: LevelWhereInput
    /**
     * Limit how many Levels to update.
     */
    limit?: number
  }

  /**
   * Level upsert
   */
  export type LevelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * The filter to search for the Level to update in case it exists.
     */
    where: LevelWhereUniqueInput
    /**
     * In case the Level found by the `where` argument doesn't exist, create a new Level with this data.
     */
    create: XOR<LevelCreateInput, LevelUncheckedCreateInput>
    /**
     * In case the Level was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LevelUpdateInput, LevelUncheckedUpdateInput>
  }

  /**
   * Level delete
   */
  export type LevelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * Filter which Level to delete.
     */
    where: LevelWhereUniqueInput
  }

  /**
   * Level deleteMany
   */
  export type LevelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Levels to delete
     */
    where?: LevelWhereInput
    /**
     * Limit how many Levels to delete.
     */
    limit?: number
  }

  /**
   * Level.orderItems
   */
  export type Level$orderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    where?: OrderItemWhereInput
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    cursor?: OrderItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * Level.masterJobs
   */
  export type Level$masterJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterJobs
     */
    select?: MasterJobsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterJobs
     */
    omit?: MasterJobsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterJobsInclude<ExtArgs> | null
    where?: MasterJobsWhereInput
    orderBy?: MasterJobsOrderByWithRelationInput | MasterJobsOrderByWithRelationInput[]
    cursor?: MasterJobsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MasterJobsScalarFieldEnum | MasterJobsScalarFieldEnum[]
  }

  /**
   * Level.products
   */
  export type Level$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductLevel
     */
    select?: ProductLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductLevel
     */
    omit?: ProductLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductLevelInclude<ExtArgs> | null
    where?: ProductLevelWhereInput
    orderBy?: ProductLevelOrderByWithRelationInput | ProductLevelOrderByWithRelationInput[]
    cursor?: ProductLevelWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductLevelScalarFieldEnum | ProductLevelScalarFieldEnum[]
  }

  /**
   * Level.baskets
   */
  export type Level$basketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    where?: BasketWhereInput
    orderBy?: BasketOrderByWithRelationInput | BasketOrderByWithRelationInput[]
    cursor?: BasketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BasketScalarFieldEnum | BasketScalarFieldEnum[]
  }

  /**
   * Level without action
   */
  export type LevelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
  }


  /**
   * Model Tool
   */

  export type AggregateTool = {
    _count: ToolCountAggregateOutputType | null
    _avg: ToolAvgAggregateOutputType | null
    _sum: ToolSumAggregateOutputType | null
    _min: ToolMinAggregateOutputType | null
    _max: ToolMaxAggregateOutputType | null
  }

  export type ToolAvgAggregateOutputType = {
    price: number | null
    quantity: number | null
  }

  export type ToolSumAggregateOutputType = {
    price: number | null
    quantity: number | null
  }

  export type ToolMinAggregateOutputType = {
    id: string | null
    nameRu: string | null
    nameUz: string | null
    nameEn: string | null
    descriptionRu: string | null
    descriptionUz: string | null
    descriptionEn: string | null
    price: number | null
    quantity: number | null
    code: string | null
    brandID: string | null
    capacityID: string | null
    sizeID: string | null
    image: string | null
    isActive: boolean | null
  }

  export type ToolMaxAggregateOutputType = {
    id: string | null
    nameRu: string | null
    nameUz: string | null
    nameEn: string | null
    descriptionRu: string | null
    descriptionUz: string | null
    descriptionEn: string | null
    price: number | null
    quantity: number | null
    code: string | null
    brandID: string | null
    capacityID: string | null
    sizeID: string | null
    image: string | null
    isActive: boolean | null
  }

  export type ToolCountAggregateOutputType = {
    id: number
    nameRu: number
    nameUz: number
    nameEn: number
    descriptionRu: number
    descriptionUz: number
    descriptionEn: number
    price: number
    quantity: number
    code: number
    brandID: number
    capacityID: number
    sizeID: number
    image: number
    isActive: number
    _all: number
  }


  export type ToolAvgAggregateInputType = {
    price?: true
    quantity?: true
  }

  export type ToolSumAggregateInputType = {
    price?: true
    quantity?: true
  }

  export type ToolMinAggregateInputType = {
    id?: true
    nameRu?: true
    nameUz?: true
    nameEn?: true
    descriptionRu?: true
    descriptionUz?: true
    descriptionEn?: true
    price?: true
    quantity?: true
    code?: true
    brandID?: true
    capacityID?: true
    sizeID?: true
    image?: true
    isActive?: true
  }

  export type ToolMaxAggregateInputType = {
    id?: true
    nameRu?: true
    nameUz?: true
    nameEn?: true
    descriptionRu?: true
    descriptionUz?: true
    descriptionEn?: true
    price?: true
    quantity?: true
    code?: true
    brandID?: true
    capacityID?: true
    sizeID?: true
    image?: true
    isActive?: true
  }

  export type ToolCountAggregateInputType = {
    id?: true
    nameRu?: true
    nameUz?: true
    nameEn?: true
    descriptionRu?: true
    descriptionUz?: true
    descriptionEn?: true
    price?: true
    quantity?: true
    code?: true
    brandID?: true
    capacityID?: true
    sizeID?: true
    image?: true
    isActive?: true
    _all?: true
  }

  export type ToolAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tool to aggregate.
     */
    where?: ToolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tools to fetch.
     */
    orderBy?: ToolOrderByWithRelationInput | ToolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ToolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tools
    **/
    _count?: true | ToolCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ToolAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ToolSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ToolMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ToolMaxAggregateInputType
  }

  export type GetToolAggregateType<T extends ToolAggregateArgs> = {
        [P in keyof T & keyof AggregateTool]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTool[P]>
      : GetScalarType<T[P], AggregateTool[P]>
  }




  export type ToolGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ToolWhereInput
    orderBy?: ToolOrderByWithAggregationInput | ToolOrderByWithAggregationInput[]
    by: ToolScalarFieldEnum[] | ToolScalarFieldEnum
    having?: ToolScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ToolCountAggregateInputType | true
    _avg?: ToolAvgAggregateInputType
    _sum?: ToolSumAggregateInputType
    _min?: ToolMinAggregateInputType
    _max?: ToolMaxAggregateInputType
  }

  export type ToolGroupByOutputType = {
    id: string
    nameRu: string
    nameUz: string
    nameEn: string
    descriptionRu: string
    descriptionUz: string
    descriptionEn: string
    price: number
    quantity: number
    code: string | null
    brandID: string
    capacityID: string
    sizeID: string
    image: string
    isActive: boolean
    _count: ToolCountAggregateOutputType | null
    _avg: ToolAvgAggregateOutputType | null
    _sum: ToolSumAggregateOutputType | null
    _min: ToolMinAggregateOutputType | null
    _max: ToolMaxAggregateOutputType | null
  }

  type GetToolGroupByPayload<T extends ToolGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ToolGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ToolGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ToolGroupByOutputType[P]>
            : GetScalarType<T[P], ToolGroupByOutputType[P]>
        }
      >
    >


  export type ToolSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
    descriptionRu?: boolean
    descriptionUz?: boolean
    descriptionEn?: boolean
    price?: boolean
    quantity?: boolean
    code?: boolean
    brandID?: boolean
    capacityID?: boolean
    sizeID?: boolean
    image?: boolean
    isActive?: boolean
    brand?: boolean | BrandDefaultArgs<ExtArgs>
    capacity?: boolean | CapacityDefaultArgs<ExtArgs>
    size?: boolean | SizeDefaultArgs<ExtArgs>
    orderItems?: boolean | Tool$orderItemsArgs<ExtArgs>
    masterJobs?: boolean | Tool$masterJobsArgs<ExtArgs>
    baskets?: boolean | Tool$basketsArgs<ExtArgs>
    products?: boolean | Tool$productsArgs<ExtArgs>
    _count?: boolean | ToolCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tool"]>

  export type ToolSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
    descriptionRu?: boolean
    descriptionUz?: boolean
    descriptionEn?: boolean
    price?: boolean
    quantity?: boolean
    code?: boolean
    brandID?: boolean
    capacityID?: boolean
    sizeID?: boolean
    image?: boolean
    isActive?: boolean
    brand?: boolean | BrandDefaultArgs<ExtArgs>
    capacity?: boolean | CapacityDefaultArgs<ExtArgs>
    size?: boolean | SizeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tool"]>

  export type ToolSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
    descriptionRu?: boolean
    descriptionUz?: boolean
    descriptionEn?: boolean
    price?: boolean
    quantity?: boolean
    code?: boolean
    brandID?: boolean
    capacityID?: boolean
    sizeID?: boolean
    image?: boolean
    isActive?: boolean
    brand?: boolean | BrandDefaultArgs<ExtArgs>
    capacity?: boolean | CapacityDefaultArgs<ExtArgs>
    size?: boolean | SizeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tool"]>

  export type ToolSelectScalar = {
    id?: boolean
    nameRu?: boolean
    nameUz?: boolean
    nameEn?: boolean
    descriptionRu?: boolean
    descriptionUz?: boolean
    descriptionEn?: boolean
    price?: boolean
    quantity?: boolean
    code?: boolean
    brandID?: boolean
    capacityID?: boolean
    sizeID?: boolean
    image?: boolean
    isActive?: boolean
  }

  export type ToolOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nameRu" | "nameUz" | "nameEn" | "descriptionRu" | "descriptionUz" | "descriptionEn" | "price" | "quantity" | "code" | "brandID" | "capacityID" | "sizeID" | "image" | "isActive", ExtArgs["result"]["tool"]>
  export type ToolInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brand?: boolean | BrandDefaultArgs<ExtArgs>
    capacity?: boolean | CapacityDefaultArgs<ExtArgs>
    size?: boolean | SizeDefaultArgs<ExtArgs>
    orderItems?: boolean | Tool$orderItemsArgs<ExtArgs>
    masterJobs?: boolean | Tool$masterJobsArgs<ExtArgs>
    baskets?: boolean | Tool$basketsArgs<ExtArgs>
    products?: boolean | Tool$productsArgs<ExtArgs>
    _count?: boolean | ToolCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ToolIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brand?: boolean | BrandDefaultArgs<ExtArgs>
    capacity?: boolean | CapacityDefaultArgs<ExtArgs>
    size?: boolean | SizeDefaultArgs<ExtArgs>
  }
  export type ToolIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brand?: boolean | BrandDefaultArgs<ExtArgs>
    capacity?: boolean | CapacityDefaultArgs<ExtArgs>
    size?: boolean | SizeDefaultArgs<ExtArgs>
  }

  export type $ToolPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tool"
    objects: {
      brand: Prisma.$BrandPayload<ExtArgs>
      capacity: Prisma.$CapacityPayload<ExtArgs>
      size: Prisma.$SizePayload<ExtArgs>
      orderItems: Prisma.$OrderItemPayload<ExtArgs>[]
      masterJobs: Prisma.$MasterJobsPayload<ExtArgs>[]
      baskets: Prisma.$BasketPayload<ExtArgs>[]
      products: Prisma.$ProductToolPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nameRu: string
      nameUz: string
      nameEn: string
      descriptionRu: string
      descriptionUz: string
      descriptionEn: string
      price: number
      quantity: number
      code: string | null
      brandID: string
      capacityID: string
      sizeID: string
      image: string
      isActive: boolean
    }, ExtArgs["result"]["tool"]>
    composites: {}
  }

  type ToolGetPayload<S extends boolean | null | undefined | ToolDefaultArgs> = $Result.GetResult<Prisma.$ToolPayload, S>

  type ToolCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ToolFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ToolCountAggregateInputType | true
    }

  export interface ToolDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tool'], meta: { name: 'Tool' } }
    /**
     * Find zero or one Tool that matches the filter.
     * @param {ToolFindUniqueArgs} args - Arguments to find a Tool
     * @example
     * // Get one Tool
     * const tool = await prisma.tool.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ToolFindUniqueArgs>(args: SelectSubset<T, ToolFindUniqueArgs<ExtArgs>>): Prisma__ToolClient<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Tool that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ToolFindUniqueOrThrowArgs} args - Arguments to find a Tool
     * @example
     * // Get one Tool
     * const tool = await prisma.tool.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ToolFindUniqueOrThrowArgs>(args: SelectSubset<T, ToolFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ToolClient<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tool that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToolFindFirstArgs} args - Arguments to find a Tool
     * @example
     * // Get one Tool
     * const tool = await prisma.tool.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ToolFindFirstArgs>(args?: SelectSubset<T, ToolFindFirstArgs<ExtArgs>>): Prisma__ToolClient<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tool that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToolFindFirstOrThrowArgs} args - Arguments to find a Tool
     * @example
     * // Get one Tool
     * const tool = await prisma.tool.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ToolFindFirstOrThrowArgs>(args?: SelectSubset<T, ToolFindFirstOrThrowArgs<ExtArgs>>): Prisma__ToolClient<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tools that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToolFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tools
     * const tools = await prisma.tool.findMany()
     * 
     * // Get first 10 Tools
     * const tools = await prisma.tool.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const toolWithIdOnly = await prisma.tool.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ToolFindManyArgs>(args?: SelectSubset<T, ToolFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Tool.
     * @param {ToolCreateArgs} args - Arguments to create a Tool.
     * @example
     * // Create one Tool
     * const Tool = await prisma.tool.create({
     *   data: {
     *     // ... data to create a Tool
     *   }
     * })
     * 
     */
    create<T extends ToolCreateArgs>(args: SelectSubset<T, ToolCreateArgs<ExtArgs>>): Prisma__ToolClient<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tools.
     * @param {ToolCreateManyArgs} args - Arguments to create many Tools.
     * @example
     * // Create many Tools
     * const tool = await prisma.tool.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ToolCreateManyArgs>(args?: SelectSubset<T, ToolCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tools and returns the data saved in the database.
     * @param {ToolCreateManyAndReturnArgs} args - Arguments to create many Tools.
     * @example
     * // Create many Tools
     * const tool = await prisma.tool.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tools and only return the `id`
     * const toolWithIdOnly = await prisma.tool.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ToolCreateManyAndReturnArgs>(args?: SelectSubset<T, ToolCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Tool.
     * @param {ToolDeleteArgs} args - Arguments to delete one Tool.
     * @example
     * // Delete one Tool
     * const Tool = await prisma.tool.delete({
     *   where: {
     *     // ... filter to delete one Tool
     *   }
     * })
     * 
     */
    delete<T extends ToolDeleteArgs>(args: SelectSubset<T, ToolDeleteArgs<ExtArgs>>): Prisma__ToolClient<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Tool.
     * @param {ToolUpdateArgs} args - Arguments to update one Tool.
     * @example
     * // Update one Tool
     * const tool = await prisma.tool.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ToolUpdateArgs>(args: SelectSubset<T, ToolUpdateArgs<ExtArgs>>): Prisma__ToolClient<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tools.
     * @param {ToolDeleteManyArgs} args - Arguments to filter Tools to delete.
     * @example
     * // Delete a few Tools
     * const { count } = await prisma.tool.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ToolDeleteManyArgs>(args?: SelectSubset<T, ToolDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToolUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tools
     * const tool = await prisma.tool.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ToolUpdateManyArgs>(args: SelectSubset<T, ToolUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tools and returns the data updated in the database.
     * @param {ToolUpdateManyAndReturnArgs} args - Arguments to update many Tools.
     * @example
     * // Update many Tools
     * const tool = await prisma.tool.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tools and only return the `id`
     * const toolWithIdOnly = await prisma.tool.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ToolUpdateManyAndReturnArgs>(args: SelectSubset<T, ToolUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Tool.
     * @param {ToolUpsertArgs} args - Arguments to update or create a Tool.
     * @example
     * // Update or create a Tool
     * const tool = await prisma.tool.upsert({
     *   create: {
     *     // ... data to create a Tool
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tool we want to update
     *   }
     * })
     */
    upsert<T extends ToolUpsertArgs>(args: SelectSubset<T, ToolUpsertArgs<ExtArgs>>): Prisma__ToolClient<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToolCountArgs} args - Arguments to filter Tools to count.
     * @example
     * // Count the number of Tools
     * const count = await prisma.tool.count({
     *   where: {
     *     // ... the filter for the Tools we want to count
     *   }
     * })
    **/
    count<T extends ToolCountArgs>(
      args?: Subset<T, ToolCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ToolCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tool.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToolAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ToolAggregateArgs>(args: Subset<T, ToolAggregateArgs>): Prisma.PrismaPromise<GetToolAggregateType<T>>

    /**
     * Group by Tool.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToolGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ToolGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ToolGroupByArgs['orderBy'] }
        : { orderBy?: ToolGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ToolGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetToolGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tool model
   */
  readonly fields: ToolFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tool.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ToolClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    brand<T extends BrandDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BrandDefaultArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    capacity<T extends CapacityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CapacityDefaultArgs<ExtArgs>>): Prisma__CapacityClient<$Result.GetResult<Prisma.$CapacityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    size<T extends SizeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SizeDefaultArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    orderItems<T extends Tool$orderItemsArgs<ExtArgs> = {}>(args?: Subset<T, Tool$orderItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    masterJobs<T extends Tool$masterJobsArgs<ExtArgs> = {}>(args?: Subset<T, Tool$masterJobsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterJobsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    baskets<T extends Tool$basketsArgs<ExtArgs> = {}>(args?: Subset<T, Tool$basketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    products<T extends Tool$productsArgs<ExtArgs> = {}>(args?: Subset<T, Tool$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductToolPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tool model
   */
  interface ToolFieldRefs {
    readonly id: FieldRef<"Tool", 'String'>
    readonly nameRu: FieldRef<"Tool", 'String'>
    readonly nameUz: FieldRef<"Tool", 'String'>
    readonly nameEn: FieldRef<"Tool", 'String'>
    readonly descriptionRu: FieldRef<"Tool", 'String'>
    readonly descriptionUz: FieldRef<"Tool", 'String'>
    readonly descriptionEn: FieldRef<"Tool", 'String'>
    readonly price: FieldRef<"Tool", 'Int'>
    readonly quantity: FieldRef<"Tool", 'Int'>
    readonly code: FieldRef<"Tool", 'String'>
    readonly brandID: FieldRef<"Tool", 'String'>
    readonly capacityID: FieldRef<"Tool", 'String'>
    readonly sizeID: FieldRef<"Tool", 'String'>
    readonly image: FieldRef<"Tool", 'String'>
    readonly isActive: FieldRef<"Tool", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Tool findUnique
   */
  export type ToolFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
    /**
     * Filter, which Tool to fetch.
     */
    where: ToolWhereUniqueInput
  }

  /**
   * Tool findUniqueOrThrow
   */
  export type ToolFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
    /**
     * Filter, which Tool to fetch.
     */
    where: ToolWhereUniqueInput
  }

  /**
   * Tool findFirst
   */
  export type ToolFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
    /**
     * Filter, which Tool to fetch.
     */
    where?: ToolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tools to fetch.
     */
    orderBy?: ToolOrderByWithRelationInput | ToolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tools.
     */
    cursor?: ToolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tools.
     */
    distinct?: ToolScalarFieldEnum | ToolScalarFieldEnum[]
  }

  /**
   * Tool findFirstOrThrow
   */
  export type ToolFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
    /**
     * Filter, which Tool to fetch.
     */
    where?: ToolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tools to fetch.
     */
    orderBy?: ToolOrderByWithRelationInput | ToolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tools.
     */
    cursor?: ToolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tools.
     */
    distinct?: ToolScalarFieldEnum | ToolScalarFieldEnum[]
  }

  /**
   * Tool findMany
   */
  export type ToolFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
    /**
     * Filter, which Tools to fetch.
     */
    where?: ToolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tools to fetch.
     */
    orderBy?: ToolOrderByWithRelationInput | ToolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tools.
     */
    cursor?: ToolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tools.
     */
    skip?: number
    distinct?: ToolScalarFieldEnum | ToolScalarFieldEnum[]
  }

  /**
   * Tool create
   */
  export type ToolCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
    /**
     * The data needed to create a Tool.
     */
    data: XOR<ToolCreateInput, ToolUncheckedCreateInput>
  }

  /**
   * Tool createMany
   */
  export type ToolCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tools.
     */
    data: ToolCreateManyInput | ToolCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tool createManyAndReturn
   */
  export type ToolCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * The data used to create many Tools.
     */
    data: ToolCreateManyInput | ToolCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tool update
   */
  export type ToolUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
    /**
     * The data needed to update a Tool.
     */
    data: XOR<ToolUpdateInput, ToolUncheckedUpdateInput>
    /**
     * Choose, which Tool to update.
     */
    where: ToolWhereUniqueInput
  }

  /**
   * Tool updateMany
   */
  export type ToolUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tools.
     */
    data: XOR<ToolUpdateManyMutationInput, ToolUncheckedUpdateManyInput>
    /**
     * Filter which Tools to update
     */
    where?: ToolWhereInput
    /**
     * Limit how many Tools to update.
     */
    limit?: number
  }

  /**
   * Tool updateManyAndReturn
   */
  export type ToolUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * The data used to update Tools.
     */
    data: XOR<ToolUpdateManyMutationInput, ToolUncheckedUpdateManyInput>
    /**
     * Filter which Tools to update
     */
    where?: ToolWhereInput
    /**
     * Limit how many Tools to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tool upsert
   */
  export type ToolUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
    /**
     * The filter to search for the Tool to update in case it exists.
     */
    where: ToolWhereUniqueInput
    /**
     * In case the Tool found by the `where` argument doesn't exist, create a new Tool with this data.
     */
    create: XOR<ToolCreateInput, ToolUncheckedCreateInput>
    /**
     * In case the Tool was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ToolUpdateInput, ToolUncheckedUpdateInput>
  }

  /**
   * Tool delete
   */
  export type ToolDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
    /**
     * Filter which Tool to delete.
     */
    where: ToolWhereUniqueInput
  }

  /**
   * Tool deleteMany
   */
  export type ToolDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tools to delete
     */
    where?: ToolWhereInput
    /**
     * Limit how many Tools to delete.
     */
    limit?: number
  }

  /**
   * Tool.orderItems
   */
  export type Tool$orderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    where?: OrderItemWhereInput
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    cursor?: OrderItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * Tool.masterJobs
   */
  export type Tool$masterJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterJobs
     */
    select?: MasterJobsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterJobs
     */
    omit?: MasterJobsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterJobsInclude<ExtArgs> | null
    where?: MasterJobsWhereInput
    orderBy?: MasterJobsOrderByWithRelationInput | MasterJobsOrderByWithRelationInput[]
    cursor?: MasterJobsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MasterJobsScalarFieldEnum | MasterJobsScalarFieldEnum[]
  }

  /**
   * Tool.baskets
   */
  export type Tool$basketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    where?: BasketWhereInput
    orderBy?: BasketOrderByWithRelationInput | BasketOrderByWithRelationInput[]
    cursor?: BasketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BasketScalarFieldEnum | BasketScalarFieldEnum[]
  }

  /**
   * Tool.products
   */
  export type Tool$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTool
     */
    select?: ProductToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTool
     */
    omit?: ProductToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductToolInclude<ExtArgs> | null
    where?: ProductToolWhereInput
    orderBy?: ProductToolOrderByWithRelationInput | ProductToolOrderByWithRelationInput[]
    cursor?: ProductToolWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductToolScalarFieldEnum | ProductToolScalarFieldEnum[]
  }

  /**
   * Tool without action
   */
  export type ToolDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tool
     */
    select?: ToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tool
     */
    omit?: ToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolInclude<ExtArgs> | null
  }


  /**
   * Model ProductLevel
   */

  export type AggregateProductLevel = {
    _count: ProductLevelCountAggregateOutputType | null
    _min: ProductLevelMinAggregateOutputType | null
    _max: ProductLevelMaxAggregateOutputType | null
  }

  export type ProductLevelMinAggregateOutputType = {
    id: string | null
    productID: string | null
    levelID: string | null
  }

  export type ProductLevelMaxAggregateOutputType = {
    id: string | null
    productID: string | null
    levelID: string | null
  }

  export type ProductLevelCountAggregateOutputType = {
    id: number
    productID: number
    levelID: number
    _all: number
  }


  export type ProductLevelMinAggregateInputType = {
    id?: true
    productID?: true
    levelID?: true
  }

  export type ProductLevelMaxAggregateInputType = {
    id?: true
    productID?: true
    levelID?: true
  }

  export type ProductLevelCountAggregateInputType = {
    id?: true
    productID?: true
    levelID?: true
    _all?: true
  }

  export type ProductLevelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductLevel to aggregate.
     */
    where?: ProductLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductLevels to fetch.
     */
    orderBy?: ProductLevelOrderByWithRelationInput | ProductLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductLevels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductLevels
    **/
    _count?: true | ProductLevelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductLevelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductLevelMaxAggregateInputType
  }

  export type GetProductLevelAggregateType<T extends ProductLevelAggregateArgs> = {
        [P in keyof T & keyof AggregateProductLevel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductLevel[P]>
      : GetScalarType<T[P], AggregateProductLevel[P]>
  }




  export type ProductLevelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductLevelWhereInput
    orderBy?: ProductLevelOrderByWithAggregationInput | ProductLevelOrderByWithAggregationInput[]
    by: ProductLevelScalarFieldEnum[] | ProductLevelScalarFieldEnum
    having?: ProductLevelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductLevelCountAggregateInputType | true
    _min?: ProductLevelMinAggregateInputType
    _max?: ProductLevelMaxAggregateInputType
  }

  export type ProductLevelGroupByOutputType = {
    id: string
    productID: string
    levelID: string
    _count: ProductLevelCountAggregateOutputType | null
    _min: ProductLevelMinAggregateOutputType | null
    _max: ProductLevelMaxAggregateOutputType | null
  }

  type GetProductLevelGroupByPayload<T extends ProductLevelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductLevelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductLevelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductLevelGroupByOutputType[P]>
            : GetScalarType<T[P], ProductLevelGroupByOutputType[P]>
        }
      >
    >


  export type ProductLevelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productID?: boolean
    levelID?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productLevel"]>

  export type ProductLevelSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productID?: boolean
    levelID?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productLevel"]>

  export type ProductLevelSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productID?: boolean
    levelID?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productLevel"]>

  export type ProductLevelSelectScalar = {
    id?: boolean
    productID?: boolean
    levelID?: boolean
  }

  export type ProductLevelOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "productID" | "levelID", ExtArgs["result"]["productLevel"]>
  export type ProductLevelInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
  }
  export type ProductLevelIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
  }
  export type ProductLevelIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
  }

  export type $ProductLevelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductLevel"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>
      level: Prisma.$LevelPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      productID: string
      levelID: string
    }, ExtArgs["result"]["productLevel"]>
    composites: {}
  }

  type ProductLevelGetPayload<S extends boolean | null | undefined | ProductLevelDefaultArgs> = $Result.GetResult<Prisma.$ProductLevelPayload, S>

  type ProductLevelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductLevelFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductLevelCountAggregateInputType | true
    }

  export interface ProductLevelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductLevel'], meta: { name: 'ProductLevel' } }
    /**
     * Find zero or one ProductLevel that matches the filter.
     * @param {ProductLevelFindUniqueArgs} args - Arguments to find a ProductLevel
     * @example
     * // Get one ProductLevel
     * const productLevel = await prisma.productLevel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductLevelFindUniqueArgs>(args: SelectSubset<T, ProductLevelFindUniqueArgs<ExtArgs>>): Prisma__ProductLevelClient<$Result.GetResult<Prisma.$ProductLevelPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProductLevel that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductLevelFindUniqueOrThrowArgs} args - Arguments to find a ProductLevel
     * @example
     * // Get one ProductLevel
     * const productLevel = await prisma.productLevel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductLevelFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductLevelFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductLevelClient<$Result.GetResult<Prisma.$ProductLevelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductLevel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductLevelFindFirstArgs} args - Arguments to find a ProductLevel
     * @example
     * // Get one ProductLevel
     * const productLevel = await prisma.productLevel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductLevelFindFirstArgs>(args?: SelectSubset<T, ProductLevelFindFirstArgs<ExtArgs>>): Prisma__ProductLevelClient<$Result.GetResult<Prisma.$ProductLevelPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductLevel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductLevelFindFirstOrThrowArgs} args - Arguments to find a ProductLevel
     * @example
     * // Get one ProductLevel
     * const productLevel = await prisma.productLevel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductLevelFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductLevelFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductLevelClient<$Result.GetResult<Prisma.$ProductLevelPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProductLevels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductLevelFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductLevels
     * const productLevels = await prisma.productLevel.findMany()
     * 
     * // Get first 10 ProductLevels
     * const productLevels = await prisma.productLevel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productLevelWithIdOnly = await prisma.productLevel.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductLevelFindManyArgs>(args?: SelectSubset<T, ProductLevelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductLevelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProductLevel.
     * @param {ProductLevelCreateArgs} args - Arguments to create a ProductLevel.
     * @example
     * // Create one ProductLevel
     * const ProductLevel = await prisma.productLevel.create({
     *   data: {
     *     // ... data to create a ProductLevel
     *   }
     * })
     * 
     */
    create<T extends ProductLevelCreateArgs>(args: SelectSubset<T, ProductLevelCreateArgs<ExtArgs>>): Prisma__ProductLevelClient<$Result.GetResult<Prisma.$ProductLevelPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProductLevels.
     * @param {ProductLevelCreateManyArgs} args - Arguments to create many ProductLevels.
     * @example
     * // Create many ProductLevels
     * const productLevel = await prisma.productLevel.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductLevelCreateManyArgs>(args?: SelectSubset<T, ProductLevelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProductLevels and returns the data saved in the database.
     * @param {ProductLevelCreateManyAndReturnArgs} args - Arguments to create many ProductLevels.
     * @example
     * // Create many ProductLevels
     * const productLevel = await prisma.productLevel.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProductLevels and only return the `id`
     * const productLevelWithIdOnly = await prisma.productLevel.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductLevelCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductLevelCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductLevelPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProductLevel.
     * @param {ProductLevelDeleteArgs} args - Arguments to delete one ProductLevel.
     * @example
     * // Delete one ProductLevel
     * const ProductLevel = await prisma.productLevel.delete({
     *   where: {
     *     // ... filter to delete one ProductLevel
     *   }
     * })
     * 
     */
    delete<T extends ProductLevelDeleteArgs>(args: SelectSubset<T, ProductLevelDeleteArgs<ExtArgs>>): Prisma__ProductLevelClient<$Result.GetResult<Prisma.$ProductLevelPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProductLevel.
     * @param {ProductLevelUpdateArgs} args - Arguments to update one ProductLevel.
     * @example
     * // Update one ProductLevel
     * const productLevel = await prisma.productLevel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductLevelUpdateArgs>(args: SelectSubset<T, ProductLevelUpdateArgs<ExtArgs>>): Prisma__ProductLevelClient<$Result.GetResult<Prisma.$ProductLevelPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProductLevels.
     * @param {ProductLevelDeleteManyArgs} args - Arguments to filter ProductLevels to delete.
     * @example
     * // Delete a few ProductLevels
     * const { count } = await prisma.productLevel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductLevelDeleteManyArgs>(args?: SelectSubset<T, ProductLevelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductLevels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductLevelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductLevels
     * const productLevel = await prisma.productLevel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductLevelUpdateManyArgs>(args: SelectSubset<T, ProductLevelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductLevels and returns the data updated in the database.
     * @param {ProductLevelUpdateManyAndReturnArgs} args - Arguments to update many ProductLevels.
     * @example
     * // Update many ProductLevels
     * const productLevel = await prisma.productLevel.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProductLevels and only return the `id`
     * const productLevelWithIdOnly = await prisma.productLevel.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProductLevelUpdateManyAndReturnArgs>(args: SelectSubset<T, ProductLevelUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductLevelPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProductLevel.
     * @param {ProductLevelUpsertArgs} args - Arguments to update or create a ProductLevel.
     * @example
     * // Update or create a ProductLevel
     * const productLevel = await prisma.productLevel.upsert({
     *   create: {
     *     // ... data to create a ProductLevel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductLevel we want to update
     *   }
     * })
     */
    upsert<T extends ProductLevelUpsertArgs>(args: SelectSubset<T, ProductLevelUpsertArgs<ExtArgs>>): Prisma__ProductLevelClient<$Result.GetResult<Prisma.$ProductLevelPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProductLevels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductLevelCountArgs} args - Arguments to filter ProductLevels to count.
     * @example
     * // Count the number of ProductLevels
     * const count = await prisma.productLevel.count({
     *   where: {
     *     // ... the filter for the ProductLevels we want to count
     *   }
     * })
    **/
    count<T extends ProductLevelCountArgs>(
      args?: Subset<T, ProductLevelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductLevelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductLevel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductLevelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductLevelAggregateArgs>(args: Subset<T, ProductLevelAggregateArgs>): Prisma.PrismaPromise<GetProductLevelAggregateType<T>>

    /**
     * Group by ProductLevel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductLevelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductLevelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductLevelGroupByArgs['orderBy'] }
        : { orderBy?: ProductLevelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductLevelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductLevelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductLevel model
   */
  readonly fields: ProductLevelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductLevel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductLevelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    level<T extends LevelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LevelDefaultArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProductLevel model
   */
  interface ProductLevelFieldRefs {
    readonly id: FieldRef<"ProductLevel", 'String'>
    readonly productID: FieldRef<"ProductLevel", 'String'>
    readonly levelID: FieldRef<"ProductLevel", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ProductLevel findUnique
   */
  export type ProductLevelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductLevel
     */
    select?: ProductLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductLevel
     */
    omit?: ProductLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductLevelInclude<ExtArgs> | null
    /**
     * Filter, which ProductLevel to fetch.
     */
    where: ProductLevelWhereUniqueInput
  }

  /**
   * ProductLevel findUniqueOrThrow
   */
  export type ProductLevelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductLevel
     */
    select?: ProductLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductLevel
     */
    omit?: ProductLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductLevelInclude<ExtArgs> | null
    /**
     * Filter, which ProductLevel to fetch.
     */
    where: ProductLevelWhereUniqueInput
  }

  /**
   * ProductLevel findFirst
   */
  export type ProductLevelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductLevel
     */
    select?: ProductLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductLevel
     */
    omit?: ProductLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductLevelInclude<ExtArgs> | null
    /**
     * Filter, which ProductLevel to fetch.
     */
    where?: ProductLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductLevels to fetch.
     */
    orderBy?: ProductLevelOrderByWithRelationInput | ProductLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductLevels.
     */
    cursor?: ProductLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductLevels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductLevels.
     */
    distinct?: ProductLevelScalarFieldEnum | ProductLevelScalarFieldEnum[]
  }

  /**
   * ProductLevel findFirstOrThrow
   */
  export type ProductLevelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductLevel
     */
    select?: ProductLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductLevel
     */
    omit?: ProductLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductLevelInclude<ExtArgs> | null
    /**
     * Filter, which ProductLevel to fetch.
     */
    where?: ProductLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductLevels to fetch.
     */
    orderBy?: ProductLevelOrderByWithRelationInput | ProductLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductLevels.
     */
    cursor?: ProductLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductLevels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductLevels.
     */
    distinct?: ProductLevelScalarFieldEnum | ProductLevelScalarFieldEnum[]
  }

  /**
   * ProductLevel findMany
   */
  export type ProductLevelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductLevel
     */
    select?: ProductLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductLevel
     */
    omit?: ProductLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductLevelInclude<ExtArgs> | null
    /**
     * Filter, which ProductLevels to fetch.
     */
    where?: ProductLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductLevels to fetch.
     */
    orderBy?: ProductLevelOrderByWithRelationInput | ProductLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductLevels.
     */
    cursor?: ProductLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductLevels.
     */
    skip?: number
    distinct?: ProductLevelScalarFieldEnum | ProductLevelScalarFieldEnum[]
  }

  /**
   * ProductLevel create
   */
  export type ProductLevelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductLevel
     */
    select?: ProductLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductLevel
     */
    omit?: ProductLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductLevelInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductLevel.
     */
    data: XOR<ProductLevelCreateInput, ProductLevelUncheckedCreateInput>
  }

  /**
   * ProductLevel createMany
   */
  export type ProductLevelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductLevels.
     */
    data: ProductLevelCreateManyInput | ProductLevelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProductLevel createManyAndReturn
   */
  export type ProductLevelCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductLevel
     */
    select?: ProductLevelSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductLevel
     */
    omit?: ProductLevelOmit<ExtArgs> | null
    /**
     * The data used to create many ProductLevels.
     */
    data: ProductLevelCreateManyInput | ProductLevelCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductLevelIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductLevel update
   */
  export type ProductLevelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductLevel
     */
    select?: ProductLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductLevel
     */
    omit?: ProductLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductLevelInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductLevel.
     */
    data: XOR<ProductLevelUpdateInput, ProductLevelUncheckedUpdateInput>
    /**
     * Choose, which ProductLevel to update.
     */
    where: ProductLevelWhereUniqueInput
  }

  /**
   * ProductLevel updateMany
   */
  export type ProductLevelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductLevels.
     */
    data: XOR<ProductLevelUpdateManyMutationInput, ProductLevelUncheckedUpdateManyInput>
    /**
     * Filter which ProductLevels to update
     */
    where?: ProductLevelWhereInput
    /**
     * Limit how many ProductLevels to update.
     */
    limit?: number
  }

  /**
   * ProductLevel updateManyAndReturn
   */
  export type ProductLevelUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductLevel
     */
    select?: ProductLevelSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductLevel
     */
    omit?: ProductLevelOmit<ExtArgs> | null
    /**
     * The data used to update ProductLevels.
     */
    data: XOR<ProductLevelUpdateManyMutationInput, ProductLevelUncheckedUpdateManyInput>
    /**
     * Filter which ProductLevels to update
     */
    where?: ProductLevelWhereInput
    /**
     * Limit how many ProductLevels to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductLevelIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductLevel upsert
   */
  export type ProductLevelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductLevel
     */
    select?: ProductLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductLevel
     */
    omit?: ProductLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductLevelInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductLevel to update in case it exists.
     */
    where: ProductLevelWhereUniqueInput
    /**
     * In case the ProductLevel found by the `where` argument doesn't exist, create a new ProductLevel with this data.
     */
    create: XOR<ProductLevelCreateInput, ProductLevelUncheckedCreateInput>
    /**
     * In case the ProductLevel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductLevelUpdateInput, ProductLevelUncheckedUpdateInput>
  }

  /**
   * ProductLevel delete
   */
  export type ProductLevelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductLevel
     */
    select?: ProductLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductLevel
     */
    omit?: ProductLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductLevelInclude<ExtArgs> | null
    /**
     * Filter which ProductLevel to delete.
     */
    where: ProductLevelWhereUniqueInput
  }

  /**
   * ProductLevel deleteMany
   */
  export type ProductLevelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductLevels to delete
     */
    where?: ProductLevelWhereInput
    /**
     * Limit how many ProductLevels to delete.
     */
    limit?: number
  }

  /**
   * ProductLevel without action
   */
  export type ProductLevelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductLevel
     */
    select?: ProductLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductLevel
     */
    omit?: ProductLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductLevelInclude<ExtArgs> | null
  }


  /**
   * Model ProductTool
   */

  export type AggregateProductTool = {
    _count: ProductToolCountAggregateOutputType | null
    _min: ProductToolMinAggregateOutputType | null
    _max: ProductToolMaxAggregateOutputType | null
  }

  export type ProductToolMinAggregateOutputType = {
    id: string | null
    productID: string | null
    toolID: string | null
  }

  export type ProductToolMaxAggregateOutputType = {
    id: string | null
    productID: string | null
    toolID: string | null
  }

  export type ProductToolCountAggregateOutputType = {
    id: number
    productID: number
    toolID: number
    _all: number
  }


  export type ProductToolMinAggregateInputType = {
    id?: true
    productID?: true
    toolID?: true
  }

  export type ProductToolMaxAggregateInputType = {
    id?: true
    productID?: true
    toolID?: true
  }

  export type ProductToolCountAggregateInputType = {
    id?: true
    productID?: true
    toolID?: true
    _all?: true
  }

  export type ProductToolAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductTool to aggregate.
     */
    where?: ProductToolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductTools to fetch.
     */
    orderBy?: ProductToolOrderByWithRelationInput | ProductToolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductToolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductTools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductTools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductTools
    **/
    _count?: true | ProductToolCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductToolMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductToolMaxAggregateInputType
  }

  export type GetProductToolAggregateType<T extends ProductToolAggregateArgs> = {
        [P in keyof T & keyof AggregateProductTool]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductTool[P]>
      : GetScalarType<T[P], AggregateProductTool[P]>
  }




  export type ProductToolGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductToolWhereInput
    orderBy?: ProductToolOrderByWithAggregationInput | ProductToolOrderByWithAggregationInput[]
    by: ProductToolScalarFieldEnum[] | ProductToolScalarFieldEnum
    having?: ProductToolScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductToolCountAggregateInputType | true
    _min?: ProductToolMinAggregateInputType
    _max?: ProductToolMaxAggregateInputType
  }

  export type ProductToolGroupByOutputType = {
    id: string
    productID: string
    toolID: string
    _count: ProductToolCountAggregateOutputType | null
    _min: ProductToolMinAggregateOutputType | null
    _max: ProductToolMaxAggregateOutputType | null
  }

  type GetProductToolGroupByPayload<T extends ProductToolGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductToolGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductToolGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductToolGroupByOutputType[P]>
            : GetScalarType<T[P], ProductToolGroupByOutputType[P]>
        }
      >
    >


  export type ProductToolSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productID?: boolean
    toolID?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    tool?: boolean | ToolDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productTool"]>

  export type ProductToolSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productID?: boolean
    toolID?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    tool?: boolean | ToolDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productTool"]>

  export type ProductToolSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productID?: boolean
    toolID?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    tool?: boolean | ToolDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productTool"]>

  export type ProductToolSelectScalar = {
    id?: boolean
    productID?: boolean
    toolID?: boolean
  }

  export type ProductToolOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "productID" | "toolID", ExtArgs["result"]["productTool"]>
  export type ProductToolInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    tool?: boolean | ToolDefaultArgs<ExtArgs>
  }
  export type ProductToolIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    tool?: boolean | ToolDefaultArgs<ExtArgs>
  }
  export type ProductToolIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    tool?: boolean | ToolDefaultArgs<ExtArgs>
  }

  export type $ProductToolPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductTool"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>
      tool: Prisma.$ToolPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      productID: string
      toolID: string
    }, ExtArgs["result"]["productTool"]>
    composites: {}
  }

  type ProductToolGetPayload<S extends boolean | null | undefined | ProductToolDefaultArgs> = $Result.GetResult<Prisma.$ProductToolPayload, S>

  type ProductToolCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductToolFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductToolCountAggregateInputType | true
    }

  export interface ProductToolDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductTool'], meta: { name: 'ProductTool' } }
    /**
     * Find zero or one ProductTool that matches the filter.
     * @param {ProductToolFindUniqueArgs} args - Arguments to find a ProductTool
     * @example
     * // Get one ProductTool
     * const productTool = await prisma.productTool.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductToolFindUniqueArgs>(args: SelectSubset<T, ProductToolFindUniqueArgs<ExtArgs>>): Prisma__ProductToolClient<$Result.GetResult<Prisma.$ProductToolPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProductTool that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductToolFindUniqueOrThrowArgs} args - Arguments to find a ProductTool
     * @example
     * // Get one ProductTool
     * const productTool = await prisma.productTool.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductToolFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductToolFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductToolClient<$Result.GetResult<Prisma.$ProductToolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductTool that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductToolFindFirstArgs} args - Arguments to find a ProductTool
     * @example
     * // Get one ProductTool
     * const productTool = await prisma.productTool.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductToolFindFirstArgs>(args?: SelectSubset<T, ProductToolFindFirstArgs<ExtArgs>>): Prisma__ProductToolClient<$Result.GetResult<Prisma.$ProductToolPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductTool that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductToolFindFirstOrThrowArgs} args - Arguments to find a ProductTool
     * @example
     * // Get one ProductTool
     * const productTool = await prisma.productTool.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductToolFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductToolFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductToolClient<$Result.GetResult<Prisma.$ProductToolPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProductTools that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductToolFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductTools
     * const productTools = await prisma.productTool.findMany()
     * 
     * // Get first 10 ProductTools
     * const productTools = await prisma.productTool.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productToolWithIdOnly = await prisma.productTool.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductToolFindManyArgs>(args?: SelectSubset<T, ProductToolFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductToolPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProductTool.
     * @param {ProductToolCreateArgs} args - Arguments to create a ProductTool.
     * @example
     * // Create one ProductTool
     * const ProductTool = await prisma.productTool.create({
     *   data: {
     *     // ... data to create a ProductTool
     *   }
     * })
     * 
     */
    create<T extends ProductToolCreateArgs>(args: SelectSubset<T, ProductToolCreateArgs<ExtArgs>>): Prisma__ProductToolClient<$Result.GetResult<Prisma.$ProductToolPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProductTools.
     * @param {ProductToolCreateManyArgs} args - Arguments to create many ProductTools.
     * @example
     * // Create many ProductTools
     * const productTool = await prisma.productTool.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductToolCreateManyArgs>(args?: SelectSubset<T, ProductToolCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProductTools and returns the data saved in the database.
     * @param {ProductToolCreateManyAndReturnArgs} args - Arguments to create many ProductTools.
     * @example
     * // Create many ProductTools
     * const productTool = await prisma.productTool.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProductTools and only return the `id`
     * const productToolWithIdOnly = await prisma.productTool.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductToolCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductToolCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductToolPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProductTool.
     * @param {ProductToolDeleteArgs} args - Arguments to delete one ProductTool.
     * @example
     * // Delete one ProductTool
     * const ProductTool = await prisma.productTool.delete({
     *   where: {
     *     // ... filter to delete one ProductTool
     *   }
     * })
     * 
     */
    delete<T extends ProductToolDeleteArgs>(args: SelectSubset<T, ProductToolDeleteArgs<ExtArgs>>): Prisma__ProductToolClient<$Result.GetResult<Prisma.$ProductToolPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProductTool.
     * @param {ProductToolUpdateArgs} args - Arguments to update one ProductTool.
     * @example
     * // Update one ProductTool
     * const productTool = await prisma.productTool.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductToolUpdateArgs>(args: SelectSubset<T, ProductToolUpdateArgs<ExtArgs>>): Prisma__ProductToolClient<$Result.GetResult<Prisma.$ProductToolPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProductTools.
     * @param {ProductToolDeleteManyArgs} args - Arguments to filter ProductTools to delete.
     * @example
     * // Delete a few ProductTools
     * const { count } = await prisma.productTool.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductToolDeleteManyArgs>(args?: SelectSubset<T, ProductToolDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductTools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductToolUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductTools
     * const productTool = await prisma.productTool.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductToolUpdateManyArgs>(args: SelectSubset<T, ProductToolUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductTools and returns the data updated in the database.
     * @param {ProductToolUpdateManyAndReturnArgs} args - Arguments to update many ProductTools.
     * @example
     * // Update many ProductTools
     * const productTool = await prisma.productTool.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProductTools and only return the `id`
     * const productToolWithIdOnly = await prisma.productTool.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProductToolUpdateManyAndReturnArgs>(args: SelectSubset<T, ProductToolUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductToolPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProductTool.
     * @param {ProductToolUpsertArgs} args - Arguments to update or create a ProductTool.
     * @example
     * // Update or create a ProductTool
     * const productTool = await prisma.productTool.upsert({
     *   create: {
     *     // ... data to create a ProductTool
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductTool we want to update
     *   }
     * })
     */
    upsert<T extends ProductToolUpsertArgs>(args: SelectSubset<T, ProductToolUpsertArgs<ExtArgs>>): Prisma__ProductToolClient<$Result.GetResult<Prisma.$ProductToolPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProductTools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductToolCountArgs} args - Arguments to filter ProductTools to count.
     * @example
     * // Count the number of ProductTools
     * const count = await prisma.productTool.count({
     *   where: {
     *     // ... the filter for the ProductTools we want to count
     *   }
     * })
    **/
    count<T extends ProductToolCountArgs>(
      args?: Subset<T, ProductToolCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductToolCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductTool.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductToolAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductToolAggregateArgs>(args: Subset<T, ProductToolAggregateArgs>): Prisma.PrismaPromise<GetProductToolAggregateType<T>>

    /**
     * Group by ProductTool.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductToolGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductToolGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductToolGroupByArgs['orderBy'] }
        : { orderBy?: ProductToolGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductToolGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductToolGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductTool model
   */
  readonly fields: ProductToolFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductTool.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductToolClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tool<T extends ToolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ToolDefaultArgs<ExtArgs>>): Prisma__ToolClient<$Result.GetResult<Prisma.$ToolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProductTool model
   */
  interface ProductToolFieldRefs {
    readonly id: FieldRef<"ProductTool", 'String'>
    readonly productID: FieldRef<"ProductTool", 'String'>
    readonly toolID: FieldRef<"ProductTool", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ProductTool findUnique
   */
  export type ProductToolFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTool
     */
    select?: ProductToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTool
     */
    omit?: ProductToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductToolInclude<ExtArgs> | null
    /**
     * Filter, which ProductTool to fetch.
     */
    where: ProductToolWhereUniqueInput
  }

  /**
   * ProductTool findUniqueOrThrow
   */
  export type ProductToolFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTool
     */
    select?: ProductToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTool
     */
    omit?: ProductToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductToolInclude<ExtArgs> | null
    /**
     * Filter, which ProductTool to fetch.
     */
    where: ProductToolWhereUniqueInput
  }

  /**
   * ProductTool findFirst
   */
  export type ProductToolFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTool
     */
    select?: ProductToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTool
     */
    omit?: ProductToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductToolInclude<ExtArgs> | null
    /**
     * Filter, which ProductTool to fetch.
     */
    where?: ProductToolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductTools to fetch.
     */
    orderBy?: ProductToolOrderByWithRelationInput | ProductToolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductTools.
     */
    cursor?: ProductToolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductTools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductTools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductTools.
     */
    distinct?: ProductToolScalarFieldEnum | ProductToolScalarFieldEnum[]
  }

  /**
   * ProductTool findFirstOrThrow
   */
  export type ProductToolFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTool
     */
    select?: ProductToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTool
     */
    omit?: ProductToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductToolInclude<ExtArgs> | null
    /**
     * Filter, which ProductTool to fetch.
     */
    where?: ProductToolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductTools to fetch.
     */
    orderBy?: ProductToolOrderByWithRelationInput | ProductToolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductTools.
     */
    cursor?: ProductToolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductTools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductTools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductTools.
     */
    distinct?: ProductToolScalarFieldEnum | ProductToolScalarFieldEnum[]
  }

  /**
   * ProductTool findMany
   */
  export type ProductToolFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTool
     */
    select?: ProductToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTool
     */
    omit?: ProductToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductToolInclude<ExtArgs> | null
    /**
     * Filter, which ProductTools to fetch.
     */
    where?: ProductToolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductTools to fetch.
     */
    orderBy?: ProductToolOrderByWithRelationInput | ProductToolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductTools.
     */
    cursor?: ProductToolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductTools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductTools.
     */
    skip?: number
    distinct?: ProductToolScalarFieldEnum | ProductToolScalarFieldEnum[]
  }

  /**
   * ProductTool create
   */
  export type ProductToolCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTool
     */
    select?: ProductToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTool
     */
    omit?: ProductToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductToolInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductTool.
     */
    data: XOR<ProductToolCreateInput, ProductToolUncheckedCreateInput>
  }

  /**
   * ProductTool createMany
   */
  export type ProductToolCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductTools.
     */
    data: ProductToolCreateManyInput | ProductToolCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProductTool createManyAndReturn
   */
  export type ProductToolCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTool
     */
    select?: ProductToolSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTool
     */
    omit?: ProductToolOmit<ExtArgs> | null
    /**
     * The data used to create many ProductTools.
     */
    data: ProductToolCreateManyInput | ProductToolCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductToolIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductTool update
   */
  export type ProductToolUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTool
     */
    select?: ProductToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTool
     */
    omit?: ProductToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductToolInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductTool.
     */
    data: XOR<ProductToolUpdateInput, ProductToolUncheckedUpdateInput>
    /**
     * Choose, which ProductTool to update.
     */
    where: ProductToolWhereUniqueInput
  }

  /**
   * ProductTool updateMany
   */
  export type ProductToolUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductTools.
     */
    data: XOR<ProductToolUpdateManyMutationInput, ProductToolUncheckedUpdateManyInput>
    /**
     * Filter which ProductTools to update
     */
    where?: ProductToolWhereInput
    /**
     * Limit how many ProductTools to update.
     */
    limit?: number
  }

  /**
   * ProductTool updateManyAndReturn
   */
  export type ProductToolUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTool
     */
    select?: ProductToolSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTool
     */
    omit?: ProductToolOmit<ExtArgs> | null
    /**
     * The data used to update ProductTools.
     */
    data: XOR<ProductToolUpdateManyMutationInput, ProductToolUncheckedUpdateManyInput>
    /**
     * Filter which ProductTools to update
     */
    where?: ProductToolWhereInput
    /**
     * Limit how many ProductTools to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductToolIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductTool upsert
   */
  export type ProductToolUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTool
     */
    select?: ProductToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTool
     */
    omit?: ProductToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductToolInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductTool to update in case it exists.
     */
    where: ProductToolWhereUniqueInput
    /**
     * In case the ProductTool found by the `where` argument doesn't exist, create a new ProductTool with this data.
     */
    create: XOR<ProductToolCreateInput, ProductToolUncheckedCreateInput>
    /**
     * In case the ProductTool was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductToolUpdateInput, ProductToolUncheckedUpdateInput>
  }

  /**
   * ProductTool delete
   */
  export type ProductToolDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTool
     */
    select?: ProductToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTool
     */
    omit?: ProductToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductToolInclude<ExtArgs> | null
    /**
     * Filter which ProductTool to delete.
     */
    where: ProductToolWhereUniqueInput
  }

  /**
   * ProductTool deleteMany
   */
  export type ProductToolDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductTools to delete
     */
    where?: ProductToolWhereInput
    /**
     * Limit how many ProductTools to delete.
     */
    limit?: number
  }

  /**
   * ProductTool without action
   */
  export type ProductToolDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTool
     */
    select?: ProductToolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTool
     */
    omit?: ProductToolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductToolInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    nameRu: 'nameRu',
    nameUz: 'nameUz',
    nameEn: 'nameEn',
    email: 'email',
    password: 'password',
    phone: 'phone',
    image: 'image',
    role: 'role',
    status: 'status',
    regionID: 'regionID',
    location: 'location',
    passportSeries: 'passportSeries',
    inn: 'inn'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const RegionScalarFieldEnum: {
    id: 'id',
    nameRu: 'nameRu',
    nameUz: 'nameUz',
    nameEn: 'nameEn'
  };

  export type RegionScalarFieldEnum = (typeof RegionScalarFieldEnum)[keyof typeof RegionScalarFieldEnum]


  export const BasketScalarFieldEnum: {
    id: 'id',
    userID: 'userID',
    productID: 'productID',
    toolID: 'toolID',
    levelID: 'levelID',
    timeUnit: 'timeUnit',
    count: 'count',
    workingHours: 'workingHours',
    totalPrice: 'totalPrice'
  };

  export type BasketScalarFieldEnum = (typeof BasketScalarFieldEnum)[keyof typeof BasketScalarFieldEnum]


  export const OrderScalarFieldEnum: {
    id: 'id',
    locationLat: 'locationLat',
    locationLong: 'locationLong',
    address: 'address',
    orderDate: 'orderDate',
    deliveryDate: 'deliveryDate',
    paymentType: 'paymentType',
    withDelivery: 'withDelivery',
    status: 'status',
    commentToDelivery: 'commentToDelivery'
  };

  export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


  export const OrderItemScalarFieldEnum: {
    id: 'id',
    orderID: 'orderID',
    productID: 'productID',
    toolID: 'toolID',
    levelID: 'levelID',
    timeUnit: 'timeUnit',
    count: 'count',
    workingHours: 'workingHours',
    totalPrice: 'totalPrice'
  };

  export type OrderItemScalarFieldEnum = (typeof OrderItemScalarFieldEnum)[keyof typeof OrderItemScalarFieldEnum]


  export const BrandScalarFieldEnum: {
    id: 'id',
    nameRu: 'nameRu',
    nameUz: 'nameUz',
    nameEn: 'nameEn'
  };

  export type BrandScalarFieldEnum = (typeof BrandScalarFieldEnum)[keyof typeof BrandScalarFieldEnum]


  export const CapacityScalarFieldEnum: {
    id: 'id',
    nameRu: 'nameRu',
    nameUz: 'nameUz',
    nameEn: 'nameEn'
  };

  export type CapacityScalarFieldEnum = (typeof CapacityScalarFieldEnum)[keyof typeof CapacityScalarFieldEnum]


  export const SizeScalarFieldEnum: {
    id: 'id',
    nameRu: 'nameRu',
    nameUz: 'nameUz',
    nameEn: 'nameEn'
  };

  export type SizeScalarFieldEnum = (typeof SizeScalarFieldEnum)[keyof typeof SizeScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    message: 'message',
    star: 'star',
    masterID: 'masterID',
    orderID: 'orderID'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const MasterScalarFieldEnum: {
    id: 'id',
    nameRu: 'nameRu',
    nameUz: 'nameUz',
    nameEn: 'nameEn',
    isActive: 'isActive',
    phone: 'phone',
    dob: 'dob',
    image: 'image',
    passportImage: 'passportImage',
    rating: 'rating'
  };

  export type MasterScalarFieldEnum = (typeof MasterScalarFieldEnum)[keyof typeof MasterScalarFieldEnum]


  export const MasterJobsScalarFieldEnum: {
    id: 'id',
    toolID: 'toolID',
    productID: 'productID',
    minWorkingHour: 'minWorkingHour',
    workingHours: 'workingHours',
    levelID: 'levelID',
    priceHourly: 'priceHourly',
    priceDaily: 'priceDaily',
    experience: 'experience',
    masterID: 'masterID'
  };

  export type MasterJobsScalarFieldEnum = (typeof MasterJobsScalarFieldEnum)[keyof typeof MasterJobsScalarFieldEnum]


  export const GeneralInfoScalarFieldEnum: {
    id: 'id',
    email: 'email',
    link: 'link',
    location: 'location',
    phone: 'phone'
  };

  export type GeneralInfoScalarFieldEnum = (typeof GeneralInfoScalarFieldEnum)[keyof typeof GeneralInfoScalarFieldEnum]


  export const ShowCaseScalarFieldEnum: {
    id: 'id',
    nameRu: 'nameRu',
    nameUz: 'nameUz',
    nameEn: 'nameEn',
    descriptionRu: 'descriptionRu',
    descriptionUz: 'descriptionUz',
    descriptionEn: 'descriptionEn',
    image: 'image',
    link: 'link',
    type: 'type',
    isActive: 'isActive',
    startDate: 'startDate',
    endDate: 'endDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ShowCaseScalarFieldEnum = (typeof ShowCaseScalarFieldEnum)[keyof typeof ShowCaseScalarFieldEnum]


  export const FAQScalarFieldEnum: {
    id: 'id',
    questionUz: 'questionUz',
    questionRu: 'questionRu',
    questionEn: 'questionEn',
    answerUz: 'answerUz',
    answerRu: 'answerRu',
    answerEn: 'answerEn'
  };

  export type FAQScalarFieldEnum = (typeof FAQScalarFieldEnum)[keyof typeof FAQScalarFieldEnum]


  export const ContactScalarFieldEnum: {
    id: 'id',
    nameRu: 'nameRu',
    nameUz: 'nameUz',
    nameEn: 'nameEn',
    phone: 'phone',
    address: 'address',
    message: 'message',
    email: 'email'
  };

  export type ContactScalarFieldEnum = (typeof ContactScalarFieldEnum)[keyof typeof ContactScalarFieldEnum]


  export const PartnerScalarFieldEnum: {
    id: 'id',
    nameRu: 'nameRu',
    nameUz: 'nameUz',
    nameEn: 'nameEn',
    image: 'image',
    phone: 'phone',
    address: 'address',
    status: 'status',
    paymentTerms: 'paymentTerms',
    agreementStart: 'agreementStart',
    agreementEnd: 'agreementEnd'
  };

  export type PartnerScalarFieldEnum = (typeof PartnerScalarFieldEnum)[keyof typeof PartnerScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    isActive: 'isActive',
    nameRu: 'nameRu',
    nameUz: 'nameUz',
    nameEn: 'nameEn',
    image: 'image',
    minWorkingHours: 'minWorkingHours',
    hourlyPrice: 'hourlyPrice',
    dailyPrice: 'dailyPrice'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const LevelScalarFieldEnum: {
    id: 'id',
    nameRu: 'nameRu',
    nameUz: 'nameUz',
    nameEn: 'nameEn'
  };

  export type LevelScalarFieldEnum = (typeof LevelScalarFieldEnum)[keyof typeof LevelScalarFieldEnum]


  export const ToolScalarFieldEnum: {
    id: 'id',
    nameRu: 'nameRu',
    nameUz: 'nameUz',
    nameEn: 'nameEn',
    descriptionRu: 'descriptionRu',
    descriptionUz: 'descriptionUz',
    descriptionEn: 'descriptionEn',
    price: 'price',
    quantity: 'quantity',
    code: 'code',
    brandID: 'brandID',
    capacityID: 'capacityID',
    sizeID: 'sizeID',
    image: 'image',
    isActive: 'isActive'
  };

  export type ToolScalarFieldEnum = (typeof ToolScalarFieldEnum)[keyof typeof ToolScalarFieldEnum]


  export const ProductLevelScalarFieldEnum: {
    id: 'id',
    productID: 'productID',
    levelID: 'levelID'
  };

  export type ProductLevelScalarFieldEnum = (typeof ProductLevelScalarFieldEnum)[keyof typeof ProductLevelScalarFieldEnum]


  export const ProductToolScalarFieldEnum: {
    id: 'id',
    productID: 'productID',
    toolID: 'toolID'
  };

  export type ProductToolScalarFieldEnum = (typeof ProductToolScalarFieldEnum)[keyof typeof ProductToolScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'UserStatus'
   */
  export type EnumUserStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserStatus'>
    


  /**
   * Reference to a field of type 'UserStatus[]'
   */
  export type ListEnumUserStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserStatus[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'PaymentType'
   */
  export type EnumPaymentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentType'>
    


  /**
   * Reference to a field of type 'PaymentType[]'
   */
  export type ListEnumPaymentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentType[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'OrderStatus'
   */
  export type EnumOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderStatus'>
    


  /**
   * Reference to a field of type 'OrderStatus[]'
   */
  export type ListEnumOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderStatus[]'>
    


  /**
   * Reference to a field of type 'ShowCaseType'
   */
  export type EnumShowCaseTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ShowCaseType'>
    


  /**
   * Reference to a field of type 'ShowCaseType[]'
   */
  export type ListEnumShowCaseTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ShowCaseType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    nameRu?: StringFilter<"User"> | string
    nameUz?: StringFilter<"User"> | string
    nameEn?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    phone?: StringFilter<"User"> | string
    image?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    status?: EnumUserStatusFilter<"User"> | $Enums.UserStatus
    regionID?: StringNullableFilter<"User"> | string | null
    location?: StringFilter<"User"> | string
    passportSeries?: StringNullableFilter<"User"> | string | null
    inn?: StringNullableFilter<"User"> | string | null
    region?: XOR<RegionNullableScalarRelationFilter, RegionWhereInput> | null
    baskets?: BasketListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone?: SortOrder
    image?: SortOrder
    role?: SortOrder
    status?: SortOrder
    regionID?: SortOrderInput | SortOrder
    location?: SortOrder
    passportSeries?: SortOrderInput | SortOrder
    inn?: SortOrderInput | SortOrder
    region?: RegionOrderByWithRelationInput
    baskets?: BasketOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    nameRu?: StringFilter<"User"> | string
    nameUz?: StringFilter<"User"> | string
    nameEn?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    phone?: StringFilter<"User"> | string
    image?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    status?: EnumUserStatusFilter<"User"> | $Enums.UserStatus
    regionID?: StringNullableFilter<"User"> | string | null
    location?: StringFilter<"User"> | string
    passportSeries?: StringNullableFilter<"User"> | string | null
    inn?: StringNullableFilter<"User"> | string | null
    region?: XOR<RegionNullableScalarRelationFilter, RegionWhereInput> | null
    baskets?: BasketListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone?: SortOrder
    image?: SortOrder
    role?: SortOrder
    status?: SortOrder
    regionID?: SortOrderInput | SortOrder
    location?: SortOrder
    passportSeries?: SortOrderInput | SortOrder
    inn?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    nameRu?: StringWithAggregatesFilter<"User"> | string
    nameUz?: StringWithAggregatesFilter<"User"> | string
    nameEn?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    phone?: StringWithAggregatesFilter<"User"> | string
    image?: StringWithAggregatesFilter<"User"> | string
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    status?: EnumUserStatusWithAggregatesFilter<"User"> | $Enums.UserStatus
    regionID?: StringNullableWithAggregatesFilter<"User"> | string | null
    location?: StringWithAggregatesFilter<"User"> | string
    passportSeries?: StringNullableWithAggregatesFilter<"User"> | string | null
    inn?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type RegionWhereInput = {
    AND?: RegionWhereInput | RegionWhereInput[]
    OR?: RegionWhereInput[]
    NOT?: RegionWhereInput | RegionWhereInput[]
    id?: StringFilter<"Region"> | string
    nameRu?: StringFilter<"Region"> | string
    nameUz?: StringFilter<"Region"> | string
    nameEn?: StringFilter<"Region"> | string
    users?: UserListRelationFilter
  }

  export type RegionOrderByWithRelationInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    users?: UserOrderByRelationAggregateInput
  }

  export type RegionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RegionWhereInput | RegionWhereInput[]
    OR?: RegionWhereInput[]
    NOT?: RegionWhereInput | RegionWhereInput[]
    nameRu?: StringFilter<"Region"> | string
    nameUz?: StringFilter<"Region"> | string
    nameEn?: StringFilter<"Region"> | string
    users?: UserListRelationFilter
  }, "id">

  export type RegionOrderByWithAggregationInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    _count?: RegionCountOrderByAggregateInput
    _max?: RegionMaxOrderByAggregateInput
    _min?: RegionMinOrderByAggregateInput
  }

  export type RegionScalarWhereWithAggregatesInput = {
    AND?: RegionScalarWhereWithAggregatesInput | RegionScalarWhereWithAggregatesInput[]
    OR?: RegionScalarWhereWithAggregatesInput[]
    NOT?: RegionScalarWhereWithAggregatesInput | RegionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Region"> | string
    nameRu?: StringWithAggregatesFilter<"Region"> | string
    nameUz?: StringWithAggregatesFilter<"Region"> | string
    nameEn?: StringWithAggregatesFilter<"Region"> | string
  }

  export type BasketWhereInput = {
    AND?: BasketWhereInput | BasketWhereInput[]
    OR?: BasketWhereInput[]
    NOT?: BasketWhereInput | BasketWhereInput[]
    id?: StringFilter<"Basket"> | string
    userID?: StringFilter<"Basket"> | string
    productID?: StringFilter<"Basket"> | string
    toolID?: StringFilter<"Basket"> | string
    levelID?: StringFilter<"Basket"> | string
    timeUnit?: IntFilter<"Basket"> | number
    count?: IntNullableFilter<"Basket"> | number | null
    workingHours?: IntFilter<"Basket"> | number
    totalPrice?: IntNullableFilter<"Basket"> | number | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    tool?: XOR<ToolScalarRelationFilter, ToolWhereInput>
    level?: XOR<LevelScalarRelationFilter, LevelWhereInput>
  }

  export type BasketOrderByWithRelationInput = {
    id?: SortOrder
    userID?: SortOrder
    productID?: SortOrder
    toolID?: SortOrder
    levelID?: SortOrder
    timeUnit?: SortOrder
    count?: SortOrderInput | SortOrder
    workingHours?: SortOrder
    totalPrice?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
    tool?: ToolOrderByWithRelationInput
    level?: LevelOrderByWithRelationInput
  }

  export type BasketWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BasketWhereInput | BasketWhereInput[]
    OR?: BasketWhereInput[]
    NOT?: BasketWhereInput | BasketWhereInput[]
    userID?: StringFilter<"Basket"> | string
    productID?: StringFilter<"Basket"> | string
    toolID?: StringFilter<"Basket"> | string
    levelID?: StringFilter<"Basket"> | string
    timeUnit?: IntFilter<"Basket"> | number
    count?: IntNullableFilter<"Basket"> | number | null
    workingHours?: IntFilter<"Basket"> | number
    totalPrice?: IntNullableFilter<"Basket"> | number | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    tool?: XOR<ToolScalarRelationFilter, ToolWhereInput>
    level?: XOR<LevelScalarRelationFilter, LevelWhereInput>
  }, "id">

  export type BasketOrderByWithAggregationInput = {
    id?: SortOrder
    userID?: SortOrder
    productID?: SortOrder
    toolID?: SortOrder
    levelID?: SortOrder
    timeUnit?: SortOrder
    count?: SortOrderInput | SortOrder
    workingHours?: SortOrder
    totalPrice?: SortOrderInput | SortOrder
    _count?: BasketCountOrderByAggregateInput
    _avg?: BasketAvgOrderByAggregateInput
    _max?: BasketMaxOrderByAggregateInput
    _min?: BasketMinOrderByAggregateInput
    _sum?: BasketSumOrderByAggregateInput
  }

  export type BasketScalarWhereWithAggregatesInput = {
    AND?: BasketScalarWhereWithAggregatesInput | BasketScalarWhereWithAggregatesInput[]
    OR?: BasketScalarWhereWithAggregatesInput[]
    NOT?: BasketScalarWhereWithAggregatesInput | BasketScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Basket"> | string
    userID?: StringWithAggregatesFilter<"Basket"> | string
    productID?: StringWithAggregatesFilter<"Basket"> | string
    toolID?: StringWithAggregatesFilter<"Basket"> | string
    levelID?: StringWithAggregatesFilter<"Basket"> | string
    timeUnit?: IntWithAggregatesFilter<"Basket"> | number
    count?: IntNullableWithAggregatesFilter<"Basket"> | number | null
    workingHours?: IntWithAggregatesFilter<"Basket"> | number
    totalPrice?: IntNullableWithAggregatesFilter<"Basket"> | number | null
  }

  export type OrderWhereInput = {
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    id?: StringFilter<"Order"> | string
    locationLat?: StringFilter<"Order"> | string
    locationLong?: StringFilter<"Order"> | string
    address?: StringFilter<"Order"> | string
    orderDate?: DateTimeFilter<"Order"> | Date | string
    deliveryDate?: DateTimeFilter<"Order"> | Date | string
    paymentType?: EnumPaymentTypeFilter<"Order"> | $Enums.PaymentType
    withDelivery?: BoolFilter<"Order"> | boolean
    status?: EnumOrderStatusFilter<"Order"> | $Enums.OrderStatus
    commentToDelivery?: StringNullableFilter<"Order"> | string | null
    items?: OrderItemListRelationFilter
    comments?: CommentListRelationFilter
  }

  export type OrderOrderByWithRelationInput = {
    id?: SortOrder
    locationLat?: SortOrder
    locationLong?: SortOrder
    address?: SortOrder
    orderDate?: SortOrder
    deliveryDate?: SortOrder
    paymentType?: SortOrder
    withDelivery?: SortOrder
    status?: SortOrder
    commentToDelivery?: SortOrderInput | SortOrder
    items?: OrderItemOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
  }

  export type OrderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    locationLat?: StringFilter<"Order"> | string
    locationLong?: StringFilter<"Order"> | string
    address?: StringFilter<"Order"> | string
    orderDate?: DateTimeFilter<"Order"> | Date | string
    deliveryDate?: DateTimeFilter<"Order"> | Date | string
    paymentType?: EnumPaymentTypeFilter<"Order"> | $Enums.PaymentType
    withDelivery?: BoolFilter<"Order"> | boolean
    status?: EnumOrderStatusFilter<"Order"> | $Enums.OrderStatus
    commentToDelivery?: StringNullableFilter<"Order"> | string | null
    items?: OrderItemListRelationFilter
    comments?: CommentListRelationFilter
  }, "id">

  export type OrderOrderByWithAggregationInput = {
    id?: SortOrder
    locationLat?: SortOrder
    locationLong?: SortOrder
    address?: SortOrder
    orderDate?: SortOrder
    deliveryDate?: SortOrder
    paymentType?: SortOrder
    withDelivery?: SortOrder
    status?: SortOrder
    commentToDelivery?: SortOrderInput | SortOrder
    _count?: OrderCountOrderByAggregateInput
    _max?: OrderMaxOrderByAggregateInput
    _min?: OrderMinOrderByAggregateInput
  }

  export type OrderScalarWhereWithAggregatesInput = {
    AND?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    OR?: OrderScalarWhereWithAggregatesInput[]
    NOT?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Order"> | string
    locationLat?: StringWithAggregatesFilter<"Order"> | string
    locationLong?: StringWithAggregatesFilter<"Order"> | string
    address?: StringWithAggregatesFilter<"Order"> | string
    orderDate?: DateTimeWithAggregatesFilter<"Order"> | Date | string
    deliveryDate?: DateTimeWithAggregatesFilter<"Order"> | Date | string
    paymentType?: EnumPaymentTypeWithAggregatesFilter<"Order"> | $Enums.PaymentType
    withDelivery?: BoolWithAggregatesFilter<"Order"> | boolean
    status?: EnumOrderStatusWithAggregatesFilter<"Order"> | $Enums.OrderStatus
    commentToDelivery?: StringNullableWithAggregatesFilter<"Order"> | string | null
  }

  export type OrderItemWhereInput = {
    AND?: OrderItemWhereInput | OrderItemWhereInput[]
    OR?: OrderItemWhereInput[]
    NOT?: OrderItemWhereInput | OrderItemWhereInput[]
    id?: StringFilter<"OrderItem"> | string
    orderID?: StringFilter<"OrderItem"> | string
    productID?: StringFilter<"OrderItem"> | string
    toolID?: StringFilter<"OrderItem"> | string
    levelID?: StringFilter<"OrderItem"> | string
    timeUnit?: IntFilter<"OrderItem"> | number
    count?: IntFilter<"OrderItem"> | number
    workingHours?: IntFilter<"OrderItem"> | number
    totalPrice?: IntNullableFilter<"OrderItem"> | number | null
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    tool?: XOR<ToolScalarRelationFilter, ToolWhereInput>
    level?: XOR<LevelScalarRelationFilter, LevelWhereInput>
  }

  export type OrderItemOrderByWithRelationInput = {
    id?: SortOrder
    orderID?: SortOrder
    productID?: SortOrder
    toolID?: SortOrder
    levelID?: SortOrder
    timeUnit?: SortOrder
    count?: SortOrder
    workingHours?: SortOrder
    totalPrice?: SortOrderInput | SortOrder
    order?: OrderOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
    tool?: ToolOrderByWithRelationInput
    level?: LevelOrderByWithRelationInput
  }

  export type OrderItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OrderItemWhereInput | OrderItemWhereInput[]
    OR?: OrderItemWhereInput[]
    NOT?: OrderItemWhereInput | OrderItemWhereInput[]
    orderID?: StringFilter<"OrderItem"> | string
    productID?: StringFilter<"OrderItem"> | string
    toolID?: StringFilter<"OrderItem"> | string
    levelID?: StringFilter<"OrderItem"> | string
    timeUnit?: IntFilter<"OrderItem"> | number
    count?: IntFilter<"OrderItem"> | number
    workingHours?: IntFilter<"OrderItem"> | number
    totalPrice?: IntNullableFilter<"OrderItem"> | number | null
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    tool?: XOR<ToolScalarRelationFilter, ToolWhereInput>
    level?: XOR<LevelScalarRelationFilter, LevelWhereInput>
  }, "id">

  export type OrderItemOrderByWithAggregationInput = {
    id?: SortOrder
    orderID?: SortOrder
    productID?: SortOrder
    toolID?: SortOrder
    levelID?: SortOrder
    timeUnit?: SortOrder
    count?: SortOrder
    workingHours?: SortOrder
    totalPrice?: SortOrderInput | SortOrder
    _count?: OrderItemCountOrderByAggregateInput
    _avg?: OrderItemAvgOrderByAggregateInput
    _max?: OrderItemMaxOrderByAggregateInput
    _min?: OrderItemMinOrderByAggregateInput
    _sum?: OrderItemSumOrderByAggregateInput
  }

  export type OrderItemScalarWhereWithAggregatesInput = {
    AND?: OrderItemScalarWhereWithAggregatesInput | OrderItemScalarWhereWithAggregatesInput[]
    OR?: OrderItemScalarWhereWithAggregatesInput[]
    NOT?: OrderItemScalarWhereWithAggregatesInput | OrderItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"OrderItem"> | string
    orderID?: StringWithAggregatesFilter<"OrderItem"> | string
    productID?: StringWithAggregatesFilter<"OrderItem"> | string
    toolID?: StringWithAggregatesFilter<"OrderItem"> | string
    levelID?: StringWithAggregatesFilter<"OrderItem"> | string
    timeUnit?: IntWithAggregatesFilter<"OrderItem"> | number
    count?: IntWithAggregatesFilter<"OrderItem"> | number
    workingHours?: IntWithAggregatesFilter<"OrderItem"> | number
    totalPrice?: IntNullableWithAggregatesFilter<"OrderItem"> | number | null
  }

  export type BrandWhereInput = {
    AND?: BrandWhereInput | BrandWhereInput[]
    OR?: BrandWhereInput[]
    NOT?: BrandWhereInput | BrandWhereInput[]
    id?: StringFilter<"Brand"> | string
    nameRu?: StringFilter<"Brand"> | string
    nameUz?: StringFilter<"Brand"> | string
    nameEn?: StringFilter<"Brand"> | string
    tools?: ToolListRelationFilter
  }

  export type BrandOrderByWithRelationInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    tools?: ToolOrderByRelationAggregateInput
  }

  export type BrandWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BrandWhereInput | BrandWhereInput[]
    OR?: BrandWhereInput[]
    NOT?: BrandWhereInput | BrandWhereInput[]
    nameRu?: StringFilter<"Brand"> | string
    nameUz?: StringFilter<"Brand"> | string
    nameEn?: StringFilter<"Brand"> | string
    tools?: ToolListRelationFilter
  }, "id">

  export type BrandOrderByWithAggregationInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    _count?: BrandCountOrderByAggregateInput
    _max?: BrandMaxOrderByAggregateInput
    _min?: BrandMinOrderByAggregateInput
  }

  export type BrandScalarWhereWithAggregatesInput = {
    AND?: BrandScalarWhereWithAggregatesInput | BrandScalarWhereWithAggregatesInput[]
    OR?: BrandScalarWhereWithAggregatesInput[]
    NOT?: BrandScalarWhereWithAggregatesInput | BrandScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Brand"> | string
    nameRu?: StringWithAggregatesFilter<"Brand"> | string
    nameUz?: StringWithAggregatesFilter<"Brand"> | string
    nameEn?: StringWithAggregatesFilter<"Brand"> | string
  }

  export type CapacityWhereInput = {
    AND?: CapacityWhereInput | CapacityWhereInput[]
    OR?: CapacityWhereInput[]
    NOT?: CapacityWhereInput | CapacityWhereInput[]
    id?: StringFilter<"Capacity"> | string
    nameRu?: StringFilter<"Capacity"> | string
    nameUz?: StringFilter<"Capacity"> | string
    nameEn?: StringFilter<"Capacity"> | string
    tools?: ToolListRelationFilter
  }

  export type CapacityOrderByWithRelationInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    tools?: ToolOrderByRelationAggregateInput
  }

  export type CapacityWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CapacityWhereInput | CapacityWhereInput[]
    OR?: CapacityWhereInput[]
    NOT?: CapacityWhereInput | CapacityWhereInput[]
    nameRu?: StringFilter<"Capacity"> | string
    nameUz?: StringFilter<"Capacity"> | string
    nameEn?: StringFilter<"Capacity"> | string
    tools?: ToolListRelationFilter
  }, "id">

  export type CapacityOrderByWithAggregationInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    _count?: CapacityCountOrderByAggregateInput
    _max?: CapacityMaxOrderByAggregateInput
    _min?: CapacityMinOrderByAggregateInput
  }

  export type CapacityScalarWhereWithAggregatesInput = {
    AND?: CapacityScalarWhereWithAggregatesInput | CapacityScalarWhereWithAggregatesInput[]
    OR?: CapacityScalarWhereWithAggregatesInput[]
    NOT?: CapacityScalarWhereWithAggregatesInput | CapacityScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Capacity"> | string
    nameRu?: StringWithAggregatesFilter<"Capacity"> | string
    nameUz?: StringWithAggregatesFilter<"Capacity"> | string
    nameEn?: StringWithAggregatesFilter<"Capacity"> | string
  }

  export type SizeWhereInput = {
    AND?: SizeWhereInput | SizeWhereInput[]
    OR?: SizeWhereInput[]
    NOT?: SizeWhereInput | SizeWhereInput[]
    id?: StringFilter<"Size"> | string
    nameRu?: StringFilter<"Size"> | string
    nameUz?: StringFilter<"Size"> | string
    nameEn?: StringFilter<"Size"> | string
    tools?: ToolListRelationFilter
  }

  export type SizeOrderByWithRelationInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    tools?: ToolOrderByRelationAggregateInput
  }

  export type SizeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SizeWhereInput | SizeWhereInput[]
    OR?: SizeWhereInput[]
    NOT?: SizeWhereInput | SizeWhereInput[]
    nameRu?: StringFilter<"Size"> | string
    nameUz?: StringFilter<"Size"> | string
    nameEn?: StringFilter<"Size"> | string
    tools?: ToolListRelationFilter
  }, "id">

  export type SizeOrderByWithAggregationInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    _count?: SizeCountOrderByAggregateInput
    _max?: SizeMaxOrderByAggregateInput
    _min?: SizeMinOrderByAggregateInput
  }

  export type SizeScalarWhereWithAggregatesInput = {
    AND?: SizeScalarWhereWithAggregatesInput | SizeScalarWhereWithAggregatesInput[]
    OR?: SizeScalarWhereWithAggregatesInput[]
    NOT?: SizeScalarWhereWithAggregatesInput | SizeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Size"> | string
    nameRu?: StringWithAggregatesFilter<"Size"> | string
    nameUz?: StringWithAggregatesFilter<"Size"> | string
    nameEn?: StringWithAggregatesFilter<"Size"> | string
  }

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    id?: StringFilter<"Comment"> | string
    message?: StringFilter<"Comment"> | string
    star?: IntFilter<"Comment"> | number
    masterID?: StringFilter<"Comment"> | string
    orderID?: StringFilter<"Comment"> | string
    master?: XOR<MasterScalarRelationFilter, MasterWhereInput>
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    message?: SortOrder
    star?: SortOrder
    masterID?: SortOrder
    orderID?: SortOrder
    master?: MasterOrderByWithRelationInput
    order?: OrderOrderByWithRelationInput
  }

  export type CommentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    message?: StringFilter<"Comment"> | string
    star?: IntFilter<"Comment"> | number
    masterID?: StringFilter<"Comment"> | string
    orderID?: StringFilter<"Comment"> | string
    master?: XOR<MasterScalarRelationFilter, MasterWhereInput>
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
  }, "id">

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    message?: SortOrder
    star?: SortOrder
    masterID?: SortOrder
    orderID?: SortOrder
    _count?: CommentCountOrderByAggregateInput
    _avg?: CommentAvgOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
    _sum?: CommentSumOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    OR?: CommentScalarWhereWithAggregatesInput[]
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Comment"> | string
    message?: StringWithAggregatesFilter<"Comment"> | string
    star?: IntWithAggregatesFilter<"Comment"> | number
    masterID?: StringWithAggregatesFilter<"Comment"> | string
    orderID?: StringWithAggregatesFilter<"Comment"> | string
  }

  export type MasterWhereInput = {
    AND?: MasterWhereInput | MasterWhereInput[]
    OR?: MasterWhereInput[]
    NOT?: MasterWhereInput | MasterWhereInput[]
    id?: StringFilter<"Master"> | string
    nameRu?: StringFilter<"Master"> | string
    nameUz?: StringFilter<"Master"> | string
    nameEn?: StringFilter<"Master"> | string
    isActive?: BoolFilter<"Master"> | boolean
    phone?: StringFilter<"Master"> | string
    dob?: StringFilter<"Master"> | string
    image?: StringFilter<"Master"> | string
    passportImage?: StringFilter<"Master"> | string
    rating?: IntNullableFilter<"Master"> | number | null
    masterJobs?: MasterJobsListRelationFilter
    comments?: CommentListRelationFilter
  }

  export type MasterOrderByWithRelationInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    isActive?: SortOrder
    phone?: SortOrder
    dob?: SortOrder
    image?: SortOrder
    passportImage?: SortOrder
    rating?: SortOrderInput | SortOrder
    masterJobs?: MasterJobsOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
  }

  export type MasterWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MasterWhereInput | MasterWhereInput[]
    OR?: MasterWhereInput[]
    NOT?: MasterWhereInput | MasterWhereInput[]
    nameRu?: StringFilter<"Master"> | string
    nameUz?: StringFilter<"Master"> | string
    nameEn?: StringFilter<"Master"> | string
    isActive?: BoolFilter<"Master"> | boolean
    phone?: StringFilter<"Master"> | string
    dob?: StringFilter<"Master"> | string
    image?: StringFilter<"Master"> | string
    passportImage?: StringFilter<"Master"> | string
    rating?: IntNullableFilter<"Master"> | number | null
    masterJobs?: MasterJobsListRelationFilter
    comments?: CommentListRelationFilter
  }, "id">

  export type MasterOrderByWithAggregationInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    isActive?: SortOrder
    phone?: SortOrder
    dob?: SortOrder
    image?: SortOrder
    passportImage?: SortOrder
    rating?: SortOrderInput | SortOrder
    _count?: MasterCountOrderByAggregateInput
    _avg?: MasterAvgOrderByAggregateInput
    _max?: MasterMaxOrderByAggregateInput
    _min?: MasterMinOrderByAggregateInput
    _sum?: MasterSumOrderByAggregateInput
  }

  export type MasterScalarWhereWithAggregatesInput = {
    AND?: MasterScalarWhereWithAggregatesInput | MasterScalarWhereWithAggregatesInput[]
    OR?: MasterScalarWhereWithAggregatesInput[]
    NOT?: MasterScalarWhereWithAggregatesInput | MasterScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Master"> | string
    nameRu?: StringWithAggregatesFilter<"Master"> | string
    nameUz?: StringWithAggregatesFilter<"Master"> | string
    nameEn?: StringWithAggregatesFilter<"Master"> | string
    isActive?: BoolWithAggregatesFilter<"Master"> | boolean
    phone?: StringWithAggregatesFilter<"Master"> | string
    dob?: StringWithAggregatesFilter<"Master"> | string
    image?: StringWithAggregatesFilter<"Master"> | string
    passportImage?: StringWithAggregatesFilter<"Master"> | string
    rating?: IntNullableWithAggregatesFilter<"Master"> | number | null
  }

  export type MasterJobsWhereInput = {
    AND?: MasterJobsWhereInput | MasterJobsWhereInput[]
    OR?: MasterJobsWhereInput[]
    NOT?: MasterJobsWhereInput | MasterJobsWhereInput[]
    id?: StringFilter<"MasterJobs"> | string
    toolID?: StringFilter<"MasterJobs"> | string
    productID?: StringFilter<"MasterJobs"> | string
    minWorkingHour?: IntFilter<"MasterJobs"> | number
    workingHours?: IntFilter<"MasterJobs"> | number
    levelID?: StringFilter<"MasterJobs"> | string
    priceHourly?: IntFilter<"MasterJobs"> | number
    priceDaily?: IntFilter<"MasterJobs"> | number
    experience?: StringFilter<"MasterJobs"> | string
    masterID?: StringFilter<"MasterJobs"> | string
    tool?: XOR<ToolScalarRelationFilter, ToolWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    level?: XOR<LevelScalarRelationFilter, LevelWhereInput>
    master?: XOR<MasterScalarRelationFilter, MasterWhereInput>
  }

  export type MasterJobsOrderByWithRelationInput = {
    id?: SortOrder
    toolID?: SortOrder
    productID?: SortOrder
    minWorkingHour?: SortOrder
    workingHours?: SortOrder
    levelID?: SortOrder
    priceHourly?: SortOrder
    priceDaily?: SortOrder
    experience?: SortOrder
    masterID?: SortOrder
    tool?: ToolOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
    level?: LevelOrderByWithRelationInput
    master?: MasterOrderByWithRelationInput
  }

  export type MasterJobsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MasterJobsWhereInput | MasterJobsWhereInput[]
    OR?: MasterJobsWhereInput[]
    NOT?: MasterJobsWhereInput | MasterJobsWhereInput[]
    toolID?: StringFilter<"MasterJobs"> | string
    productID?: StringFilter<"MasterJobs"> | string
    minWorkingHour?: IntFilter<"MasterJobs"> | number
    workingHours?: IntFilter<"MasterJobs"> | number
    levelID?: StringFilter<"MasterJobs"> | string
    priceHourly?: IntFilter<"MasterJobs"> | number
    priceDaily?: IntFilter<"MasterJobs"> | number
    experience?: StringFilter<"MasterJobs"> | string
    masterID?: StringFilter<"MasterJobs"> | string
    tool?: XOR<ToolScalarRelationFilter, ToolWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    level?: XOR<LevelScalarRelationFilter, LevelWhereInput>
    master?: XOR<MasterScalarRelationFilter, MasterWhereInput>
  }, "id">

  export type MasterJobsOrderByWithAggregationInput = {
    id?: SortOrder
    toolID?: SortOrder
    productID?: SortOrder
    minWorkingHour?: SortOrder
    workingHours?: SortOrder
    levelID?: SortOrder
    priceHourly?: SortOrder
    priceDaily?: SortOrder
    experience?: SortOrder
    masterID?: SortOrder
    _count?: MasterJobsCountOrderByAggregateInput
    _avg?: MasterJobsAvgOrderByAggregateInput
    _max?: MasterJobsMaxOrderByAggregateInput
    _min?: MasterJobsMinOrderByAggregateInput
    _sum?: MasterJobsSumOrderByAggregateInput
  }

  export type MasterJobsScalarWhereWithAggregatesInput = {
    AND?: MasterJobsScalarWhereWithAggregatesInput | MasterJobsScalarWhereWithAggregatesInput[]
    OR?: MasterJobsScalarWhereWithAggregatesInput[]
    NOT?: MasterJobsScalarWhereWithAggregatesInput | MasterJobsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MasterJobs"> | string
    toolID?: StringWithAggregatesFilter<"MasterJobs"> | string
    productID?: StringWithAggregatesFilter<"MasterJobs"> | string
    minWorkingHour?: IntWithAggregatesFilter<"MasterJobs"> | number
    workingHours?: IntWithAggregatesFilter<"MasterJobs"> | number
    levelID?: StringWithAggregatesFilter<"MasterJobs"> | string
    priceHourly?: IntWithAggregatesFilter<"MasterJobs"> | number
    priceDaily?: IntWithAggregatesFilter<"MasterJobs"> | number
    experience?: StringWithAggregatesFilter<"MasterJobs"> | string
    masterID?: StringWithAggregatesFilter<"MasterJobs"> | string
  }

  export type GeneralInfoWhereInput = {
    AND?: GeneralInfoWhereInput | GeneralInfoWhereInput[]
    OR?: GeneralInfoWhereInput[]
    NOT?: GeneralInfoWhereInput | GeneralInfoWhereInput[]
    id?: StringFilter<"GeneralInfo"> | string
    email?: StringFilter<"GeneralInfo"> | string
    link?: StringFilter<"GeneralInfo"> | string
    location?: StringFilter<"GeneralInfo"> | string
    phone?: StringFilter<"GeneralInfo"> | string
  }

  export type GeneralInfoOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    link?: SortOrder
    location?: SortOrder
    phone?: SortOrder
  }

  export type GeneralInfoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GeneralInfoWhereInput | GeneralInfoWhereInput[]
    OR?: GeneralInfoWhereInput[]
    NOT?: GeneralInfoWhereInput | GeneralInfoWhereInput[]
    email?: StringFilter<"GeneralInfo"> | string
    link?: StringFilter<"GeneralInfo"> | string
    location?: StringFilter<"GeneralInfo"> | string
    phone?: StringFilter<"GeneralInfo"> | string
  }, "id">

  export type GeneralInfoOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    link?: SortOrder
    location?: SortOrder
    phone?: SortOrder
    _count?: GeneralInfoCountOrderByAggregateInput
    _max?: GeneralInfoMaxOrderByAggregateInput
    _min?: GeneralInfoMinOrderByAggregateInput
  }

  export type GeneralInfoScalarWhereWithAggregatesInput = {
    AND?: GeneralInfoScalarWhereWithAggregatesInput | GeneralInfoScalarWhereWithAggregatesInput[]
    OR?: GeneralInfoScalarWhereWithAggregatesInput[]
    NOT?: GeneralInfoScalarWhereWithAggregatesInput | GeneralInfoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GeneralInfo"> | string
    email?: StringWithAggregatesFilter<"GeneralInfo"> | string
    link?: StringWithAggregatesFilter<"GeneralInfo"> | string
    location?: StringWithAggregatesFilter<"GeneralInfo"> | string
    phone?: StringWithAggregatesFilter<"GeneralInfo"> | string
  }

  export type ShowCaseWhereInput = {
    AND?: ShowCaseWhereInput | ShowCaseWhereInput[]
    OR?: ShowCaseWhereInput[]
    NOT?: ShowCaseWhereInput | ShowCaseWhereInput[]
    id?: StringFilter<"ShowCase"> | string
    nameRu?: StringFilter<"ShowCase"> | string
    nameUz?: StringFilter<"ShowCase"> | string
    nameEn?: StringFilter<"ShowCase"> | string
    descriptionRu?: StringFilter<"ShowCase"> | string
    descriptionUz?: StringFilter<"ShowCase"> | string
    descriptionEn?: StringFilter<"ShowCase"> | string
    image?: StringFilter<"ShowCase"> | string
    link?: StringFilter<"ShowCase"> | string
    type?: EnumShowCaseTypeFilter<"ShowCase"> | $Enums.ShowCaseType
    isActive?: BoolFilter<"ShowCase"> | boolean
    startDate?: DateTimeFilter<"ShowCase"> | Date | string
    endDate?: DateTimeFilter<"ShowCase"> | Date | string
    createdAt?: DateTimeFilter<"ShowCase"> | Date | string
    updatedAt?: DateTimeFilter<"ShowCase"> | Date | string
  }

  export type ShowCaseOrderByWithRelationInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    descriptionRu?: SortOrder
    descriptionUz?: SortOrder
    descriptionEn?: SortOrder
    image?: SortOrder
    link?: SortOrder
    type?: SortOrder
    isActive?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShowCaseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ShowCaseWhereInput | ShowCaseWhereInput[]
    OR?: ShowCaseWhereInput[]
    NOT?: ShowCaseWhereInput | ShowCaseWhereInput[]
    nameRu?: StringFilter<"ShowCase"> | string
    nameUz?: StringFilter<"ShowCase"> | string
    nameEn?: StringFilter<"ShowCase"> | string
    descriptionRu?: StringFilter<"ShowCase"> | string
    descriptionUz?: StringFilter<"ShowCase"> | string
    descriptionEn?: StringFilter<"ShowCase"> | string
    image?: StringFilter<"ShowCase"> | string
    link?: StringFilter<"ShowCase"> | string
    type?: EnumShowCaseTypeFilter<"ShowCase"> | $Enums.ShowCaseType
    isActive?: BoolFilter<"ShowCase"> | boolean
    startDate?: DateTimeFilter<"ShowCase"> | Date | string
    endDate?: DateTimeFilter<"ShowCase"> | Date | string
    createdAt?: DateTimeFilter<"ShowCase"> | Date | string
    updatedAt?: DateTimeFilter<"ShowCase"> | Date | string
  }, "id">

  export type ShowCaseOrderByWithAggregationInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    descriptionRu?: SortOrder
    descriptionUz?: SortOrder
    descriptionEn?: SortOrder
    image?: SortOrder
    link?: SortOrder
    type?: SortOrder
    isActive?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ShowCaseCountOrderByAggregateInput
    _max?: ShowCaseMaxOrderByAggregateInput
    _min?: ShowCaseMinOrderByAggregateInput
  }

  export type ShowCaseScalarWhereWithAggregatesInput = {
    AND?: ShowCaseScalarWhereWithAggregatesInput | ShowCaseScalarWhereWithAggregatesInput[]
    OR?: ShowCaseScalarWhereWithAggregatesInput[]
    NOT?: ShowCaseScalarWhereWithAggregatesInput | ShowCaseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ShowCase"> | string
    nameRu?: StringWithAggregatesFilter<"ShowCase"> | string
    nameUz?: StringWithAggregatesFilter<"ShowCase"> | string
    nameEn?: StringWithAggregatesFilter<"ShowCase"> | string
    descriptionRu?: StringWithAggregatesFilter<"ShowCase"> | string
    descriptionUz?: StringWithAggregatesFilter<"ShowCase"> | string
    descriptionEn?: StringWithAggregatesFilter<"ShowCase"> | string
    image?: StringWithAggregatesFilter<"ShowCase"> | string
    link?: StringWithAggregatesFilter<"ShowCase"> | string
    type?: EnumShowCaseTypeWithAggregatesFilter<"ShowCase"> | $Enums.ShowCaseType
    isActive?: BoolWithAggregatesFilter<"ShowCase"> | boolean
    startDate?: DateTimeWithAggregatesFilter<"ShowCase"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"ShowCase"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"ShowCase"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ShowCase"> | Date | string
  }

  export type FAQWhereInput = {
    AND?: FAQWhereInput | FAQWhereInput[]
    OR?: FAQWhereInput[]
    NOT?: FAQWhereInput | FAQWhereInput[]
    id?: StringFilter<"FAQ"> | string
    questionUz?: StringFilter<"FAQ"> | string
    questionRu?: StringFilter<"FAQ"> | string
    questionEn?: StringFilter<"FAQ"> | string
    answerUz?: StringFilter<"FAQ"> | string
    answerRu?: StringFilter<"FAQ"> | string
    answerEn?: StringFilter<"FAQ"> | string
  }

  export type FAQOrderByWithRelationInput = {
    id?: SortOrder
    questionUz?: SortOrder
    questionRu?: SortOrder
    questionEn?: SortOrder
    answerUz?: SortOrder
    answerRu?: SortOrder
    answerEn?: SortOrder
  }

  export type FAQWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FAQWhereInput | FAQWhereInput[]
    OR?: FAQWhereInput[]
    NOT?: FAQWhereInput | FAQWhereInput[]
    questionUz?: StringFilter<"FAQ"> | string
    questionRu?: StringFilter<"FAQ"> | string
    questionEn?: StringFilter<"FAQ"> | string
    answerUz?: StringFilter<"FAQ"> | string
    answerRu?: StringFilter<"FAQ"> | string
    answerEn?: StringFilter<"FAQ"> | string
  }, "id">

  export type FAQOrderByWithAggregationInput = {
    id?: SortOrder
    questionUz?: SortOrder
    questionRu?: SortOrder
    questionEn?: SortOrder
    answerUz?: SortOrder
    answerRu?: SortOrder
    answerEn?: SortOrder
    _count?: FAQCountOrderByAggregateInput
    _max?: FAQMaxOrderByAggregateInput
    _min?: FAQMinOrderByAggregateInput
  }

  export type FAQScalarWhereWithAggregatesInput = {
    AND?: FAQScalarWhereWithAggregatesInput | FAQScalarWhereWithAggregatesInput[]
    OR?: FAQScalarWhereWithAggregatesInput[]
    NOT?: FAQScalarWhereWithAggregatesInput | FAQScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FAQ"> | string
    questionUz?: StringWithAggregatesFilter<"FAQ"> | string
    questionRu?: StringWithAggregatesFilter<"FAQ"> | string
    questionEn?: StringWithAggregatesFilter<"FAQ"> | string
    answerUz?: StringWithAggregatesFilter<"FAQ"> | string
    answerRu?: StringWithAggregatesFilter<"FAQ"> | string
    answerEn?: StringWithAggregatesFilter<"FAQ"> | string
  }

  export type ContactWhereInput = {
    AND?: ContactWhereInput | ContactWhereInput[]
    OR?: ContactWhereInput[]
    NOT?: ContactWhereInput | ContactWhereInput[]
    id?: StringFilter<"Contact"> | string
    nameRu?: StringFilter<"Contact"> | string
    nameUz?: StringFilter<"Contact"> | string
    nameEn?: StringFilter<"Contact"> | string
    phone?: StringFilter<"Contact"> | string
    address?: StringFilter<"Contact"> | string
    message?: StringFilter<"Contact"> | string
    email?: StringFilter<"Contact"> | string
  }

  export type ContactOrderByWithRelationInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    message?: SortOrder
    email?: SortOrder
  }

  export type ContactWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ContactWhereInput | ContactWhereInput[]
    OR?: ContactWhereInput[]
    NOT?: ContactWhereInput | ContactWhereInput[]
    nameRu?: StringFilter<"Contact"> | string
    nameUz?: StringFilter<"Contact"> | string
    nameEn?: StringFilter<"Contact"> | string
    phone?: StringFilter<"Contact"> | string
    address?: StringFilter<"Contact"> | string
    message?: StringFilter<"Contact"> | string
    email?: StringFilter<"Contact"> | string
  }, "id">

  export type ContactOrderByWithAggregationInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    message?: SortOrder
    email?: SortOrder
    _count?: ContactCountOrderByAggregateInput
    _max?: ContactMaxOrderByAggregateInput
    _min?: ContactMinOrderByAggregateInput
  }

  export type ContactScalarWhereWithAggregatesInput = {
    AND?: ContactScalarWhereWithAggregatesInput | ContactScalarWhereWithAggregatesInput[]
    OR?: ContactScalarWhereWithAggregatesInput[]
    NOT?: ContactScalarWhereWithAggregatesInput | ContactScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Contact"> | string
    nameRu?: StringWithAggregatesFilter<"Contact"> | string
    nameUz?: StringWithAggregatesFilter<"Contact"> | string
    nameEn?: StringWithAggregatesFilter<"Contact"> | string
    phone?: StringWithAggregatesFilter<"Contact"> | string
    address?: StringWithAggregatesFilter<"Contact"> | string
    message?: StringWithAggregatesFilter<"Contact"> | string
    email?: StringWithAggregatesFilter<"Contact"> | string
  }

  export type PartnerWhereInput = {
    AND?: PartnerWhereInput | PartnerWhereInput[]
    OR?: PartnerWhereInput[]
    NOT?: PartnerWhereInput | PartnerWhereInput[]
    id?: StringFilter<"Partner"> | string
    nameRu?: StringFilter<"Partner"> | string
    nameUz?: StringFilter<"Partner"> | string
    nameEn?: StringFilter<"Partner"> | string
    image?: StringFilter<"Partner"> | string
    phone?: StringFilter<"Partner"> | string
    address?: StringFilter<"Partner"> | string
    status?: BoolFilter<"Partner"> | boolean
    paymentTerms?: StringFilter<"Partner"> | string
    agreementStart?: DateTimeFilter<"Partner"> | Date | string
    agreementEnd?: DateTimeFilter<"Partner"> | Date | string
  }

  export type PartnerOrderByWithRelationInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    image?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    status?: SortOrder
    paymentTerms?: SortOrder
    agreementStart?: SortOrder
    agreementEnd?: SortOrder
  }

  export type PartnerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PartnerWhereInput | PartnerWhereInput[]
    OR?: PartnerWhereInput[]
    NOT?: PartnerWhereInput | PartnerWhereInput[]
    nameRu?: StringFilter<"Partner"> | string
    nameUz?: StringFilter<"Partner"> | string
    nameEn?: StringFilter<"Partner"> | string
    image?: StringFilter<"Partner"> | string
    phone?: StringFilter<"Partner"> | string
    address?: StringFilter<"Partner"> | string
    status?: BoolFilter<"Partner"> | boolean
    paymentTerms?: StringFilter<"Partner"> | string
    agreementStart?: DateTimeFilter<"Partner"> | Date | string
    agreementEnd?: DateTimeFilter<"Partner"> | Date | string
  }, "id">

  export type PartnerOrderByWithAggregationInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    image?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    status?: SortOrder
    paymentTerms?: SortOrder
    agreementStart?: SortOrder
    agreementEnd?: SortOrder
    _count?: PartnerCountOrderByAggregateInput
    _max?: PartnerMaxOrderByAggregateInput
    _min?: PartnerMinOrderByAggregateInput
  }

  export type PartnerScalarWhereWithAggregatesInput = {
    AND?: PartnerScalarWhereWithAggregatesInput | PartnerScalarWhereWithAggregatesInput[]
    OR?: PartnerScalarWhereWithAggregatesInput[]
    NOT?: PartnerScalarWhereWithAggregatesInput | PartnerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Partner"> | string
    nameRu?: StringWithAggregatesFilter<"Partner"> | string
    nameUz?: StringWithAggregatesFilter<"Partner"> | string
    nameEn?: StringWithAggregatesFilter<"Partner"> | string
    image?: StringWithAggregatesFilter<"Partner"> | string
    phone?: StringWithAggregatesFilter<"Partner"> | string
    address?: StringWithAggregatesFilter<"Partner"> | string
    status?: BoolWithAggregatesFilter<"Partner"> | boolean
    paymentTerms?: StringWithAggregatesFilter<"Partner"> | string
    agreementStart?: DateTimeWithAggregatesFilter<"Partner"> | Date | string
    agreementEnd?: DateTimeWithAggregatesFilter<"Partner"> | Date | string
  }

  export type ProductWhereInput = {
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    id?: StringFilter<"Product"> | string
    isActive?: BoolFilter<"Product"> | boolean
    nameRu?: StringFilter<"Product"> | string
    nameUz?: StringFilter<"Product"> | string
    nameEn?: StringFilter<"Product"> | string
    image?: StringFilter<"Product"> | string
    minWorkingHours?: StringFilter<"Product"> | string
    hourlyPrice?: IntFilter<"Product"> | number
    dailyPrice?: IntFilter<"Product"> | number
    baskets?: BasketListRelationFilter
    orderItems?: OrderItemListRelationFilter
    masterJobs?: MasterJobsListRelationFilter
    levels?: ProductLevelListRelationFilter
    tools?: ProductToolListRelationFilter
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    isActive?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    image?: SortOrder
    minWorkingHours?: SortOrder
    hourlyPrice?: SortOrder
    dailyPrice?: SortOrder
    baskets?: BasketOrderByRelationAggregateInput
    orderItems?: OrderItemOrderByRelationAggregateInput
    masterJobs?: MasterJobsOrderByRelationAggregateInput
    levels?: ProductLevelOrderByRelationAggregateInput
    tools?: ProductToolOrderByRelationAggregateInput
  }

  export type ProductWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    isActive?: BoolFilter<"Product"> | boolean
    nameRu?: StringFilter<"Product"> | string
    nameUz?: StringFilter<"Product"> | string
    nameEn?: StringFilter<"Product"> | string
    image?: StringFilter<"Product"> | string
    minWorkingHours?: StringFilter<"Product"> | string
    hourlyPrice?: IntFilter<"Product"> | number
    dailyPrice?: IntFilter<"Product"> | number
    baskets?: BasketListRelationFilter
    orderItems?: OrderItemListRelationFilter
    masterJobs?: MasterJobsListRelationFilter
    levels?: ProductLevelListRelationFilter
    tools?: ProductToolListRelationFilter
  }, "id">

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    isActive?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    image?: SortOrder
    minWorkingHours?: SortOrder
    hourlyPrice?: SortOrder
    dailyPrice?: SortOrder
    _count?: ProductCountOrderByAggregateInput
    _avg?: ProductAvgOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
    _sum?: ProductSumOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    OR?: ProductScalarWhereWithAggregatesInput[]
    NOT?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Product"> | string
    isActive?: BoolWithAggregatesFilter<"Product"> | boolean
    nameRu?: StringWithAggregatesFilter<"Product"> | string
    nameUz?: StringWithAggregatesFilter<"Product"> | string
    nameEn?: StringWithAggregatesFilter<"Product"> | string
    image?: StringWithAggregatesFilter<"Product"> | string
    minWorkingHours?: StringWithAggregatesFilter<"Product"> | string
    hourlyPrice?: IntWithAggregatesFilter<"Product"> | number
    dailyPrice?: IntWithAggregatesFilter<"Product"> | number
  }

  export type LevelWhereInput = {
    AND?: LevelWhereInput | LevelWhereInput[]
    OR?: LevelWhereInput[]
    NOT?: LevelWhereInput | LevelWhereInput[]
    id?: StringFilter<"Level"> | string
    nameRu?: StringFilter<"Level"> | string
    nameUz?: StringFilter<"Level"> | string
    nameEn?: StringFilter<"Level"> | string
    orderItems?: OrderItemListRelationFilter
    masterJobs?: MasterJobsListRelationFilter
    products?: ProductLevelListRelationFilter
    baskets?: BasketListRelationFilter
  }

  export type LevelOrderByWithRelationInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    orderItems?: OrderItemOrderByRelationAggregateInput
    masterJobs?: MasterJobsOrderByRelationAggregateInput
    products?: ProductLevelOrderByRelationAggregateInput
    baskets?: BasketOrderByRelationAggregateInput
  }

  export type LevelWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LevelWhereInput | LevelWhereInput[]
    OR?: LevelWhereInput[]
    NOT?: LevelWhereInput | LevelWhereInput[]
    nameRu?: StringFilter<"Level"> | string
    nameUz?: StringFilter<"Level"> | string
    nameEn?: StringFilter<"Level"> | string
    orderItems?: OrderItemListRelationFilter
    masterJobs?: MasterJobsListRelationFilter
    products?: ProductLevelListRelationFilter
    baskets?: BasketListRelationFilter
  }, "id">

  export type LevelOrderByWithAggregationInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    _count?: LevelCountOrderByAggregateInput
    _max?: LevelMaxOrderByAggregateInput
    _min?: LevelMinOrderByAggregateInput
  }

  export type LevelScalarWhereWithAggregatesInput = {
    AND?: LevelScalarWhereWithAggregatesInput | LevelScalarWhereWithAggregatesInput[]
    OR?: LevelScalarWhereWithAggregatesInput[]
    NOT?: LevelScalarWhereWithAggregatesInput | LevelScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Level"> | string
    nameRu?: StringWithAggregatesFilter<"Level"> | string
    nameUz?: StringWithAggregatesFilter<"Level"> | string
    nameEn?: StringWithAggregatesFilter<"Level"> | string
  }

  export type ToolWhereInput = {
    AND?: ToolWhereInput | ToolWhereInput[]
    OR?: ToolWhereInput[]
    NOT?: ToolWhereInput | ToolWhereInput[]
    id?: StringFilter<"Tool"> | string
    nameRu?: StringFilter<"Tool"> | string
    nameUz?: StringFilter<"Tool"> | string
    nameEn?: StringFilter<"Tool"> | string
    descriptionRu?: StringFilter<"Tool"> | string
    descriptionUz?: StringFilter<"Tool"> | string
    descriptionEn?: StringFilter<"Tool"> | string
    price?: IntFilter<"Tool"> | number
    quantity?: IntFilter<"Tool"> | number
    code?: StringNullableFilter<"Tool"> | string | null
    brandID?: StringFilter<"Tool"> | string
    capacityID?: StringFilter<"Tool"> | string
    sizeID?: StringFilter<"Tool"> | string
    image?: StringFilter<"Tool"> | string
    isActive?: BoolFilter<"Tool"> | boolean
    brand?: XOR<BrandScalarRelationFilter, BrandWhereInput>
    capacity?: XOR<CapacityScalarRelationFilter, CapacityWhereInput>
    size?: XOR<SizeScalarRelationFilter, SizeWhereInput>
    orderItems?: OrderItemListRelationFilter
    masterJobs?: MasterJobsListRelationFilter
    baskets?: BasketListRelationFilter
    products?: ProductToolListRelationFilter
  }

  export type ToolOrderByWithRelationInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    descriptionRu?: SortOrder
    descriptionUz?: SortOrder
    descriptionEn?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    code?: SortOrderInput | SortOrder
    brandID?: SortOrder
    capacityID?: SortOrder
    sizeID?: SortOrder
    image?: SortOrder
    isActive?: SortOrder
    brand?: BrandOrderByWithRelationInput
    capacity?: CapacityOrderByWithRelationInput
    size?: SizeOrderByWithRelationInput
    orderItems?: OrderItemOrderByRelationAggregateInput
    masterJobs?: MasterJobsOrderByRelationAggregateInput
    baskets?: BasketOrderByRelationAggregateInput
    products?: ProductToolOrderByRelationAggregateInput
  }

  export type ToolWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    AND?: ToolWhereInput | ToolWhereInput[]
    OR?: ToolWhereInput[]
    NOT?: ToolWhereInput | ToolWhereInput[]
    nameRu?: StringFilter<"Tool"> | string
    nameUz?: StringFilter<"Tool"> | string
    nameEn?: StringFilter<"Tool"> | string
    descriptionRu?: StringFilter<"Tool"> | string
    descriptionUz?: StringFilter<"Tool"> | string
    descriptionEn?: StringFilter<"Tool"> | string
    price?: IntFilter<"Tool"> | number
    quantity?: IntFilter<"Tool"> | number
    brandID?: StringFilter<"Tool"> | string
    capacityID?: StringFilter<"Tool"> | string
    sizeID?: StringFilter<"Tool"> | string
    image?: StringFilter<"Tool"> | string
    isActive?: BoolFilter<"Tool"> | boolean
    brand?: XOR<BrandScalarRelationFilter, BrandWhereInput>
    capacity?: XOR<CapacityScalarRelationFilter, CapacityWhereInput>
    size?: XOR<SizeScalarRelationFilter, SizeWhereInput>
    orderItems?: OrderItemListRelationFilter
    masterJobs?: MasterJobsListRelationFilter
    baskets?: BasketListRelationFilter
    products?: ProductToolListRelationFilter
  }, "id" | "code">

  export type ToolOrderByWithAggregationInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    descriptionRu?: SortOrder
    descriptionUz?: SortOrder
    descriptionEn?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    code?: SortOrderInput | SortOrder
    brandID?: SortOrder
    capacityID?: SortOrder
    sizeID?: SortOrder
    image?: SortOrder
    isActive?: SortOrder
    _count?: ToolCountOrderByAggregateInput
    _avg?: ToolAvgOrderByAggregateInput
    _max?: ToolMaxOrderByAggregateInput
    _min?: ToolMinOrderByAggregateInput
    _sum?: ToolSumOrderByAggregateInput
  }

  export type ToolScalarWhereWithAggregatesInput = {
    AND?: ToolScalarWhereWithAggregatesInput | ToolScalarWhereWithAggregatesInput[]
    OR?: ToolScalarWhereWithAggregatesInput[]
    NOT?: ToolScalarWhereWithAggregatesInput | ToolScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Tool"> | string
    nameRu?: StringWithAggregatesFilter<"Tool"> | string
    nameUz?: StringWithAggregatesFilter<"Tool"> | string
    nameEn?: StringWithAggregatesFilter<"Tool"> | string
    descriptionRu?: StringWithAggregatesFilter<"Tool"> | string
    descriptionUz?: StringWithAggregatesFilter<"Tool"> | string
    descriptionEn?: StringWithAggregatesFilter<"Tool"> | string
    price?: IntWithAggregatesFilter<"Tool"> | number
    quantity?: IntWithAggregatesFilter<"Tool"> | number
    code?: StringNullableWithAggregatesFilter<"Tool"> | string | null
    brandID?: StringWithAggregatesFilter<"Tool"> | string
    capacityID?: StringWithAggregatesFilter<"Tool"> | string
    sizeID?: StringWithAggregatesFilter<"Tool"> | string
    image?: StringWithAggregatesFilter<"Tool"> | string
    isActive?: BoolWithAggregatesFilter<"Tool"> | boolean
  }

  export type ProductLevelWhereInput = {
    AND?: ProductLevelWhereInput | ProductLevelWhereInput[]
    OR?: ProductLevelWhereInput[]
    NOT?: ProductLevelWhereInput | ProductLevelWhereInput[]
    id?: StringFilter<"ProductLevel"> | string
    productID?: StringFilter<"ProductLevel"> | string
    levelID?: StringFilter<"ProductLevel"> | string
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    level?: XOR<LevelScalarRelationFilter, LevelWhereInput>
  }

  export type ProductLevelOrderByWithRelationInput = {
    id?: SortOrder
    productID?: SortOrder
    levelID?: SortOrder
    product?: ProductOrderByWithRelationInput
    level?: LevelOrderByWithRelationInput
  }

  export type ProductLevelWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    productID_levelID?: ProductLevelProductIDLevelIDCompoundUniqueInput
    AND?: ProductLevelWhereInput | ProductLevelWhereInput[]
    OR?: ProductLevelWhereInput[]
    NOT?: ProductLevelWhereInput | ProductLevelWhereInput[]
    productID?: StringFilter<"ProductLevel"> | string
    levelID?: StringFilter<"ProductLevel"> | string
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    level?: XOR<LevelScalarRelationFilter, LevelWhereInput>
  }, "id" | "productID_levelID">

  export type ProductLevelOrderByWithAggregationInput = {
    id?: SortOrder
    productID?: SortOrder
    levelID?: SortOrder
    _count?: ProductLevelCountOrderByAggregateInput
    _max?: ProductLevelMaxOrderByAggregateInput
    _min?: ProductLevelMinOrderByAggregateInput
  }

  export type ProductLevelScalarWhereWithAggregatesInput = {
    AND?: ProductLevelScalarWhereWithAggregatesInput | ProductLevelScalarWhereWithAggregatesInput[]
    OR?: ProductLevelScalarWhereWithAggregatesInput[]
    NOT?: ProductLevelScalarWhereWithAggregatesInput | ProductLevelScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProductLevel"> | string
    productID?: StringWithAggregatesFilter<"ProductLevel"> | string
    levelID?: StringWithAggregatesFilter<"ProductLevel"> | string
  }

  export type ProductToolWhereInput = {
    AND?: ProductToolWhereInput | ProductToolWhereInput[]
    OR?: ProductToolWhereInput[]
    NOT?: ProductToolWhereInput | ProductToolWhereInput[]
    id?: StringFilter<"ProductTool"> | string
    productID?: StringFilter<"ProductTool"> | string
    toolID?: StringFilter<"ProductTool"> | string
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    tool?: XOR<ToolScalarRelationFilter, ToolWhereInput>
  }

  export type ProductToolOrderByWithRelationInput = {
    id?: SortOrder
    productID?: SortOrder
    toolID?: SortOrder
    product?: ProductOrderByWithRelationInput
    tool?: ToolOrderByWithRelationInput
  }

  export type ProductToolWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    productID_toolID?: ProductToolProductIDToolIDCompoundUniqueInput
    AND?: ProductToolWhereInput | ProductToolWhereInput[]
    OR?: ProductToolWhereInput[]
    NOT?: ProductToolWhereInput | ProductToolWhereInput[]
    productID?: StringFilter<"ProductTool"> | string
    toolID?: StringFilter<"ProductTool"> | string
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    tool?: XOR<ToolScalarRelationFilter, ToolWhereInput>
  }, "id" | "productID_toolID">

  export type ProductToolOrderByWithAggregationInput = {
    id?: SortOrder
    productID?: SortOrder
    toolID?: SortOrder
    _count?: ProductToolCountOrderByAggregateInput
    _max?: ProductToolMaxOrderByAggregateInput
    _min?: ProductToolMinOrderByAggregateInput
  }

  export type ProductToolScalarWhereWithAggregatesInput = {
    AND?: ProductToolScalarWhereWithAggregatesInput | ProductToolScalarWhereWithAggregatesInput[]
    OR?: ProductToolScalarWhereWithAggregatesInput[]
    NOT?: ProductToolScalarWhereWithAggregatesInput | ProductToolScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProductTool"> | string
    productID?: StringWithAggregatesFilter<"ProductTool"> | string
    toolID?: StringWithAggregatesFilter<"ProductTool"> | string
  }

  export type UserCreateInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    email: string
    password: string
    phone: string
    image: string
    role: $Enums.UserRole
    status: $Enums.UserStatus
    location: string
    passportSeries?: string | null
    inn?: string | null
    region?: RegionCreateNestedOneWithoutUsersInput
    baskets?: BasketCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    email: string
    password: string
    phone: string
    image: string
    role: $Enums.UserRole
    status: $Enums.UserStatus
    regionID?: string | null
    location: string
    passportSeries?: string | null
    inn?: string | null
    baskets?: BasketUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    location?: StringFieldUpdateOperationsInput | string
    passportSeries?: NullableStringFieldUpdateOperationsInput | string | null
    inn?: NullableStringFieldUpdateOperationsInput | string | null
    region?: RegionUpdateOneWithoutUsersNestedInput
    baskets?: BasketUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    regionID?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    passportSeries?: NullableStringFieldUpdateOperationsInput | string | null
    inn?: NullableStringFieldUpdateOperationsInput | string | null
    baskets?: BasketUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    email: string
    password: string
    phone: string
    image: string
    role: $Enums.UserRole
    status: $Enums.UserStatus
    regionID?: string | null
    location: string
    passportSeries?: string | null
    inn?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    location?: StringFieldUpdateOperationsInput | string
    passportSeries?: NullableStringFieldUpdateOperationsInput | string | null
    inn?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    regionID?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    passportSeries?: NullableStringFieldUpdateOperationsInput | string | null
    inn?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RegionCreateInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    users?: UserCreateNestedManyWithoutRegionInput
  }

  export type RegionUncheckedCreateInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    users?: UserUncheckedCreateNestedManyWithoutRegionInput
  }

  export type RegionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutRegionNestedInput
  }

  export type RegionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutRegionNestedInput
  }

  export type RegionCreateManyInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
  }

  export type RegionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
  }

  export type RegionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
  }

  export type BasketCreateInput = {
    id?: string
    timeUnit: number
    count?: number | null
    workingHours: number
    totalPrice?: number | null
    user: UserCreateNestedOneWithoutBasketsInput
    product: ProductCreateNestedOneWithoutBasketsInput
    tool: ToolCreateNestedOneWithoutBasketsInput
    level: LevelCreateNestedOneWithoutBasketsInput
  }

  export type BasketUncheckedCreateInput = {
    id?: string
    userID: string
    productID: string
    toolID: string
    levelID: string
    timeUnit: number
    count?: number | null
    workingHours: number
    totalPrice?: number | null
  }

  export type BasketUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    timeUnit?: IntFieldUpdateOperationsInput | number
    count?: NullableIntFieldUpdateOperationsInput | number | null
    workingHours?: IntFieldUpdateOperationsInput | number
    totalPrice?: NullableIntFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutBasketsNestedInput
    product?: ProductUpdateOneRequiredWithoutBasketsNestedInput
    tool?: ToolUpdateOneRequiredWithoutBasketsNestedInput
    level?: LevelUpdateOneRequiredWithoutBasketsNestedInput
  }

  export type BasketUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userID?: StringFieldUpdateOperationsInput | string
    productID?: StringFieldUpdateOperationsInput | string
    toolID?: StringFieldUpdateOperationsInput | string
    levelID?: StringFieldUpdateOperationsInput | string
    timeUnit?: IntFieldUpdateOperationsInput | number
    count?: NullableIntFieldUpdateOperationsInput | number | null
    workingHours?: IntFieldUpdateOperationsInput | number
    totalPrice?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type BasketCreateManyInput = {
    id?: string
    userID: string
    productID: string
    toolID: string
    levelID: string
    timeUnit: number
    count?: number | null
    workingHours: number
    totalPrice?: number | null
  }

  export type BasketUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    timeUnit?: IntFieldUpdateOperationsInput | number
    count?: NullableIntFieldUpdateOperationsInput | number | null
    workingHours?: IntFieldUpdateOperationsInput | number
    totalPrice?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type BasketUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userID?: StringFieldUpdateOperationsInput | string
    productID?: StringFieldUpdateOperationsInput | string
    toolID?: StringFieldUpdateOperationsInput | string
    levelID?: StringFieldUpdateOperationsInput | string
    timeUnit?: IntFieldUpdateOperationsInput | number
    count?: NullableIntFieldUpdateOperationsInput | number | null
    workingHours?: IntFieldUpdateOperationsInput | number
    totalPrice?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type OrderCreateInput = {
    id?: string
    locationLat: string
    locationLong: string
    address: string
    orderDate?: Date | string
    deliveryDate: Date | string
    paymentType: $Enums.PaymentType
    withDelivery: boolean
    status: $Enums.OrderStatus
    commentToDelivery?: string | null
    items?: OrderItemCreateNestedManyWithoutOrderInput
    comments?: CommentCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateInput = {
    id?: string
    locationLat: string
    locationLong: string
    address: string
    orderDate?: Date | string
    deliveryDate: Date | string
    paymentType: $Enums.PaymentType
    withDelivery: boolean
    status: $Enums.OrderStatus
    commentToDelivery?: string | null
    items?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
    comments?: CommentUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    locationLat?: StringFieldUpdateOperationsInput | string
    locationLong?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    commentToDelivery?: NullableStringFieldUpdateOperationsInput | string | null
    items?: OrderItemUpdateManyWithoutOrderNestedInput
    comments?: CommentUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    locationLat?: StringFieldUpdateOperationsInput | string
    locationLong?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    commentToDelivery?: NullableStringFieldUpdateOperationsInput | string | null
    items?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
    comments?: CommentUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderCreateManyInput = {
    id?: string
    locationLat: string
    locationLong: string
    address: string
    orderDate?: Date | string
    deliveryDate: Date | string
    paymentType: $Enums.PaymentType
    withDelivery: boolean
    status: $Enums.OrderStatus
    commentToDelivery?: string | null
  }

  export type OrderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    locationLat?: StringFieldUpdateOperationsInput | string
    locationLong?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    commentToDelivery?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    locationLat?: StringFieldUpdateOperationsInput | string
    locationLong?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    commentToDelivery?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderItemCreateInput = {
    id?: string
    timeUnit: number
    count: number
    workingHours: number
    totalPrice?: number | null
    order: OrderCreateNestedOneWithoutItemsInput
    product: ProductCreateNestedOneWithoutOrderItemsInput
    tool: ToolCreateNestedOneWithoutOrderItemsInput
    level: LevelCreateNestedOneWithoutOrderItemsInput
  }

  export type OrderItemUncheckedCreateInput = {
    id?: string
    orderID: string
    productID: string
    toolID: string
    levelID: string
    timeUnit: number
    count: number
    workingHours: number
    totalPrice?: number | null
  }

  export type OrderItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    timeUnit?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    workingHours?: IntFieldUpdateOperationsInput | number
    totalPrice?: NullableIntFieldUpdateOperationsInput | number | null
    order?: OrderUpdateOneRequiredWithoutItemsNestedInput
    product?: ProductUpdateOneRequiredWithoutOrderItemsNestedInput
    tool?: ToolUpdateOneRequiredWithoutOrderItemsNestedInput
    level?: LevelUpdateOneRequiredWithoutOrderItemsNestedInput
  }

  export type OrderItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderID?: StringFieldUpdateOperationsInput | string
    productID?: StringFieldUpdateOperationsInput | string
    toolID?: StringFieldUpdateOperationsInput | string
    levelID?: StringFieldUpdateOperationsInput | string
    timeUnit?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    workingHours?: IntFieldUpdateOperationsInput | number
    totalPrice?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type OrderItemCreateManyInput = {
    id?: string
    orderID: string
    productID: string
    toolID: string
    levelID: string
    timeUnit: number
    count: number
    workingHours: number
    totalPrice?: number | null
  }

  export type OrderItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    timeUnit?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    workingHours?: IntFieldUpdateOperationsInput | number
    totalPrice?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type OrderItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderID?: StringFieldUpdateOperationsInput | string
    productID?: StringFieldUpdateOperationsInput | string
    toolID?: StringFieldUpdateOperationsInput | string
    levelID?: StringFieldUpdateOperationsInput | string
    timeUnit?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    workingHours?: IntFieldUpdateOperationsInput | number
    totalPrice?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type BrandCreateInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    tools?: ToolCreateNestedManyWithoutBrandInput
  }

  export type BrandUncheckedCreateInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    tools?: ToolUncheckedCreateNestedManyWithoutBrandInput
  }

  export type BrandUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    tools?: ToolUpdateManyWithoutBrandNestedInput
  }

  export type BrandUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    tools?: ToolUncheckedUpdateManyWithoutBrandNestedInput
  }

  export type BrandCreateManyInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
  }

  export type BrandUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
  }

  export type BrandUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
  }

  export type CapacityCreateInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    tools?: ToolCreateNestedManyWithoutCapacityInput
  }

  export type CapacityUncheckedCreateInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    tools?: ToolUncheckedCreateNestedManyWithoutCapacityInput
  }

  export type CapacityUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    tools?: ToolUpdateManyWithoutCapacityNestedInput
  }

  export type CapacityUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    tools?: ToolUncheckedUpdateManyWithoutCapacityNestedInput
  }

  export type CapacityCreateManyInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
  }

  export type CapacityUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
  }

  export type CapacityUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
  }

  export type SizeCreateInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    tools?: ToolCreateNestedManyWithoutSizeInput
  }

  export type SizeUncheckedCreateInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    tools?: ToolUncheckedCreateNestedManyWithoutSizeInput
  }

  export type SizeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    tools?: ToolUpdateManyWithoutSizeNestedInput
  }

  export type SizeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    tools?: ToolUncheckedUpdateManyWithoutSizeNestedInput
  }

  export type SizeCreateManyInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
  }

  export type SizeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
  }

  export type SizeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
  }

  export type CommentCreateInput = {
    id?: string
    message: string
    star: number
    master: MasterCreateNestedOneWithoutCommentsInput
    order: OrderCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateInput = {
    id?: string
    message: string
    star: number
    masterID: string
    orderID: string
  }

  export type CommentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    star?: IntFieldUpdateOperationsInput | number
    master?: MasterUpdateOneRequiredWithoutCommentsNestedInput
    order?: OrderUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    star?: IntFieldUpdateOperationsInput | number
    masterID?: StringFieldUpdateOperationsInput | string
    orderID?: StringFieldUpdateOperationsInput | string
  }

  export type CommentCreateManyInput = {
    id?: string
    message: string
    star: number
    masterID: string
    orderID: string
  }

  export type CommentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    star?: IntFieldUpdateOperationsInput | number
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    star?: IntFieldUpdateOperationsInput | number
    masterID?: StringFieldUpdateOperationsInput | string
    orderID?: StringFieldUpdateOperationsInput | string
  }

  export type MasterCreateInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    isActive: boolean
    phone: string
    dob: string
    image: string
    passportImage: string
    rating?: number | null
    masterJobs?: MasterJobsCreateNestedManyWithoutMasterInput
    comments?: CommentCreateNestedManyWithoutMasterInput
  }

  export type MasterUncheckedCreateInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    isActive: boolean
    phone: string
    dob: string
    image: string
    passportImage: string
    rating?: number | null
    masterJobs?: MasterJobsUncheckedCreateNestedManyWithoutMasterInput
    comments?: CommentUncheckedCreateNestedManyWithoutMasterInput
  }

  export type MasterUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    phone?: StringFieldUpdateOperationsInput | string
    dob?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    passportImage?: StringFieldUpdateOperationsInput | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    masterJobs?: MasterJobsUpdateManyWithoutMasterNestedInput
    comments?: CommentUpdateManyWithoutMasterNestedInput
  }

  export type MasterUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    phone?: StringFieldUpdateOperationsInput | string
    dob?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    passportImage?: StringFieldUpdateOperationsInput | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    masterJobs?: MasterJobsUncheckedUpdateManyWithoutMasterNestedInput
    comments?: CommentUncheckedUpdateManyWithoutMasterNestedInput
  }

  export type MasterCreateManyInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    isActive: boolean
    phone: string
    dob: string
    image: string
    passportImage: string
    rating?: number | null
  }

  export type MasterUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    phone?: StringFieldUpdateOperationsInput | string
    dob?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    passportImage?: StringFieldUpdateOperationsInput | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MasterUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    phone?: StringFieldUpdateOperationsInput | string
    dob?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    passportImage?: StringFieldUpdateOperationsInput | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MasterJobsCreateInput = {
    id?: string
    minWorkingHour: number
    workingHours: number
    priceHourly: number
    priceDaily: number
    experience: string
    tool: ToolCreateNestedOneWithoutMasterJobsInput
    product: ProductCreateNestedOneWithoutMasterJobsInput
    level: LevelCreateNestedOneWithoutMasterJobsInput
    master: MasterCreateNestedOneWithoutMasterJobsInput
  }

  export type MasterJobsUncheckedCreateInput = {
    id?: string
    toolID: string
    productID: string
    minWorkingHour: number
    workingHours: number
    levelID: string
    priceHourly: number
    priceDaily: number
    experience: string
    masterID: string
  }

  export type MasterJobsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    minWorkingHour?: IntFieldUpdateOperationsInput | number
    workingHours?: IntFieldUpdateOperationsInput | number
    priceHourly?: IntFieldUpdateOperationsInput | number
    priceDaily?: IntFieldUpdateOperationsInput | number
    experience?: StringFieldUpdateOperationsInput | string
    tool?: ToolUpdateOneRequiredWithoutMasterJobsNestedInput
    product?: ProductUpdateOneRequiredWithoutMasterJobsNestedInput
    level?: LevelUpdateOneRequiredWithoutMasterJobsNestedInput
    master?: MasterUpdateOneRequiredWithoutMasterJobsNestedInput
  }

  export type MasterJobsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    toolID?: StringFieldUpdateOperationsInput | string
    productID?: StringFieldUpdateOperationsInput | string
    minWorkingHour?: IntFieldUpdateOperationsInput | number
    workingHours?: IntFieldUpdateOperationsInput | number
    levelID?: StringFieldUpdateOperationsInput | string
    priceHourly?: IntFieldUpdateOperationsInput | number
    priceDaily?: IntFieldUpdateOperationsInput | number
    experience?: StringFieldUpdateOperationsInput | string
    masterID?: StringFieldUpdateOperationsInput | string
  }

  export type MasterJobsCreateManyInput = {
    id?: string
    toolID: string
    productID: string
    minWorkingHour: number
    workingHours: number
    levelID: string
    priceHourly: number
    priceDaily: number
    experience: string
    masterID: string
  }

  export type MasterJobsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    minWorkingHour?: IntFieldUpdateOperationsInput | number
    workingHours?: IntFieldUpdateOperationsInput | number
    priceHourly?: IntFieldUpdateOperationsInput | number
    priceDaily?: IntFieldUpdateOperationsInput | number
    experience?: StringFieldUpdateOperationsInput | string
  }

  export type MasterJobsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    toolID?: StringFieldUpdateOperationsInput | string
    productID?: StringFieldUpdateOperationsInput | string
    minWorkingHour?: IntFieldUpdateOperationsInput | number
    workingHours?: IntFieldUpdateOperationsInput | number
    levelID?: StringFieldUpdateOperationsInput | string
    priceHourly?: IntFieldUpdateOperationsInput | number
    priceDaily?: IntFieldUpdateOperationsInput | number
    experience?: StringFieldUpdateOperationsInput | string
    masterID?: StringFieldUpdateOperationsInput | string
  }

  export type GeneralInfoCreateInput = {
    id?: string
    email: string
    link: string
    location: string
    phone: string
  }

  export type GeneralInfoUncheckedCreateInput = {
    id?: string
    email: string
    link: string
    location: string
    phone: string
  }

  export type GeneralInfoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type GeneralInfoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type GeneralInfoCreateManyInput = {
    id?: string
    email: string
    link: string
    location: string
    phone: string
  }

  export type GeneralInfoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type GeneralInfoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type ShowCaseCreateInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    descriptionRu: string
    descriptionUz: string
    descriptionEn: string
    image: string
    link: string
    type: $Enums.ShowCaseType
    isActive: boolean
    startDate?: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShowCaseUncheckedCreateInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    descriptionRu: string
    descriptionUz: string
    descriptionEn: string
    image: string
    link: string
    type: $Enums.ShowCaseType
    isActive: boolean
    startDate?: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShowCaseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    descriptionRu?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionEn?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    type?: EnumShowCaseTypeFieldUpdateOperationsInput | $Enums.ShowCaseType
    isActive?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShowCaseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    descriptionRu?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionEn?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    type?: EnumShowCaseTypeFieldUpdateOperationsInput | $Enums.ShowCaseType
    isActive?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShowCaseCreateManyInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    descriptionRu: string
    descriptionUz: string
    descriptionEn: string
    image: string
    link: string
    type: $Enums.ShowCaseType
    isActive: boolean
    startDate?: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShowCaseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    descriptionRu?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionEn?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    type?: EnumShowCaseTypeFieldUpdateOperationsInput | $Enums.ShowCaseType
    isActive?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShowCaseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    descriptionRu?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionEn?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    type?: EnumShowCaseTypeFieldUpdateOperationsInput | $Enums.ShowCaseType
    isActive?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FAQCreateInput = {
    id?: string
    questionUz: string
    questionRu: string
    questionEn: string
    answerUz: string
    answerRu: string
    answerEn: string
  }

  export type FAQUncheckedCreateInput = {
    id?: string
    questionUz: string
    questionRu: string
    questionEn: string
    answerUz: string
    answerRu: string
    answerEn: string
  }

  export type FAQUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionUz?: StringFieldUpdateOperationsInput | string
    questionRu?: StringFieldUpdateOperationsInput | string
    questionEn?: StringFieldUpdateOperationsInput | string
    answerUz?: StringFieldUpdateOperationsInput | string
    answerRu?: StringFieldUpdateOperationsInput | string
    answerEn?: StringFieldUpdateOperationsInput | string
  }

  export type FAQUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionUz?: StringFieldUpdateOperationsInput | string
    questionRu?: StringFieldUpdateOperationsInput | string
    questionEn?: StringFieldUpdateOperationsInput | string
    answerUz?: StringFieldUpdateOperationsInput | string
    answerRu?: StringFieldUpdateOperationsInput | string
    answerEn?: StringFieldUpdateOperationsInput | string
  }

  export type FAQCreateManyInput = {
    id?: string
    questionUz: string
    questionRu: string
    questionEn: string
    answerUz: string
    answerRu: string
    answerEn: string
  }

  export type FAQUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionUz?: StringFieldUpdateOperationsInput | string
    questionRu?: StringFieldUpdateOperationsInput | string
    questionEn?: StringFieldUpdateOperationsInput | string
    answerUz?: StringFieldUpdateOperationsInput | string
    answerRu?: StringFieldUpdateOperationsInput | string
    answerEn?: StringFieldUpdateOperationsInput | string
  }

  export type FAQUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionUz?: StringFieldUpdateOperationsInput | string
    questionRu?: StringFieldUpdateOperationsInput | string
    questionEn?: StringFieldUpdateOperationsInput | string
    answerUz?: StringFieldUpdateOperationsInput | string
    answerRu?: StringFieldUpdateOperationsInput | string
    answerEn?: StringFieldUpdateOperationsInput | string
  }

  export type ContactCreateInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    phone: string
    address: string
    message: string
    email: string
  }

  export type ContactUncheckedCreateInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    phone: string
    address: string
    message: string
    email: string
  }

  export type ContactUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type ContactUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type ContactCreateManyInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    phone: string
    address: string
    message: string
    email: string
  }

  export type ContactUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type ContactUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type PartnerCreateInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    image: string
    phone: string
    address: string
    status: boolean
    paymentTerms: string
    agreementStart?: Date | string
    agreementEnd: Date | string
  }

  export type PartnerUncheckedCreateInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    image: string
    phone: string
    address: string
    status: boolean
    paymentTerms: string
    agreementStart?: Date | string
    agreementEnd: Date | string
  }

  export type PartnerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    paymentTerms?: StringFieldUpdateOperationsInput | string
    agreementStart?: DateTimeFieldUpdateOperationsInput | Date | string
    agreementEnd?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartnerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    paymentTerms?: StringFieldUpdateOperationsInput | string
    agreementStart?: DateTimeFieldUpdateOperationsInput | Date | string
    agreementEnd?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartnerCreateManyInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    image: string
    phone: string
    address: string
    status: boolean
    paymentTerms: string
    agreementStart?: Date | string
    agreementEnd: Date | string
  }

  export type PartnerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    paymentTerms?: StringFieldUpdateOperationsInput | string
    agreementStart?: DateTimeFieldUpdateOperationsInput | Date | string
    agreementEnd?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartnerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    paymentTerms?: StringFieldUpdateOperationsInput | string
    agreementStart?: DateTimeFieldUpdateOperationsInput | Date | string
    agreementEnd?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductCreateInput = {
    id?: string
    isActive: boolean
    nameRu: string
    nameUz: string
    nameEn: string
    image: string
    minWorkingHours: string
    hourlyPrice: number
    dailyPrice: number
    baskets?: BasketCreateNestedManyWithoutProductInput
    orderItems?: OrderItemCreateNestedManyWithoutProductInput
    masterJobs?: MasterJobsCreateNestedManyWithoutProductInput
    levels?: ProductLevelCreateNestedManyWithoutProductInput
    tools?: ProductToolCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateInput = {
    id?: string
    isActive: boolean
    nameRu: string
    nameUz: string
    nameEn: string
    image: string
    minWorkingHours: string
    hourlyPrice: number
    dailyPrice: number
    baskets?: BasketUncheckedCreateNestedManyWithoutProductInput
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutProductInput
    masterJobs?: MasterJobsUncheckedCreateNestedManyWithoutProductInput
    levels?: ProductLevelUncheckedCreateNestedManyWithoutProductInput
    tools?: ProductToolUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    minWorkingHours?: StringFieldUpdateOperationsInput | string
    hourlyPrice?: IntFieldUpdateOperationsInput | number
    dailyPrice?: IntFieldUpdateOperationsInput | number
    baskets?: BasketUpdateManyWithoutProductNestedInput
    orderItems?: OrderItemUpdateManyWithoutProductNestedInput
    masterJobs?: MasterJobsUpdateManyWithoutProductNestedInput
    levels?: ProductLevelUpdateManyWithoutProductNestedInput
    tools?: ProductToolUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    minWorkingHours?: StringFieldUpdateOperationsInput | string
    hourlyPrice?: IntFieldUpdateOperationsInput | number
    dailyPrice?: IntFieldUpdateOperationsInput | number
    baskets?: BasketUncheckedUpdateManyWithoutProductNestedInput
    orderItems?: OrderItemUncheckedUpdateManyWithoutProductNestedInput
    masterJobs?: MasterJobsUncheckedUpdateManyWithoutProductNestedInput
    levels?: ProductLevelUncheckedUpdateManyWithoutProductNestedInput
    tools?: ProductToolUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateManyInput = {
    id?: string
    isActive: boolean
    nameRu: string
    nameUz: string
    nameEn: string
    image: string
    minWorkingHours: string
    hourlyPrice: number
    dailyPrice: number
  }

  export type ProductUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    minWorkingHours?: StringFieldUpdateOperationsInput | string
    hourlyPrice?: IntFieldUpdateOperationsInput | number
    dailyPrice?: IntFieldUpdateOperationsInput | number
  }

  export type ProductUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    minWorkingHours?: StringFieldUpdateOperationsInput | string
    hourlyPrice?: IntFieldUpdateOperationsInput | number
    dailyPrice?: IntFieldUpdateOperationsInput | number
  }

  export type LevelCreateInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    orderItems?: OrderItemCreateNestedManyWithoutLevelInput
    masterJobs?: MasterJobsCreateNestedManyWithoutLevelInput
    products?: ProductLevelCreateNestedManyWithoutLevelInput
    baskets?: BasketCreateNestedManyWithoutLevelInput
  }

  export type LevelUncheckedCreateInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutLevelInput
    masterJobs?: MasterJobsUncheckedCreateNestedManyWithoutLevelInput
    products?: ProductLevelUncheckedCreateNestedManyWithoutLevelInput
    baskets?: BasketUncheckedCreateNestedManyWithoutLevelInput
  }

  export type LevelUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    orderItems?: OrderItemUpdateManyWithoutLevelNestedInput
    masterJobs?: MasterJobsUpdateManyWithoutLevelNestedInput
    products?: ProductLevelUpdateManyWithoutLevelNestedInput
    baskets?: BasketUpdateManyWithoutLevelNestedInput
  }

  export type LevelUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    orderItems?: OrderItemUncheckedUpdateManyWithoutLevelNestedInput
    masterJobs?: MasterJobsUncheckedUpdateManyWithoutLevelNestedInput
    products?: ProductLevelUncheckedUpdateManyWithoutLevelNestedInput
    baskets?: BasketUncheckedUpdateManyWithoutLevelNestedInput
  }

  export type LevelCreateManyInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
  }

  export type LevelUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
  }

  export type LevelUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
  }

  export type ToolCreateInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    descriptionRu: string
    descriptionUz: string
    descriptionEn: string
    price: number
    quantity: number
    code?: string | null
    image: string
    isActive: boolean
    brand: BrandCreateNestedOneWithoutToolsInput
    capacity: CapacityCreateNestedOneWithoutToolsInput
    size: SizeCreateNestedOneWithoutToolsInput
    orderItems?: OrderItemCreateNestedManyWithoutToolInput
    masterJobs?: MasterJobsCreateNestedManyWithoutToolInput
    baskets?: BasketCreateNestedManyWithoutToolInput
    products?: ProductToolCreateNestedManyWithoutToolInput
  }

  export type ToolUncheckedCreateInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    descriptionRu: string
    descriptionUz: string
    descriptionEn: string
    price: number
    quantity: number
    code?: string | null
    brandID: string
    capacityID: string
    sizeID: string
    image: string
    isActive: boolean
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutToolInput
    masterJobs?: MasterJobsUncheckedCreateNestedManyWithoutToolInput
    baskets?: BasketUncheckedCreateNestedManyWithoutToolInput
    products?: ProductToolUncheckedCreateNestedManyWithoutToolInput
  }

  export type ToolUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    descriptionRu?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionEn?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: NullableStringFieldUpdateOperationsInput | string | null
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    brand?: BrandUpdateOneRequiredWithoutToolsNestedInput
    capacity?: CapacityUpdateOneRequiredWithoutToolsNestedInput
    size?: SizeUpdateOneRequiredWithoutToolsNestedInput
    orderItems?: OrderItemUpdateManyWithoutToolNestedInput
    masterJobs?: MasterJobsUpdateManyWithoutToolNestedInput
    baskets?: BasketUpdateManyWithoutToolNestedInput
    products?: ProductToolUpdateManyWithoutToolNestedInput
  }

  export type ToolUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    descriptionRu?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionEn?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: NullableStringFieldUpdateOperationsInput | string | null
    brandID?: StringFieldUpdateOperationsInput | string
    capacityID?: StringFieldUpdateOperationsInput | string
    sizeID?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    orderItems?: OrderItemUncheckedUpdateManyWithoutToolNestedInput
    masterJobs?: MasterJobsUncheckedUpdateManyWithoutToolNestedInput
    baskets?: BasketUncheckedUpdateManyWithoutToolNestedInput
    products?: ProductToolUncheckedUpdateManyWithoutToolNestedInput
  }

  export type ToolCreateManyInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    descriptionRu: string
    descriptionUz: string
    descriptionEn: string
    price: number
    quantity: number
    code?: string | null
    brandID: string
    capacityID: string
    sizeID: string
    image: string
    isActive: boolean
  }

  export type ToolUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    descriptionRu?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionEn?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: NullableStringFieldUpdateOperationsInput | string | null
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ToolUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    descriptionRu?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionEn?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: NullableStringFieldUpdateOperationsInput | string | null
    brandID?: StringFieldUpdateOperationsInput | string
    capacityID?: StringFieldUpdateOperationsInput | string
    sizeID?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProductLevelCreateInput = {
    id?: string
    product: ProductCreateNestedOneWithoutLevelsInput
    level: LevelCreateNestedOneWithoutProductsInput
  }

  export type ProductLevelUncheckedCreateInput = {
    id?: string
    productID: string
    levelID: string
  }

  export type ProductLevelUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    product?: ProductUpdateOneRequiredWithoutLevelsNestedInput
    level?: LevelUpdateOneRequiredWithoutProductsNestedInput
  }

  export type ProductLevelUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productID?: StringFieldUpdateOperationsInput | string
    levelID?: StringFieldUpdateOperationsInput | string
  }

  export type ProductLevelCreateManyInput = {
    id?: string
    productID: string
    levelID: string
  }

  export type ProductLevelUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type ProductLevelUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    productID?: StringFieldUpdateOperationsInput | string
    levelID?: StringFieldUpdateOperationsInput | string
  }

  export type ProductToolCreateInput = {
    id?: string
    product: ProductCreateNestedOneWithoutToolsInput
    tool: ToolCreateNestedOneWithoutProductsInput
  }

  export type ProductToolUncheckedCreateInput = {
    id?: string
    productID: string
    toolID: string
  }

  export type ProductToolUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    product?: ProductUpdateOneRequiredWithoutToolsNestedInput
    tool?: ToolUpdateOneRequiredWithoutProductsNestedInput
  }

  export type ProductToolUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productID?: StringFieldUpdateOperationsInput | string
    toolID?: StringFieldUpdateOperationsInput | string
  }

  export type ProductToolCreateManyInput = {
    id?: string
    productID: string
    toolID: string
  }

  export type ProductToolUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type ProductToolUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    productID?: StringFieldUpdateOperationsInput | string
    toolID?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type EnumUserStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusFilter<$PrismaModel> | $Enums.UserStatus
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type RegionNullableScalarRelationFilter = {
    is?: RegionWhereInput | null
    isNot?: RegionWhereInput | null
  }

  export type BasketListRelationFilter = {
    every?: BasketWhereInput
    some?: BasketWhereInput
    none?: BasketWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type BasketOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone?: SortOrder
    image?: SortOrder
    role?: SortOrder
    status?: SortOrder
    regionID?: SortOrder
    location?: SortOrder
    passportSeries?: SortOrder
    inn?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone?: SortOrder
    image?: SortOrder
    role?: SortOrder
    status?: SortOrder
    regionID?: SortOrder
    location?: SortOrder
    passportSeries?: SortOrder
    inn?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone?: SortOrder
    image?: SortOrder
    role?: SortOrder
    status?: SortOrder
    regionID?: SortOrder
    location?: SortOrder
    passportSeries?: SortOrder
    inn?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type EnumUserStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusWithAggregatesFilter<$PrismaModel> | $Enums.UserStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserStatusFilter<$PrismaModel>
    _max?: NestedEnumUserStatusFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RegionCountOrderByAggregateInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
  }

  export type RegionMaxOrderByAggregateInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
  }

  export type RegionMinOrderByAggregateInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ProductScalarRelationFilter = {
    is?: ProductWhereInput
    isNot?: ProductWhereInput
  }

  export type ToolScalarRelationFilter = {
    is?: ToolWhereInput
    isNot?: ToolWhereInput
  }

  export type LevelScalarRelationFilter = {
    is?: LevelWhereInput
    isNot?: LevelWhereInput
  }

  export type BasketCountOrderByAggregateInput = {
    id?: SortOrder
    userID?: SortOrder
    productID?: SortOrder
    toolID?: SortOrder
    levelID?: SortOrder
    timeUnit?: SortOrder
    count?: SortOrder
    workingHours?: SortOrder
    totalPrice?: SortOrder
  }

  export type BasketAvgOrderByAggregateInput = {
    timeUnit?: SortOrder
    count?: SortOrder
    workingHours?: SortOrder
    totalPrice?: SortOrder
  }

  export type BasketMaxOrderByAggregateInput = {
    id?: SortOrder
    userID?: SortOrder
    productID?: SortOrder
    toolID?: SortOrder
    levelID?: SortOrder
    timeUnit?: SortOrder
    count?: SortOrder
    workingHours?: SortOrder
    totalPrice?: SortOrder
  }

  export type BasketMinOrderByAggregateInput = {
    id?: SortOrder
    userID?: SortOrder
    productID?: SortOrder
    toolID?: SortOrder
    levelID?: SortOrder
    timeUnit?: SortOrder
    count?: SortOrder
    workingHours?: SortOrder
    totalPrice?: SortOrder
  }

  export type BasketSumOrderByAggregateInput = {
    timeUnit?: SortOrder
    count?: SortOrder
    workingHours?: SortOrder
    totalPrice?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EnumPaymentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeFilter<$PrismaModel> | $Enums.PaymentType
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusFilter<$PrismaModel> | $Enums.OrderStatus
  }

  export type OrderItemListRelationFilter = {
    every?: OrderItemWhereInput
    some?: OrderItemWhereInput
    none?: OrderItemWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type OrderItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrderCountOrderByAggregateInput = {
    id?: SortOrder
    locationLat?: SortOrder
    locationLong?: SortOrder
    address?: SortOrder
    orderDate?: SortOrder
    deliveryDate?: SortOrder
    paymentType?: SortOrder
    withDelivery?: SortOrder
    status?: SortOrder
    commentToDelivery?: SortOrder
  }

  export type OrderMaxOrderByAggregateInput = {
    id?: SortOrder
    locationLat?: SortOrder
    locationLong?: SortOrder
    address?: SortOrder
    orderDate?: SortOrder
    deliveryDate?: SortOrder
    paymentType?: SortOrder
    withDelivery?: SortOrder
    status?: SortOrder
    commentToDelivery?: SortOrder
  }

  export type OrderMinOrderByAggregateInput = {
    id?: SortOrder
    locationLat?: SortOrder
    locationLong?: SortOrder
    address?: SortOrder
    orderDate?: SortOrder
    deliveryDate?: SortOrder
    paymentType?: SortOrder
    withDelivery?: SortOrder
    status?: SortOrder
    commentToDelivery?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumPaymentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeWithAggregatesFilter<$PrismaModel> | $Enums.PaymentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentTypeFilter<$PrismaModel>
    _max?: NestedEnumPaymentTypeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.OrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumOrderStatusFilter<$PrismaModel>
  }

  export type OrderScalarRelationFilter = {
    is?: OrderWhereInput
    isNot?: OrderWhereInput
  }

  export type OrderItemCountOrderByAggregateInput = {
    id?: SortOrder
    orderID?: SortOrder
    productID?: SortOrder
    toolID?: SortOrder
    levelID?: SortOrder
    timeUnit?: SortOrder
    count?: SortOrder
    workingHours?: SortOrder
    totalPrice?: SortOrder
  }

  export type OrderItemAvgOrderByAggregateInput = {
    timeUnit?: SortOrder
    count?: SortOrder
    workingHours?: SortOrder
    totalPrice?: SortOrder
  }

  export type OrderItemMaxOrderByAggregateInput = {
    id?: SortOrder
    orderID?: SortOrder
    productID?: SortOrder
    toolID?: SortOrder
    levelID?: SortOrder
    timeUnit?: SortOrder
    count?: SortOrder
    workingHours?: SortOrder
    totalPrice?: SortOrder
  }

  export type OrderItemMinOrderByAggregateInput = {
    id?: SortOrder
    orderID?: SortOrder
    productID?: SortOrder
    toolID?: SortOrder
    levelID?: SortOrder
    timeUnit?: SortOrder
    count?: SortOrder
    workingHours?: SortOrder
    totalPrice?: SortOrder
  }

  export type OrderItemSumOrderByAggregateInput = {
    timeUnit?: SortOrder
    count?: SortOrder
    workingHours?: SortOrder
    totalPrice?: SortOrder
  }

  export type ToolListRelationFilter = {
    every?: ToolWhereInput
    some?: ToolWhereInput
    none?: ToolWhereInput
  }

  export type ToolOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BrandCountOrderByAggregateInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
  }

  export type BrandMaxOrderByAggregateInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
  }

  export type BrandMinOrderByAggregateInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
  }

  export type CapacityCountOrderByAggregateInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
  }

  export type CapacityMaxOrderByAggregateInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
  }

  export type CapacityMinOrderByAggregateInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
  }

  export type SizeCountOrderByAggregateInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
  }

  export type SizeMaxOrderByAggregateInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
  }

  export type SizeMinOrderByAggregateInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
  }

  export type MasterScalarRelationFilter = {
    is?: MasterWhereInput
    isNot?: MasterWhereInput
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    star?: SortOrder
    masterID?: SortOrder
    orderID?: SortOrder
  }

  export type CommentAvgOrderByAggregateInput = {
    star?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    star?: SortOrder
    masterID?: SortOrder
    orderID?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    star?: SortOrder
    masterID?: SortOrder
    orderID?: SortOrder
  }

  export type CommentSumOrderByAggregateInput = {
    star?: SortOrder
  }

  export type MasterJobsListRelationFilter = {
    every?: MasterJobsWhereInput
    some?: MasterJobsWhereInput
    none?: MasterJobsWhereInput
  }

  export type MasterJobsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MasterCountOrderByAggregateInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    isActive?: SortOrder
    phone?: SortOrder
    dob?: SortOrder
    image?: SortOrder
    passportImage?: SortOrder
    rating?: SortOrder
  }

  export type MasterAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type MasterMaxOrderByAggregateInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    isActive?: SortOrder
    phone?: SortOrder
    dob?: SortOrder
    image?: SortOrder
    passportImage?: SortOrder
    rating?: SortOrder
  }

  export type MasterMinOrderByAggregateInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    isActive?: SortOrder
    phone?: SortOrder
    dob?: SortOrder
    image?: SortOrder
    passportImage?: SortOrder
    rating?: SortOrder
  }

  export type MasterSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type MasterJobsCountOrderByAggregateInput = {
    id?: SortOrder
    toolID?: SortOrder
    productID?: SortOrder
    minWorkingHour?: SortOrder
    workingHours?: SortOrder
    levelID?: SortOrder
    priceHourly?: SortOrder
    priceDaily?: SortOrder
    experience?: SortOrder
    masterID?: SortOrder
  }

  export type MasterJobsAvgOrderByAggregateInput = {
    minWorkingHour?: SortOrder
    workingHours?: SortOrder
    priceHourly?: SortOrder
    priceDaily?: SortOrder
  }

  export type MasterJobsMaxOrderByAggregateInput = {
    id?: SortOrder
    toolID?: SortOrder
    productID?: SortOrder
    minWorkingHour?: SortOrder
    workingHours?: SortOrder
    levelID?: SortOrder
    priceHourly?: SortOrder
    priceDaily?: SortOrder
    experience?: SortOrder
    masterID?: SortOrder
  }

  export type MasterJobsMinOrderByAggregateInput = {
    id?: SortOrder
    toolID?: SortOrder
    productID?: SortOrder
    minWorkingHour?: SortOrder
    workingHours?: SortOrder
    levelID?: SortOrder
    priceHourly?: SortOrder
    priceDaily?: SortOrder
    experience?: SortOrder
    masterID?: SortOrder
  }

  export type MasterJobsSumOrderByAggregateInput = {
    minWorkingHour?: SortOrder
    workingHours?: SortOrder
    priceHourly?: SortOrder
    priceDaily?: SortOrder
  }

  export type GeneralInfoCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    link?: SortOrder
    location?: SortOrder
    phone?: SortOrder
  }

  export type GeneralInfoMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    link?: SortOrder
    location?: SortOrder
    phone?: SortOrder
  }

  export type GeneralInfoMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    link?: SortOrder
    location?: SortOrder
    phone?: SortOrder
  }

  export type EnumShowCaseTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ShowCaseType | EnumShowCaseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ShowCaseType[] | ListEnumShowCaseTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ShowCaseType[] | ListEnumShowCaseTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumShowCaseTypeFilter<$PrismaModel> | $Enums.ShowCaseType
  }

  export type ShowCaseCountOrderByAggregateInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    descriptionRu?: SortOrder
    descriptionUz?: SortOrder
    descriptionEn?: SortOrder
    image?: SortOrder
    link?: SortOrder
    type?: SortOrder
    isActive?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShowCaseMaxOrderByAggregateInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    descriptionRu?: SortOrder
    descriptionUz?: SortOrder
    descriptionEn?: SortOrder
    image?: SortOrder
    link?: SortOrder
    type?: SortOrder
    isActive?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShowCaseMinOrderByAggregateInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    descriptionRu?: SortOrder
    descriptionUz?: SortOrder
    descriptionEn?: SortOrder
    image?: SortOrder
    link?: SortOrder
    type?: SortOrder
    isActive?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumShowCaseTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ShowCaseType | EnumShowCaseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ShowCaseType[] | ListEnumShowCaseTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ShowCaseType[] | ListEnumShowCaseTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumShowCaseTypeWithAggregatesFilter<$PrismaModel> | $Enums.ShowCaseType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumShowCaseTypeFilter<$PrismaModel>
    _max?: NestedEnumShowCaseTypeFilter<$PrismaModel>
  }

  export type FAQCountOrderByAggregateInput = {
    id?: SortOrder
    questionUz?: SortOrder
    questionRu?: SortOrder
    questionEn?: SortOrder
    answerUz?: SortOrder
    answerRu?: SortOrder
    answerEn?: SortOrder
  }

  export type FAQMaxOrderByAggregateInput = {
    id?: SortOrder
    questionUz?: SortOrder
    questionRu?: SortOrder
    questionEn?: SortOrder
    answerUz?: SortOrder
    answerRu?: SortOrder
    answerEn?: SortOrder
  }

  export type FAQMinOrderByAggregateInput = {
    id?: SortOrder
    questionUz?: SortOrder
    questionRu?: SortOrder
    questionEn?: SortOrder
    answerUz?: SortOrder
    answerRu?: SortOrder
    answerEn?: SortOrder
  }

  export type ContactCountOrderByAggregateInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    message?: SortOrder
    email?: SortOrder
  }

  export type ContactMaxOrderByAggregateInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    message?: SortOrder
    email?: SortOrder
  }

  export type ContactMinOrderByAggregateInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    message?: SortOrder
    email?: SortOrder
  }

  export type PartnerCountOrderByAggregateInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    image?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    status?: SortOrder
    paymentTerms?: SortOrder
    agreementStart?: SortOrder
    agreementEnd?: SortOrder
  }

  export type PartnerMaxOrderByAggregateInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    image?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    status?: SortOrder
    paymentTerms?: SortOrder
    agreementStart?: SortOrder
    agreementEnd?: SortOrder
  }

  export type PartnerMinOrderByAggregateInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    image?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    status?: SortOrder
    paymentTerms?: SortOrder
    agreementStart?: SortOrder
    agreementEnd?: SortOrder
  }

  export type ProductLevelListRelationFilter = {
    every?: ProductLevelWhereInput
    some?: ProductLevelWhereInput
    none?: ProductLevelWhereInput
  }

  export type ProductToolListRelationFilter = {
    every?: ProductToolWhereInput
    some?: ProductToolWhereInput
    none?: ProductToolWhereInput
  }

  export type ProductLevelOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductToolOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    isActive?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    image?: SortOrder
    minWorkingHours?: SortOrder
    hourlyPrice?: SortOrder
    dailyPrice?: SortOrder
  }

  export type ProductAvgOrderByAggregateInput = {
    hourlyPrice?: SortOrder
    dailyPrice?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    isActive?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    image?: SortOrder
    minWorkingHours?: SortOrder
    hourlyPrice?: SortOrder
    dailyPrice?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    isActive?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    image?: SortOrder
    minWorkingHours?: SortOrder
    hourlyPrice?: SortOrder
    dailyPrice?: SortOrder
  }

  export type ProductSumOrderByAggregateInput = {
    hourlyPrice?: SortOrder
    dailyPrice?: SortOrder
  }

  export type LevelCountOrderByAggregateInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
  }

  export type LevelMaxOrderByAggregateInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
  }

  export type LevelMinOrderByAggregateInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
  }

  export type BrandScalarRelationFilter = {
    is?: BrandWhereInput
    isNot?: BrandWhereInput
  }

  export type CapacityScalarRelationFilter = {
    is?: CapacityWhereInput
    isNot?: CapacityWhereInput
  }

  export type SizeScalarRelationFilter = {
    is?: SizeWhereInput
    isNot?: SizeWhereInput
  }

  export type ToolCountOrderByAggregateInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    descriptionRu?: SortOrder
    descriptionUz?: SortOrder
    descriptionEn?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    code?: SortOrder
    brandID?: SortOrder
    capacityID?: SortOrder
    sizeID?: SortOrder
    image?: SortOrder
    isActive?: SortOrder
  }

  export type ToolAvgOrderByAggregateInput = {
    price?: SortOrder
    quantity?: SortOrder
  }

  export type ToolMaxOrderByAggregateInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    descriptionRu?: SortOrder
    descriptionUz?: SortOrder
    descriptionEn?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    code?: SortOrder
    brandID?: SortOrder
    capacityID?: SortOrder
    sizeID?: SortOrder
    image?: SortOrder
    isActive?: SortOrder
  }

  export type ToolMinOrderByAggregateInput = {
    id?: SortOrder
    nameRu?: SortOrder
    nameUz?: SortOrder
    nameEn?: SortOrder
    descriptionRu?: SortOrder
    descriptionUz?: SortOrder
    descriptionEn?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    code?: SortOrder
    brandID?: SortOrder
    capacityID?: SortOrder
    sizeID?: SortOrder
    image?: SortOrder
    isActive?: SortOrder
  }

  export type ToolSumOrderByAggregateInput = {
    price?: SortOrder
    quantity?: SortOrder
  }

  export type ProductLevelProductIDLevelIDCompoundUniqueInput = {
    productID: string
    levelID: string
  }

  export type ProductLevelCountOrderByAggregateInput = {
    id?: SortOrder
    productID?: SortOrder
    levelID?: SortOrder
  }

  export type ProductLevelMaxOrderByAggregateInput = {
    id?: SortOrder
    productID?: SortOrder
    levelID?: SortOrder
  }

  export type ProductLevelMinOrderByAggregateInput = {
    id?: SortOrder
    productID?: SortOrder
    levelID?: SortOrder
  }

  export type ProductToolProductIDToolIDCompoundUniqueInput = {
    productID: string
    toolID: string
  }

  export type ProductToolCountOrderByAggregateInput = {
    id?: SortOrder
    productID?: SortOrder
    toolID?: SortOrder
  }

  export type ProductToolMaxOrderByAggregateInput = {
    id?: SortOrder
    productID?: SortOrder
    toolID?: SortOrder
  }

  export type ProductToolMinOrderByAggregateInput = {
    id?: SortOrder
    productID?: SortOrder
    toolID?: SortOrder
  }

  export type RegionCreateNestedOneWithoutUsersInput = {
    create?: XOR<RegionCreateWithoutUsersInput, RegionUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RegionCreateOrConnectWithoutUsersInput
    connect?: RegionWhereUniqueInput
  }

  export type BasketCreateNestedManyWithoutUserInput = {
    create?: XOR<BasketCreateWithoutUserInput, BasketUncheckedCreateWithoutUserInput> | BasketCreateWithoutUserInput[] | BasketUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutUserInput | BasketCreateOrConnectWithoutUserInput[]
    createMany?: BasketCreateManyUserInputEnvelope
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
  }

  export type BasketUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BasketCreateWithoutUserInput, BasketUncheckedCreateWithoutUserInput> | BasketCreateWithoutUserInput[] | BasketUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutUserInput | BasketCreateOrConnectWithoutUserInput[]
    createMany?: BasketCreateManyUserInputEnvelope
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type EnumUserStatusFieldUpdateOperationsInput = {
    set?: $Enums.UserStatus
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type RegionUpdateOneWithoutUsersNestedInput = {
    create?: XOR<RegionCreateWithoutUsersInput, RegionUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RegionCreateOrConnectWithoutUsersInput
    upsert?: RegionUpsertWithoutUsersInput
    disconnect?: RegionWhereInput | boolean
    delete?: RegionWhereInput | boolean
    connect?: RegionWhereUniqueInput
    update?: XOR<XOR<RegionUpdateToOneWithWhereWithoutUsersInput, RegionUpdateWithoutUsersInput>, RegionUncheckedUpdateWithoutUsersInput>
  }

  export type BasketUpdateManyWithoutUserNestedInput = {
    create?: XOR<BasketCreateWithoutUserInput, BasketUncheckedCreateWithoutUserInput> | BasketCreateWithoutUserInput[] | BasketUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutUserInput | BasketCreateOrConnectWithoutUserInput[]
    upsert?: BasketUpsertWithWhereUniqueWithoutUserInput | BasketUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BasketCreateManyUserInputEnvelope
    set?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    disconnect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    delete?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    update?: BasketUpdateWithWhereUniqueWithoutUserInput | BasketUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BasketUpdateManyWithWhereWithoutUserInput | BasketUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BasketScalarWhereInput | BasketScalarWhereInput[]
  }

  export type BasketUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BasketCreateWithoutUserInput, BasketUncheckedCreateWithoutUserInput> | BasketCreateWithoutUserInput[] | BasketUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutUserInput | BasketCreateOrConnectWithoutUserInput[]
    upsert?: BasketUpsertWithWhereUniqueWithoutUserInput | BasketUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BasketCreateManyUserInputEnvelope
    set?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    disconnect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    delete?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    update?: BasketUpdateWithWhereUniqueWithoutUserInput | BasketUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BasketUpdateManyWithWhereWithoutUserInput | BasketUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BasketScalarWhereInput | BasketScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutRegionInput = {
    create?: XOR<UserCreateWithoutRegionInput, UserUncheckedCreateWithoutRegionInput> | UserCreateWithoutRegionInput[] | UserUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRegionInput | UserCreateOrConnectWithoutRegionInput[]
    createMany?: UserCreateManyRegionInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutRegionInput = {
    create?: XOR<UserCreateWithoutRegionInput, UserUncheckedCreateWithoutRegionInput> | UserCreateWithoutRegionInput[] | UserUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRegionInput | UserCreateOrConnectWithoutRegionInput[]
    createMany?: UserCreateManyRegionInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutRegionNestedInput = {
    create?: XOR<UserCreateWithoutRegionInput, UserUncheckedCreateWithoutRegionInput> | UserCreateWithoutRegionInput[] | UserUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRegionInput | UserCreateOrConnectWithoutRegionInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRegionInput | UserUpsertWithWhereUniqueWithoutRegionInput[]
    createMany?: UserCreateManyRegionInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRegionInput | UserUpdateWithWhereUniqueWithoutRegionInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRegionInput | UserUpdateManyWithWhereWithoutRegionInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutRegionNestedInput = {
    create?: XOR<UserCreateWithoutRegionInput, UserUncheckedCreateWithoutRegionInput> | UserCreateWithoutRegionInput[] | UserUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRegionInput | UserCreateOrConnectWithoutRegionInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRegionInput | UserUpsertWithWhereUniqueWithoutRegionInput[]
    createMany?: UserCreateManyRegionInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRegionInput | UserUpdateWithWhereUniqueWithoutRegionInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRegionInput | UserUpdateManyWithWhereWithoutRegionInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutBasketsInput = {
    create?: XOR<UserCreateWithoutBasketsInput, UserUncheckedCreateWithoutBasketsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBasketsInput
    connect?: UserWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutBasketsInput = {
    create?: XOR<ProductCreateWithoutBasketsInput, ProductUncheckedCreateWithoutBasketsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutBasketsInput
    connect?: ProductWhereUniqueInput
  }

  export type ToolCreateNestedOneWithoutBasketsInput = {
    create?: XOR<ToolCreateWithoutBasketsInput, ToolUncheckedCreateWithoutBasketsInput>
    connectOrCreate?: ToolCreateOrConnectWithoutBasketsInput
    connect?: ToolWhereUniqueInput
  }

  export type LevelCreateNestedOneWithoutBasketsInput = {
    create?: XOR<LevelCreateWithoutBasketsInput, LevelUncheckedCreateWithoutBasketsInput>
    connectOrCreate?: LevelCreateOrConnectWithoutBasketsInput
    connect?: LevelWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutBasketsNestedInput = {
    create?: XOR<UserCreateWithoutBasketsInput, UserUncheckedCreateWithoutBasketsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBasketsInput
    upsert?: UserUpsertWithoutBasketsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBasketsInput, UserUpdateWithoutBasketsInput>, UserUncheckedUpdateWithoutBasketsInput>
  }

  export type ProductUpdateOneRequiredWithoutBasketsNestedInput = {
    create?: XOR<ProductCreateWithoutBasketsInput, ProductUncheckedCreateWithoutBasketsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutBasketsInput
    upsert?: ProductUpsertWithoutBasketsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutBasketsInput, ProductUpdateWithoutBasketsInput>, ProductUncheckedUpdateWithoutBasketsInput>
  }

  export type ToolUpdateOneRequiredWithoutBasketsNestedInput = {
    create?: XOR<ToolCreateWithoutBasketsInput, ToolUncheckedCreateWithoutBasketsInput>
    connectOrCreate?: ToolCreateOrConnectWithoutBasketsInput
    upsert?: ToolUpsertWithoutBasketsInput
    connect?: ToolWhereUniqueInput
    update?: XOR<XOR<ToolUpdateToOneWithWhereWithoutBasketsInput, ToolUpdateWithoutBasketsInput>, ToolUncheckedUpdateWithoutBasketsInput>
  }

  export type LevelUpdateOneRequiredWithoutBasketsNestedInput = {
    create?: XOR<LevelCreateWithoutBasketsInput, LevelUncheckedCreateWithoutBasketsInput>
    connectOrCreate?: LevelCreateOrConnectWithoutBasketsInput
    upsert?: LevelUpsertWithoutBasketsInput
    connect?: LevelWhereUniqueInput
    update?: XOR<XOR<LevelUpdateToOneWithWhereWithoutBasketsInput, LevelUpdateWithoutBasketsInput>, LevelUncheckedUpdateWithoutBasketsInput>
  }

  export type OrderItemCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutOrderInput = {
    create?: XOR<CommentCreateWithoutOrderInput, CommentUncheckedCreateWithoutOrderInput> | CommentCreateWithoutOrderInput[] | CommentUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutOrderInput | CommentCreateOrConnectWithoutOrderInput[]
    createMany?: CommentCreateManyOrderInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type OrderItemUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<CommentCreateWithoutOrderInput, CommentUncheckedCreateWithoutOrderInput> | CommentCreateWithoutOrderInput[] | CommentUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutOrderInput | CommentCreateOrConnectWithoutOrderInput[]
    createMany?: CommentCreateManyOrderInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumPaymentTypeFieldUpdateOperationsInput = {
    set?: $Enums.PaymentType
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumOrderStatusFieldUpdateOperationsInput = {
    set?: $Enums.OrderStatus
  }

  export type OrderItemUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutOrderInput | OrderItemUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutOrderInput | OrderItemUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutOrderInput | OrderItemUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutOrderNestedInput = {
    create?: XOR<CommentCreateWithoutOrderInput, CommentUncheckedCreateWithoutOrderInput> | CommentCreateWithoutOrderInput[] | CommentUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutOrderInput | CommentCreateOrConnectWithoutOrderInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutOrderInput | CommentUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: CommentCreateManyOrderInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutOrderInput | CommentUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutOrderInput | CommentUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type OrderItemUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutOrderInput | OrderItemUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutOrderInput | OrderItemUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutOrderInput | OrderItemUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<CommentCreateWithoutOrderInput, CommentUncheckedCreateWithoutOrderInput> | CommentCreateWithoutOrderInput[] | CommentUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutOrderInput | CommentCreateOrConnectWithoutOrderInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutOrderInput | CommentUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: CommentCreateManyOrderInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutOrderInput | CommentUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutOrderInput | CommentUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type OrderCreateNestedOneWithoutItemsInput = {
    create?: XOR<OrderCreateWithoutItemsInput, OrderUncheckedCreateWithoutItemsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutItemsInput
    connect?: OrderWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutOrderItemsInput = {
    create?: XOR<ProductCreateWithoutOrderItemsInput, ProductUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutOrderItemsInput
    connect?: ProductWhereUniqueInput
  }

  export type ToolCreateNestedOneWithoutOrderItemsInput = {
    create?: XOR<ToolCreateWithoutOrderItemsInput, ToolUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: ToolCreateOrConnectWithoutOrderItemsInput
    connect?: ToolWhereUniqueInput
  }

  export type LevelCreateNestedOneWithoutOrderItemsInput = {
    create?: XOR<LevelCreateWithoutOrderItemsInput, LevelUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: LevelCreateOrConnectWithoutOrderItemsInput
    connect?: LevelWhereUniqueInput
  }

  export type OrderUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<OrderCreateWithoutItemsInput, OrderUncheckedCreateWithoutItemsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutItemsInput
    upsert?: OrderUpsertWithoutItemsInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutItemsInput, OrderUpdateWithoutItemsInput>, OrderUncheckedUpdateWithoutItemsInput>
  }

  export type ProductUpdateOneRequiredWithoutOrderItemsNestedInput = {
    create?: XOR<ProductCreateWithoutOrderItemsInput, ProductUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutOrderItemsInput
    upsert?: ProductUpsertWithoutOrderItemsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutOrderItemsInput, ProductUpdateWithoutOrderItemsInput>, ProductUncheckedUpdateWithoutOrderItemsInput>
  }

  export type ToolUpdateOneRequiredWithoutOrderItemsNestedInput = {
    create?: XOR<ToolCreateWithoutOrderItemsInput, ToolUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: ToolCreateOrConnectWithoutOrderItemsInput
    upsert?: ToolUpsertWithoutOrderItemsInput
    connect?: ToolWhereUniqueInput
    update?: XOR<XOR<ToolUpdateToOneWithWhereWithoutOrderItemsInput, ToolUpdateWithoutOrderItemsInput>, ToolUncheckedUpdateWithoutOrderItemsInput>
  }

  export type LevelUpdateOneRequiredWithoutOrderItemsNestedInput = {
    create?: XOR<LevelCreateWithoutOrderItemsInput, LevelUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: LevelCreateOrConnectWithoutOrderItemsInput
    upsert?: LevelUpsertWithoutOrderItemsInput
    connect?: LevelWhereUniqueInput
    update?: XOR<XOR<LevelUpdateToOneWithWhereWithoutOrderItemsInput, LevelUpdateWithoutOrderItemsInput>, LevelUncheckedUpdateWithoutOrderItemsInput>
  }

  export type ToolCreateNestedManyWithoutBrandInput = {
    create?: XOR<ToolCreateWithoutBrandInput, ToolUncheckedCreateWithoutBrandInput> | ToolCreateWithoutBrandInput[] | ToolUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: ToolCreateOrConnectWithoutBrandInput | ToolCreateOrConnectWithoutBrandInput[]
    createMany?: ToolCreateManyBrandInputEnvelope
    connect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
  }

  export type ToolUncheckedCreateNestedManyWithoutBrandInput = {
    create?: XOR<ToolCreateWithoutBrandInput, ToolUncheckedCreateWithoutBrandInput> | ToolCreateWithoutBrandInput[] | ToolUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: ToolCreateOrConnectWithoutBrandInput | ToolCreateOrConnectWithoutBrandInput[]
    createMany?: ToolCreateManyBrandInputEnvelope
    connect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
  }

  export type ToolUpdateManyWithoutBrandNestedInput = {
    create?: XOR<ToolCreateWithoutBrandInput, ToolUncheckedCreateWithoutBrandInput> | ToolCreateWithoutBrandInput[] | ToolUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: ToolCreateOrConnectWithoutBrandInput | ToolCreateOrConnectWithoutBrandInput[]
    upsert?: ToolUpsertWithWhereUniqueWithoutBrandInput | ToolUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: ToolCreateManyBrandInputEnvelope
    set?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    disconnect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    delete?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    connect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    update?: ToolUpdateWithWhereUniqueWithoutBrandInput | ToolUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: ToolUpdateManyWithWhereWithoutBrandInput | ToolUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: ToolScalarWhereInput | ToolScalarWhereInput[]
  }

  export type ToolUncheckedUpdateManyWithoutBrandNestedInput = {
    create?: XOR<ToolCreateWithoutBrandInput, ToolUncheckedCreateWithoutBrandInput> | ToolCreateWithoutBrandInput[] | ToolUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: ToolCreateOrConnectWithoutBrandInput | ToolCreateOrConnectWithoutBrandInput[]
    upsert?: ToolUpsertWithWhereUniqueWithoutBrandInput | ToolUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: ToolCreateManyBrandInputEnvelope
    set?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    disconnect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    delete?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    connect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    update?: ToolUpdateWithWhereUniqueWithoutBrandInput | ToolUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: ToolUpdateManyWithWhereWithoutBrandInput | ToolUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: ToolScalarWhereInput | ToolScalarWhereInput[]
  }

  export type ToolCreateNestedManyWithoutCapacityInput = {
    create?: XOR<ToolCreateWithoutCapacityInput, ToolUncheckedCreateWithoutCapacityInput> | ToolCreateWithoutCapacityInput[] | ToolUncheckedCreateWithoutCapacityInput[]
    connectOrCreate?: ToolCreateOrConnectWithoutCapacityInput | ToolCreateOrConnectWithoutCapacityInput[]
    createMany?: ToolCreateManyCapacityInputEnvelope
    connect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
  }

  export type ToolUncheckedCreateNestedManyWithoutCapacityInput = {
    create?: XOR<ToolCreateWithoutCapacityInput, ToolUncheckedCreateWithoutCapacityInput> | ToolCreateWithoutCapacityInput[] | ToolUncheckedCreateWithoutCapacityInput[]
    connectOrCreate?: ToolCreateOrConnectWithoutCapacityInput | ToolCreateOrConnectWithoutCapacityInput[]
    createMany?: ToolCreateManyCapacityInputEnvelope
    connect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
  }

  export type ToolUpdateManyWithoutCapacityNestedInput = {
    create?: XOR<ToolCreateWithoutCapacityInput, ToolUncheckedCreateWithoutCapacityInput> | ToolCreateWithoutCapacityInput[] | ToolUncheckedCreateWithoutCapacityInput[]
    connectOrCreate?: ToolCreateOrConnectWithoutCapacityInput | ToolCreateOrConnectWithoutCapacityInput[]
    upsert?: ToolUpsertWithWhereUniqueWithoutCapacityInput | ToolUpsertWithWhereUniqueWithoutCapacityInput[]
    createMany?: ToolCreateManyCapacityInputEnvelope
    set?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    disconnect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    delete?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    connect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    update?: ToolUpdateWithWhereUniqueWithoutCapacityInput | ToolUpdateWithWhereUniqueWithoutCapacityInput[]
    updateMany?: ToolUpdateManyWithWhereWithoutCapacityInput | ToolUpdateManyWithWhereWithoutCapacityInput[]
    deleteMany?: ToolScalarWhereInput | ToolScalarWhereInput[]
  }

  export type ToolUncheckedUpdateManyWithoutCapacityNestedInput = {
    create?: XOR<ToolCreateWithoutCapacityInput, ToolUncheckedCreateWithoutCapacityInput> | ToolCreateWithoutCapacityInput[] | ToolUncheckedCreateWithoutCapacityInput[]
    connectOrCreate?: ToolCreateOrConnectWithoutCapacityInput | ToolCreateOrConnectWithoutCapacityInput[]
    upsert?: ToolUpsertWithWhereUniqueWithoutCapacityInput | ToolUpsertWithWhereUniqueWithoutCapacityInput[]
    createMany?: ToolCreateManyCapacityInputEnvelope
    set?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    disconnect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    delete?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    connect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    update?: ToolUpdateWithWhereUniqueWithoutCapacityInput | ToolUpdateWithWhereUniqueWithoutCapacityInput[]
    updateMany?: ToolUpdateManyWithWhereWithoutCapacityInput | ToolUpdateManyWithWhereWithoutCapacityInput[]
    deleteMany?: ToolScalarWhereInput | ToolScalarWhereInput[]
  }

  export type ToolCreateNestedManyWithoutSizeInput = {
    create?: XOR<ToolCreateWithoutSizeInput, ToolUncheckedCreateWithoutSizeInput> | ToolCreateWithoutSizeInput[] | ToolUncheckedCreateWithoutSizeInput[]
    connectOrCreate?: ToolCreateOrConnectWithoutSizeInput | ToolCreateOrConnectWithoutSizeInput[]
    createMany?: ToolCreateManySizeInputEnvelope
    connect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
  }

  export type ToolUncheckedCreateNestedManyWithoutSizeInput = {
    create?: XOR<ToolCreateWithoutSizeInput, ToolUncheckedCreateWithoutSizeInput> | ToolCreateWithoutSizeInput[] | ToolUncheckedCreateWithoutSizeInput[]
    connectOrCreate?: ToolCreateOrConnectWithoutSizeInput | ToolCreateOrConnectWithoutSizeInput[]
    createMany?: ToolCreateManySizeInputEnvelope
    connect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
  }

  export type ToolUpdateManyWithoutSizeNestedInput = {
    create?: XOR<ToolCreateWithoutSizeInput, ToolUncheckedCreateWithoutSizeInput> | ToolCreateWithoutSizeInput[] | ToolUncheckedCreateWithoutSizeInput[]
    connectOrCreate?: ToolCreateOrConnectWithoutSizeInput | ToolCreateOrConnectWithoutSizeInput[]
    upsert?: ToolUpsertWithWhereUniqueWithoutSizeInput | ToolUpsertWithWhereUniqueWithoutSizeInput[]
    createMany?: ToolCreateManySizeInputEnvelope
    set?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    disconnect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    delete?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    connect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    update?: ToolUpdateWithWhereUniqueWithoutSizeInput | ToolUpdateWithWhereUniqueWithoutSizeInput[]
    updateMany?: ToolUpdateManyWithWhereWithoutSizeInput | ToolUpdateManyWithWhereWithoutSizeInput[]
    deleteMany?: ToolScalarWhereInput | ToolScalarWhereInput[]
  }

  export type ToolUncheckedUpdateManyWithoutSizeNestedInput = {
    create?: XOR<ToolCreateWithoutSizeInput, ToolUncheckedCreateWithoutSizeInput> | ToolCreateWithoutSizeInput[] | ToolUncheckedCreateWithoutSizeInput[]
    connectOrCreate?: ToolCreateOrConnectWithoutSizeInput | ToolCreateOrConnectWithoutSizeInput[]
    upsert?: ToolUpsertWithWhereUniqueWithoutSizeInput | ToolUpsertWithWhereUniqueWithoutSizeInput[]
    createMany?: ToolCreateManySizeInputEnvelope
    set?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    disconnect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    delete?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    connect?: ToolWhereUniqueInput | ToolWhereUniqueInput[]
    update?: ToolUpdateWithWhereUniqueWithoutSizeInput | ToolUpdateWithWhereUniqueWithoutSizeInput[]
    updateMany?: ToolUpdateManyWithWhereWithoutSizeInput | ToolUpdateManyWithWhereWithoutSizeInput[]
    deleteMany?: ToolScalarWhereInput | ToolScalarWhereInput[]
  }

  export type MasterCreateNestedOneWithoutCommentsInput = {
    create?: XOR<MasterCreateWithoutCommentsInput, MasterUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: MasterCreateOrConnectWithoutCommentsInput
    connect?: MasterWhereUniqueInput
  }

  export type OrderCreateNestedOneWithoutCommentsInput = {
    create?: XOR<OrderCreateWithoutCommentsInput, OrderUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutCommentsInput
    connect?: OrderWhereUniqueInput
  }

  export type MasterUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<MasterCreateWithoutCommentsInput, MasterUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: MasterCreateOrConnectWithoutCommentsInput
    upsert?: MasterUpsertWithoutCommentsInput
    connect?: MasterWhereUniqueInput
    update?: XOR<XOR<MasterUpdateToOneWithWhereWithoutCommentsInput, MasterUpdateWithoutCommentsInput>, MasterUncheckedUpdateWithoutCommentsInput>
  }

  export type OrderUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<OrderCreateWithoutCommentsInput, OrderUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutCommentsInput
    upsert?: OrderUpsertWithoutCommentsInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutCommentsInput, OrderUpdateWithoutCommentsInput>, OrderUncheckedUpdateWithoutCommentsInput>
  }

  export type MasterJobsCreateNestedManyWithoutMasterInput = {
    create?: XOR<MasterJobsCreateWithoutMasterInput, MasterJobsUncheckedCreateWithoutMasterInput> | MasterJobsCreateWithoutMasterInput[] | MasterJobsUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: MasterJobsCreateOrConnectWithoutMasterInput | MasterJobsCreateOrConnectWithoutMasterInput[]
    createMany?: MasterJobsCreateManyMasterInputEnvelope
    connect?: MasterJobsWhereUniqueInput | MasterJobsWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutMasterInput = {
    create?: XOR<CommentCreateWithoutMasterInput, CommentUncheckedCreateWithoutMasterInput> | CommentCreateWithoutMasterInput[] | CommentUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutMasterInput | CommentCreateOrConnectWithoutMasterInput[]
    createMany?: CommentCreateManyMasterInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type MasterJobsUncheckedCreateNestedManyWithoutMasterInput = {
    create?: XOR<MasterJobsCreateWithoutMasterInput, MasterJobsUncheckedCreateWithoutMasterInput> | MasterJobsCreateWithoutMasterInput[] | MasterJobsUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: MasterJobsCreateOrConnectWithoutMasterInput | MasterJobsCreateOrConnectWithoutMasterInput[]
    createMany?: MasterJobsCreateManyMasterInputEnvelope
    connect?: MasterJobsWhereUniqueInput | MasterJobsWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutMasterInput = {
    create?: XOR<CommentCreateWithoutMasterInput, CommentUncheckedCreateWithoutMasterInput> | CommentCreateWithoutMasterInput[] | CommentUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutMasterInput | CommentCreateOrConnectWithoutMasterInput[]
    createMany?: CommentCreateManyMasterInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type MasterJobsUpdateManyWithoutMasterNestedInput = {
    create?: XOR<MasterJobsCreateWithoutMasterInput, MasterJobsUncheckedCreateWithoutMasterInput> | MasterJobsCreateWithoutMasterInput[] | MasterJobsUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: MasterJobsCreateOrConnectWithoutMasterInput | MasterJobsCreateOrConnectWithoutMasterInput[]
    upsert?: MasterJobsUpsertWithWhereUniqueWithoutMasterInput | MasterJobsUpsertWithWhereUniqueWithoutMasterInput[]
    createMany?: MasterJobsCreateManyMasterInputEnvelope
    set?: MasterJobsWhereUniqueInput | MasterJobsWhereUniqueInput[]
    disconnect?: MasterJobsWhereUniqueInput | MasterJobsWhereUniqueInput[]
    delete?: MasterJobsWhereUniqueInput | MasterJobsWhereUniqueInput[]
    connect?: MasterJobsWhereUniqueInput | MasterJobsWhereUniqueInput[]
    update?: MasterJobsUpdateWithWhereUniqueWithoutMasterInput | MasterJobsUpdateWithWhereUniqueWithoutMasterInput[]
    updateMany?: MasterJobsUpdateManyWithWhereWithoutMasterInput | MasterJobsUpdateManyWithWhereWithoutMasterInput[]
    deleteMany?: MasterJobsScalarWhereInput | MasterJobsScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutMasterNestedInput = {
    create?: XOR<CommentCreateWithoutMasterInput, CommentUncheckedCreateWithoutMasterInput> | CommentCreateWithoutMasterInput[] | CommentUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutMasterInput | CommentCreateOrConnectWithoutMasterInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutMasterInput | CommentUpsertWithWhereUniqueWithoutMasterInput[]
    createMany?: CommentCreateManyMasterInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutMasterInput | CommentUpdateWithWhereUniqueWithoutMasterInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutMasterInput | CommentUpdateManyWithWhereWithoutMasterInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type MasterJobsUncheckedUpdateManyWithoutMasterNestedInput = {
    create?: XOR<MasterJobsCreateWithoutMasterInput, MasterJobsUncheckedCreateWithoutMasterInput> | MasterJobsCreateWithoutMasterInput[] | MasterJobsUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: MasterJobsCreateOrConnectWithoutMasterInput | MasterJobsCreateOrConnectWithoutMasterInput[]
    upsert?: MasterJobsUpsertWithWhereUniqueWithoutMasterInput | MasterJobsUpsertWithWhereUniqueWithoutMasterInput[]
    createMany?: MasterJobsCreateManyMasterInputEnvelope
    set?: MasterJobsWhereUniqueInput | MasterJobsWhereUniqueInput[]
    disconnect?: MasterJobsWhereUniqueInput | MasterJobsWhereUniqueInput[]
    delete?: MasterJobsWhereUniqueInput | MasterJobsWhereUniqueInput[]
    connect?: MasterJobsWhereUniqueInput | MasterJobsWhereUniqueInput[]
    update?: MasterJobsUpdateWithWhereUniqueWithoutMasterInput | MasterJobsUpdateWithWhereUniqueWithoutMasterInput[]
    updateMany?: MasterJobsUpdateManyWithWhereWithoutMasterInput | MasterJobsUpdateManyWithWhereWithoutMasterInput[]
    deleteMany?: MasterJobsScalarWhereInput | MasterJobsScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutMasterNestedInput = {
    create?: XOR<CommentCreateWithoutMasterInput, CommentUncheckedCreateWithoutMasterInput> | CommentCreateWithoutMasterInput[] | CommentUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutMasterInput | CommentCreateOrConnectWithoutMasterInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutMasterInput | CommentUpsertWithWhereUniqueWithoutMasterInput[]
    createMany?: CommentCreateManyMasterInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutMasterInput | CommentUpdateWithWhereUniqueWithoutMasterInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutMasterInput | CommentUpdateManyWithWhereWithoutMasterInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type ToolCreateNestedOneWithoutMasterJobsInput = {
    create?: XOR<ToolCreateWithoutMasterJobsInput, ToolUncheckedCreateWithoutMasterJobsInput>
    connectOrCreate?: ToolCreateOrConnectWithoutMasterJobsInput
    connect?: ToolWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutMasterJobsInput = {
    create?: XOR<ProductCreateWithoutMasterJobsInput, ProductUncheckedCreateWithoutMasterJobsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutMasterJobsInput
    connect?: ProductWhereUniqueInput
  }

  export type LevelCreateNestedOneWithoutMasterJobsInput = {
    create?: XOR<LevelCreateWithoutMasterJobsInput, LevelUncheckedCreateWithoutMasterJobsInput>
    connectOrCreate?: LevelCreateOrConnectWithoutMasterJobsInput
    connect?: LevelWhereUniqueInput
  }

  export type MasterCreateNestedOneWithoutMasterJobsInput = {
    create?: XOR<MasterCreateWithoutMasterJobsInput, MasterUncheckedCreateWithoutMasterJobsInput>
    connectOrCreate?: MasterCreateOrConnectWithoutMasterJobsInput
    connect?: MasterWhereUniqueInput
  }

  export type ToolUpdateOneRequiredWithoutMasterJobsNestedInput = {
    create?: XOR<ToolCreateWithoutMasterJobsInput, ToolUncheckedCreateWithoutMasterJobsInput>
    connectOrCreate?: ToolCreateOrConnectWithoutMasterJobsInput
    upsert?: ToolUpsertWithoutMasterJobsInput
    connect?: ToolWhereUniqueInput
    update?: XOR<XOR<ToolUpdateToOneWithWhereWithoutMasterJobsInput, ToolUpdateWithoutMasterJobsInput>, ToolUncheckedUpdateWithoutMasterJobsInput>
  }

  export type ProductUpdateOneRequiredWithoutMasterJobsNestedInput = {
    create?: XOR<ProductCreateWithoutMasterJobsInput, ProductUncheckedCreateWithoutMasterJobsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutMasterJobsInput
    upsert?: ProductUpsertWithoutMasterJobsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutMasterJobsInput, ProductUpdateWithoutMasterJobsInput>, ProductUncheckedUpdateWithoutMasterJobsInput>
  }

  export type LevelUpdateOneRequiredWithoutMasterJobsNestedInput = {
    create?: XOR<LevelCreateWithoutMasterJobsInput, LevelUncheckedCreateWithoutMasterJobsInput>
    connectOrCreate?: LevelCreateOrConnectWithoutMasterJobsInput
    upsert?: LevelUpsertWithoutMasterJobsInput
    connect?: LevelWhereUniqueInput
    update?: XOR<XOR<LevelUpdateToOneWithWhereWithoutMasterJobsInput, LevelUpdateWithoutMasterJobsInput>, LevelUncheckedUpdateWithoutMasterJobsInput>
  }

  export type MasterUpdateOneRequiredWithoutMasterJobsNestedInput = {
    create?: XOR<MasterCreateWithoutMasterJobsInput, MasterUncheckedCreateWithoutMasterJobsInput>
    connectOrCreate?: MasterCreateOrConnectWithoutMasterJobsInput
    upsert?: MasterUpsertWithoutMasterJobsInput
    connect?: MasterWhereUniqueInput
    update?: XOR<XOR<MasterUpdateToOneWithWhereWithoutMasterJobsInput, MasterUpdateWithoutMasterJobsInput>, MasterUncheckedUpdateWithoutMasterJobsInput>
  }

  export type EnumShowCaseTypeFieldUpdateOperationsInput = {
    set?: $Enums.ShowCaseType
  }

  export type BasketCreateNestedManyWithoutProductInput = {
    create?: XOR<BasketCreateWithoutProductInput, BasketUncheckedCreateWithoutProductInput> | BasketCreateWithoutProductInput[] | BasketUncheckedCreateWithoutProductInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutProductInput | BasketCreateOrConnectWithoutProductInput[]
    createMany?: BasketCreateManyProductInputEnvelope
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
  }

  export type OrderItemCreateNestedManyWithoutProductInput = {
    create?: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput> | OrderItemCreateWithoutProductInput[] | OrderItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutProductInput | OrderItemCreateOrConnectWithoutProductInput[]
    createMany?: OrderItemCreateManyProductInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type MasterJobsCreateNestedManyWithoutProductInput = {
    create?: XOR<MasterJobsCreateWithoutProductInput, MasterJobsUncheckedCreateWithoutProductInput> | MasterJobsCreateWithoutProductInput[] | MasterJobsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: MasterJobsCreateOrConnectWithoutProductInput | MasterJobsCreateOrConnectWithoutProductInput[]
    createMany?: MasterJobsCreateManyProductInputEnvelope
    connect?: MasterJobsWhereUniqueInput | MasterJobsWhereUniqueInput[]
  }

  export type ProductLevelCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductLevelCreateWithoutProductInput, ProductLevelUncheckedCreateWithoutProductInput> | ProductLevelCreateWithoutProductInput[] | ProductLevelUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductLevelCreateOrConnectWithoutProductInput | ProductLevelCreateOrConnectWithoutProductInput[]
    createMany?: ProductLevelCreateManyProductInputEnvelope
    connect?: ProductLevelWhereUniqueInput | ProductLevelWhereUniqueInput[]
  }

  export type ProductToolCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductToolCreateWithoutProductInput, ProductToolUncheckedCreateWithoutProductInput> | ProductToolCreateWithoutProductInput[] | ProductToolUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductToolCreateOrConnectWithoutProductInput | ProductToolCreateOrConnectWithoutProductInput[]
    createMany?: ProductToolCreateManyProductInputEnvelope
    connect?: ProductToolWhereUniqueInput | ProductToolWhereUniqueInput[]
  }

  export type BasketUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<BasketCreateWithoutProductInput, BasketUncheckedCreateWithoutProductInput> | BasketCreateWithoutProductInput[] | BasketUncheckedCreateWithoutProductInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutProductInput | BasketCreateOrConnectWithoutProductInput[]
    createMany?: BasketCreateManyProductInputEnvelope
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
  }

  export type OrderItemUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput> | OrderItemCreateWithoutProductInput[] | OrderItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutProductInput | OrderItemCreateOrConnectWithoutProductInput[]
    createMany?: OrderItemCreateManyProductInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type MasterJobsUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<MasterJobsCreateWithoutProductInput, MasterJobsUncheckedCreateWithoutProductInput> | MasterJobsCreateWithoutProductInput[] | MasterJobsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: MasterJobsCreateOrConnectWithoutProductInput | MasterJobsCreateOrConnectWithoutProductInput[]
    createMany?: MasterJobsCreateManyProductInputEnvelope
    connect?: MasterJobsWhereUniqueInput | MasterJobsWhereUniqueInput[]
  }

  export type ProductLevelUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductLevelCreateWithoutProductInput, ProductLevelUncheckedCreateWithoutProductInput> | ProductLevelCreateWithoutProductInput[] | ProductLevelUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductLevelCreateOrConnectWithoutProductInput | ProductLevelCreateOrConnectWithoutProductInput[]
    createMany?: ProductLevelCreateManyProductInputEnvelope
    connect?: ProductLevelWhereUniqueInput | ProductLevelWhereUniqueInput[]
  }

  export type ProductToolUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductToolCreateWithoutProductInput, ProductToolUncheckedCreateWithoutProductInput> | ProductToolCreateWithoutProductInput[] | ProductToolUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductToolCreateOrConnectWithoutProductInput | ProductToolCreateOrConnectWithoutProductInput[]
    createMany?: ProductToolCreateManyProductInputEnvelope
    connect?: ProductToolWhereUniqueInput | ProductToolWhereUniqueInput[]
  }

  export type BasketUpdateManyWithoutProductNestedInput = {
    create?: XOR<BasketCreateWithoutProductInput, BasketUncheckedCreateWithoutProductInput> | BasketCreateWithoutProductInput[] | BasketUncheckedCreateWithoutProductInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutProductInput | BasketCreateOrConnectWithoutProductInput[]
    upsert?: BasketUpsertWithWhereUniqueWithoutProductInput | BasketUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: BasketCreateManyProductInputEnvelope
    set?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    disconnect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    delete?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    update?: BasketUpdateWithWhereUniqueWithoutProductInput | BasketUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: BasketUpdateManyWithWhereWithoutProductInput | BasketUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: BasketScalarWhereInput | BasketScalarWhereInput[]
  }

  export type OrderItemUpdateManyWithoutProductNestedInput = {
    create?: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput> | OrderItemCreateWithoutProductInput[] | OrderItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutProductInput | OrderItemCreateOrConnectWithoutProductInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutProductInput | OrderItemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: OrderItemCreateManyProductInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutProductInput | OrderItemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutProductInput | OrderItemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type MasterJobsUpdateManyWithoutProductNestedInput = {
    create?: XOR<MasterJobsCreateWithoutProductInput, MasterJobsUncheckedCreateWithoutProductInput> | MasterJobsCreateWithoutProductInput[] | MasterJobsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: MasterJobsCreateOrConnectWithoutProductInput | MasterJobsCreateOrConnectWithoutProductInput[]
    upsert?: MasterJobsUpsertWithWhereUniqueWithoutProductInput | MasterJobsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: MasterJobsCreateManyProductInputEnvelope
    set?: MasterJobsWhereUniqueInput | MasterJobsWhereUniqueInput[]
    disconnect?: MasterJobsWhereUniqueInput | MasterJobsWhereUniqueInput[]
    delete?: MasterJobsWhereUniqueInput | MasterJobsWhereUniqueInput[]
    connect?: MasterJobsWhereUniqueInput | MasterJobsWhereUniqueInput[]
    update?: MasterJobsUpdateWithWhereUniqueWithoutProductInput | MasterJobsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: MasterJobsUpdateManyWithWhereWithoutProductInput | MasterJobsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: MasterJobsScalarWhereInput | MasterJobsScalarWhereInput[]
  }

  export type ProductLevelUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductLevelCreateWithoutProductInput, ProductLevelUncheckedCreateWithoutProductInput> | ProductLevelCreateWithoutProductInput[] | ProductLevelUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductLevelCreateOrConnectWithoutProductInput | ProductLevelCreateOrConnectWithoutProductInput[]
    upsert?: ProductLevelUpsertWithWhereUniqueWithoutProductInput | ProductLevelUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductLevelCreateManyProductInputEnvelope
    set?: ProductLevelWhereUniqueInput | ProductLevelWhereUniqueInput[]
    disconnect?: ProductLevelWhereUniqueInput | ProductLevelWhereUniqueInput[]
    delete?: ProductLevelWhereUniqueInput | ProductLevelWhereUniqueInput[]
    connect?: ProductLevelWhereUniqueInput | ProductLevelWhereUniqueInput[]
    update?: ProductLevelUpdateWithWhereUniqueWithoutProductInput | ProductLevelUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductLevelUpdateManyWithWhereWithoutProductInput | ProductLevelUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductLevelScalarWhereInput | ProductLevelScalarWhereInput[]
  }

  export type ProductToolUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductToolCreateWithoutProductInput, ProductToolUncheckedCreateWithoutProductInput> | ProductToolCreateWithoutProductInput[] | ProductToolUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductToolCreateOrConnectWithoutProductInput | ProductToolCreateOrConnectWithoutProductInput[]
    upsert?: ProductToolUpsertWithWhereUniqueWithoutProductInput | ProductToolUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductToolCreateManyProductInputEnvelope
    set?: ProductToolWhereUniqueInput | ProductToolWhereUniqueInput[]
    disconnect?: ProductToolWhereUniqueInput | ProductToolWhereUniqueInput[]
    delete?: ProductToolWhereUniqueInput | ProductToolWhereUniqueInput[]
    connect?: ProductToolWhereUniqueInput | ProductToolWhereUniqueInput[]
    update?: ProductToolUpdateWithWhereUniqueWithoutProductInput | ProductToolUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductToolUpdateManyWithWhereWithoutProductInput | ProductToolUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductToolScalarWhereInput | ProductToolScalarWhereInput[]
  }

  export type BasketUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<BasketCreateWithoutProductInput, BasketUncheckedCreateWithoutProductInput> | BasketCreateWithoutProductInput[] | BasketUncheckedCreateWithoutProductInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutProductInput | BasketCreateOrConnectWithoutProductInput[]
    upsert?: BasketUpsertWithWhereUniqueWithoutProductInput | BasketUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: BasketCreateManyProductInputEnvelope
    set?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    disconnect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    delete?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    update?: BasketUpdateWithWhereUniqueWithoutProductInput | BasketUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: BasketUpdateManyWithWhereWithoutProductInput | BasketUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: BasketScalarWhereInput | BasketScalarWhereInput[]
  }

  export type OrderItemUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput> | OrderItemCreateWithoutProductInput[] | OrderItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutProductInput | OrderItemCreateOrConnectWithoutProductInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutProductInput | OrderItemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: OrderItemCreateManyProductInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutProductInput | OrderItemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutProductInput | OrderItemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type MasterJobsUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<MasterJobsCreateWithoutProductInput, MasterJobsUncheckedCreateWithoutProductInput> | MasterJobsCreateWithoutProductInput[] | MasterJobsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: MasterJobsCreateOrConnectWithoutProductInput | MasterJobsCreateOrConnectWithoutProductInput[]
    upsert?: MasterJobsUpsertWithWhereUniqueWithoutProductInput | MasterJobsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: MasterJobsCreateManyProductInputEnvelope
    set?: MasterJobsWhereUniqueInput | MasterJobsWhereUniqueInput[]
    disconnect?: MasterJobsWhereUniqueInput | MasterJobsWhereUniqueInput[]
    delete?: MasterJobsWhereUniqueInput | MasterJobsWhereUniqueInput[]
    connect?: MasterJobsWhereUniqueInput | MasterJobsWhereUniqueInput[]
    update?: MasterJobsUpdateWithWhereUniqueWithoutProductInput | MasterJobsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: MasterJobsUpdateManyWithWhereWithoutProductInput | MasterJobsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: MasterJobsScalarWhereInput | MasterJobsScalarWhereInput[]
  }

  export type ProductLevelUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductLevelCreateWithoutProductInput, ProductLevelUncheckedCreateWithoutProductInput> | ProductLevelCreateWithoutProductInput[] | ProductLevelUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductLevelCreateOrConnectWithoutProductInput | ProductLevelCreateOrConnectWithoutProductInput[]
    upsert?: ProductLevelUpsertWithWhereUniqueWithoutProductInput | ProductLevelUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductLevelCreateManyProductInputEnvelope
    set?: ProductLevelWhereUniqueInput | ProductLevelWhereUniqueInput[]
    disconnect?: ProductLevelWhereUniqueInput | ProductLevelWhereUniqueInput[]
    delete?: ProductLevelWhereUniqueInput | ProductLevelWhereUniqueInput[]
    connect?: ProductLevelWhereUniqueInput | ProductLevelWhereUniqueInput[]
    update?: ProductLevelUpdateWithWhereUniqueWithoutProductInput | ProductLevelUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductLevelUpdateManyWithWhereWithoutProductInput | ProductLevelUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductLevelScalarWhereInput | ProductLevelScalarWhereInput[]
  }

  export type ProductToolUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductToolCreateWithoutProductInput, ProductToolUncheckedCreateWithoutProductInput> | ProductToolCreateWithoutProductInput[] | ProductToolUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductToolCreateOrConnectWithoutProductInput | ProductToolCreateOrConnectWithoutProductInput[]
    upsert?: ProductToolUpsertWithWhereUniqueWithoutProductInput | ProductToolUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductToolCreateManyProductInputEnvelope
    set?: ProductToolWhereUniqueInput | ProductToolWhereUniqueInput[]
    disconnect?: ProductToolWhereUniqueInput | ProductToolWhereUniqueInput[]
    delete?: ProductToolWhereUniqueInput | ProductToolWhereUniqueInput[]
    connect?: ProductToolWhereUniqueInput | ProductToolWhereUniqueInput[]
    update?: ProductToolUpdateWithWhereUniqueWithoutProductInput | ProductToolUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductToolUpdateManyWithWhereWithoutProductInput | ProductToolUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductToolScalarWhereInput | ProductToolScalarWhereInput[]
  }

  export type OrderItemCreateNestedManyWithoutLevelInput = {
    create?: XOR<OrderItemCreateWithoutLevelInput, OrderItemUncheckedCreateWithoutLevelInput> | OrderItemCreateWithoutLevelInput[] | OrderItemUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutLevelInput | OrderItemCreateOrConnectWithoutLevelInput[]
    createMany?: OrderItemCreateManyLevelInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type MasterJobsCreateNestedManyWithoutLevelInput = {
    create?: XOR<MasterJobsCreateWithoutLevelInput, MasterJobsUncheckedCreateWithoutLevelInput> | MasterJobsCreateWithoutLevelInput[] | MasterJobsUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: MasterJobsCreateOrConnectWithoutLevelInput | MasterJobsCreateOrConnectWithoutLevelInput[]
    createMany?: MasterJobsCreateManyLevelInputEnvelope
    connect?: MasterJobsWhereUniqueInput | MasterJobsWhereUniqueInput[]
  }

  export type ProductLevelCreateNestedManyWithoutLevelInput = {
    create?: XOR<ProductLevelCreateWithoutLevelInput, ProductLevelUncheckedCreateWithoutLevelInput> | ProductLevelCreateWithoutLevelInput[] | ProductLevelUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: ProductLevelCreateOrConnectWithoutLevelInput | ProductLevelCreateOrConnectWithoutLevelInput[]
    createMany?: ProductLevelCreateManyLevelInputEnvelope
    connect?: ProductLevelWhereUniqueInput | ProductLevelWhereUniqueInput[]
  }

  export type BasketCreateNestedManyWithoutLevelInput = {
    create?: XOR<BasketCreateWithoutLevelInput, BasketUncheckedCreateWithoutLevelInput> | BasketCreateWithoutLevelInput[] | BasketUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutLevelInput | BasketCreateOrConnectWithoutLevelInput[]
    createMany?: BasketCreateManyLevelInputEnvelope
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
  }

  export type OrderItemUncheckedCreateNestedManyWithoutLevelInput = {
    create?: XOR<OrderItemCreateWithoutLevelInput, OrderItemUncheckedCreateWithoutLevelInput> | OrderItemCreateWithoutLevelInput[] | OrderItemUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutLevelInput | OrderItemCreateOrConnectWithoutLevelInput[]
    createMany?: OrderItemCreateManyLevelInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type MasterJobsUncheckedCreateNestedManyWithoutLevelInput = {
    create?: XOR<MasterJobsCreateWithoutLevelInput, MasterJobsUncheckedCreateWithoutLevelInput> | MasterJobsCreateWithoutLevelInput[] | MasterJobsUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: MasterJobsCreateOrConnectWithoutLevelInput | MasterJobsCreateOrConnectWithoutLevelInput[]
    createMany?: MasterJobsCreateManyLevelInputEnvelope
    connect?: MasterJobsWhereUniqueInput | MasterJobsWhereUniqueInput[]
  }

  export type ProductLevelUncheckedCreateNestedManyWithoutLevelInput = {
    create?: XOR<ProductLevelCreateWithoutLevelInput, ProductLevelUncheckedCreateWithoutLevelInput> | ProductLevelCreateWithoutLevelInput[] | ProductLevelUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: ProductLevelCreateOrConnectWithoutLevelInput | ProductLevelCreateOrConnectWithoutLevelInput[]
    createMany?: ProductLevelCreateManyLevelInputEnvelope
    connect?: ProductLevelWhereUniqueInput | ProductLevelWhereUniqueInput[]
  }

  export type BasketUncheckedCreateNestedManyWithoutLevelInput = {
    create?: XOR<BasketCreateWithoutLevelInput, BasketUncheckedCreateWithoutLevelInput> | BasketCreateWithoutLevelInput[] | BasketUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutLevelInput | BasketCreateOrConnectWithoutLevelInput[]
    createMany?: BasketCreateManyLevelInputEnvelope
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
  }

  export type OrderItemUpdateManyWithoutLevelNestedInput = {
    create?: XOR<OrderItemCreateWithoutLevelInput, OrderItemUncheckedCreateWithoutLevelInput> | OrderItemCreateWithoutLevelInput[] | OrderItemUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutLevelInput | OrderItemCreateOrConnectWithoutLevelInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutLevelInput | OrderItemUpsertWithWhereUniqueWithoutLevelInput[]
    createMany?: OrderItemCreateManyLevelInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutLevelInput | OrderItemUpdateWithWhereUniqueWithoutLevelInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutLevelInput | OrderItemUpdateManyWithWhereWithoutLevelInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type MasterJobsUpdateManyWithoutLevelNestedInput = {
    create?: XOR<MasterJobsCreateWithoutLevelInput, MasterJobsUncheckedCreateWithoutLevelInput> | MasterJobsCreateWithoutLevelInput[] | MasterJobsUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: MasterJobsCreateOrConnectWithoutLevelInput | MasterJobsCreateOrConnectWithoutLevelInput[]
    upsert?: MasterJobsUpsertWithWhereUniqueWithoutLevelInput | MasterJobsUpsertWithWhereUniqueWithoutLevelInput[]
    createMany?: MasterJobsCreateManyLevelInputEnvelope
    set?: MasterJobsWhereUniqueInput | MasterJobsWhereUniqueInput[]
    disconnect?: MasterJobsWhereUniqueInput | MasterJobsWhereUniqueInput[]
    delete?: MasterJobsWhereUniqueInput | MasterJobsWhereUniqueInput[]
    connect?: MasterJobsWhereUniqueInput | MasterJobsWhereUniqueInput[]
    update?: MasterJobsUpdateWithWhereUniqueWithoutLevelInput | MasterJobsUpdateWithWhereUniqueWithoutLevelInput[]
    updateMany?: MasterJobsUpdateManyWithWhereWithoutLevelInput | MasterJobsUpdateManyWithWhereWithoutLevelInput[]
    deleteMany?: MasterJobsScalarWhereInput | MasterJobsScalarWhereInput[]
  }

  export type ProductLevelUpdateManyWithoutLevelNestedInput = {
    create?: XOR<ProductLevelCreateWithoutLevelInput, ProductLevelUncheckedCreateWithoutLevelInput> | ProductLevelCreateWithoutLevelInput[] | ProductLevelUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: ProductLevelCreateOrConnectWithoutLevelInput | ProductLevelCreateOrConnectWithoutLevelInput[]
    upsert?: ProductLevelUpsertWithWhereUniqueWithoutLevelInput | ProductLevelUpsertWithWhereUniqueWithoutLevelInput[]
    createMany?: ProductLevelCreateManyLevelInputEnvelope
    set?: ProductLevelWhereUniqueInput | ProductLevelWhereUniqueInput[]
    disconnect?: ProductLevelWhereUniqueInput | ProductLevelWhereUniqueInput[]
    delete?: ProductLevelWhereUniqueInput | ProductLevelWhereUniqueInput[]
    connect?: ProductLevelWhereUniqueInput | ProductLevelWhereUniqueInput[]
    update?: ProductLevelUpdateWithWhereUniqueWithoutLevelInput | ProductLevelUpdateWithWhereUniqueWithoutLevelInput[]
    updateMany?: ProductLevelUpdateManyWithWhereWithoutLevelInput | ProductLevelUpdateManyWithWhereWithoutLevelInput[]
    deleteMany?: ProductLevelScalarWhereInput | ProductLevelScalarWhereInput[]
  }

  export type BasketUpdateManyWithoutLevelNestedInput = {
    create?: XOR<BasketCreateWithoutLevelInput, BasketUncheckedCreateWithoutLevelInput> | BasketCreateWithoutLevelInput[] | BasketUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutLevelInput | BasketCreateOrConnectWithoutLevelInput[]
    upsert?: BasketUpsertWithWhereUniqueWithoutLevelInput | BasketUpsertWithWhereUniqueWithoutLevelInput[]
    createMany?: BasketCreateManyLevelInputEnvelope
    set?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    disconnect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    delete?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    update?: BasketUpdateWithWhereUniqueWithoutLevelInput | BasketUpdateWithWhereUniqueWithoutLevelInput[]
    updateMany?: BasketUpdateManyWithWhereWithoutLevelInput | BasketUpdateManyWithWhereWithoutLevelInput[]
    deleteMany?: BasketScalarWhereInput | BasketScalarWhereInput[]
  }

  export type OrderItemUncheckedUpdateManyWithoutLevelNestedInput = {
    create?: XOR<OrderItemCreateWithoutLevelInput, OrderItemUncheckedCreateWithoutLevelInput> | OrderItemCreateWithoutLevelInput[] | OrderItemUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutLevelInput | OrderItemCreateOrConnectWithoutLevelInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutLevelInput | OrderItemUpsertWithWhereUniqueWithoutLevelInput[]
    createMany?: OrderItemCreateManyLevelInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutLevelInput | OrderItemUpdateWithWhereUniqueWithoutLevelInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutLevelInput | OrderItemUpdateManyWithWhereWithoutLevelInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type MasterJobsUncheckedUpdateManyWithoutLevelNestedInput = {
    create?: XOR<MasterJobsCreateWithoutLevelInput, MasterJobsUncheckedCreateWithoutLevelInput> | MasterJobsCreateWithoutLevelInput[] | MasterJobsUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: MasterJobsCreateOrConnectWithoutLevelInput | MasterJobsCreateOrConnectWithoutLevelInput[]
    upsert?: MasterJobsUpsertWithWhereUniqueWithoutLevelInput | MasterJobsUpsertWithWhereUniqueWithoutLevelInput[]
    createMany?: MasterJobsCreateManyLevelInputEnvelope
    set?: MasterJobsWhereUniqueInput | MasterJobsWhereUniqueInput[]
    disconnect?: MasterJobsWhereUniqueInput | MasterJobsWhereUniqueInput[]
    delete?: MasterJobsWhereUniqueInput | MasterJobsWhereUniqueInput[]
    connect?: MasterJobsWhereUniqueInput | MasterJobsWhereUniqueInput[]
    update?: MasterJobsUpdateWithWhereUniqueWithoutLevelInput | MasterJobsUpdateWithWhereUniqueWithoutLevelInput[]
    updateMany?: MasterJobsUpdateManyWithWhereWithoutLevelInput | MasterJobsUpdateManyWithWhereWithoutLevelInput[]
    deleteMany?: MasterJobsScalarWhereInput | MasterJobsScalarWhereInput[]
  }

  export type ProductLevelUncheckedUpdateManyWithoutLevelNestedInput = {
    create?: XOR<ProductLevelCreateWithoutLevelInput, ProductLevelUncheckedCreateWithoutLevelInput> | ProductLevelCreateWithoutLevelInput[] | ProductLevelUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: ProductLevelCreateOrConnectWithoutLevelInput | ProductLevelCreateOrConnectWithoutLevelInput[]
    upsert?: ProductLevelUpsertWithWhereUniqueWithoutLevelInput | ProductLevelUpsertWithWhereUniqueWithoutLevelInput[]
    createMany?: ProductLevelCreateManyLevelInputEnvelope
    set?: ProductLevelWhereUniqueInput | ProductLevelWhereUniqueInput[]
    disconnect?: ProductLevelWhereUniqueInput | ProductLevelWhereUniqueInput[]
    delete?: ProductLevelWhereUniqueInput | ProductLevelWhereUniqueInput[]
    connect?: ProductLevelWhereUniqueInput | ProductLevelWhereUniqueInput[]
    update?: ProductLevelUpdateWithWhereUniqueWithoutLevelInput | ProductLevelUpdateWithWhereUniqueWithoutLevelInput[]
    updateMany?: ProductLevelUpdateManyWithWhereWithoutLevelInput | ProductLevelUpdateManyWithWhereWithoutLevelInput[]
    deleteMany?: ProductLevelScalarWhereInput | ProductLevelScalarWhereInput[]
  }

  export type BasketUncheckedUpdateManyWithoutLevelNestedInput = {
    create?: XOR<BasketCreateWithoutLevelInput, BasketUncheckedCreateWithoutLevelInput> | BasketCreateWithoutLevelInput[] | BasketUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutLevelInput | BasketCreateOrConnectWithoutLevelInput[]
    upsert?: BasketUpsertWithWhereUniqueWithoutLevelInput | BasketUpsertWithWhereUniqueWithoutLevelInput[]
    createMany?: BasketCreateManyLevelInputEnvelope
    set?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    disconnect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    delete?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    update?: BasketUpdateWithWhereUniqueWithoutLevelInput | BasketUpdateWithWhereUniqueWithoutLevelInput[]
    updateMany?: BasketUpdateManyWithWhereWithoutLevelInput | BasketUpdateManyWithWhereWithoutLevelInput[]
    deleteMany?: BasketScalarWhereInput | BasketScalarWhereInput[]
  }

  export type BrandCreateNestedOneWithoutToolsInput = {
    create?: XOR<BrandCreateWithoutToolsInput, BrandUncheckedCreateWithoutToolsInput>
    connectOrCreate?: BrandCreateOrConnectWithoutToolsInput
    connect?: BrandWhereUniqueInput
  }

  export type CapacityCreateNestedOneWithoutToolsInput = {
    create?: XOR<CapacityCreateWithoutToolsInput, CapacityUncheckedCreateWithoutToolsInput>
    connectOrCreate?: CapacityCreateOrConnectWithoutToolsInput
    connect?: CapacityWhereUniqueInput
  }

  export type SizeCreateNestedOneWithoutToolsInput = {
    create?: XOR<SizeCreateWithoutToolsInput, SizeUncheckedCreateWithoutToolsInput>
    connectOrCreate?: SizeCreateOrConnectWithoutToolsInput
    connect?: SizeWhereUniqueInput
  }

  export type OrderItemCreateNestedManyWithoutToolInput = {
    create?: XOR<OrderItemCreateWithoutToolInput, OrderItemUncheckedCreateWithoutToolInput> | OrderItemCreateWithoutToolInput[] | OrderItemUncheckedCreateWithoutToolInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutToolInput | OrderItemCreateOrConnectWithoutToolInput[]
    createMany?: OrderItemCreateManyToolInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type MasterJobsCreateNestedManyWithoutToolInput = {
    create?: XOR<MasterJobsCreateWithoutToolInput, MasterJobsUncheckedCreateWithoutToolInput> | MasterJobsCreateWithoutToolInput[] | MasterJobsUncheckedCreateWithoutToolInput[]
    connectOrCreate?: MasterJobsCreateOrConnectWithoutToolInput | MasterJobsCreateOrConnectWithoutToolInput[]
    createMany?: MasterJobsCreateManyToolInputEnvelope
    connect?: MasterJobsWhereUniqueInput | MasterJobsWhereUniqueInput[]
  }

  export type BasketCreateNestedManyWithoutToolInput = {
    create?: XOR<BasketCreateWithoutToolInput, BasketUncheckedCreateWithoutToolInput> | BasketCreateWithoutToolInput[] | BasketUncheckedCreateWithoutToolInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutToolInput | BasketCreateOrConnectWithoutToolInput[]
    createMany?: BasketCreateManyToolInputEnvelope
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
  }

  export type ProductToolCreateNestedManyWithoutToolInput = {
    create?: XOR<ProductToolCreateWithoutToolInput, ProductToolUncheckedCreateWithoutToolInput> | ProductToolCreateWithoutToolInput[] | ProductToolUncheckedCreateWithoutToolInput[]
    connectOrCreate?: ProductToolCreateOrConnectWithoutToolInput | ProductToolCreateOrConnectWithoutToolInput[]
    createMany?: ProductToolCreateManyToolInputEnvelope
    connect?: ProductToolWhereUniqueInput | ProductToolWhereUniqueInput[]
  }

  export type OrderItemUncheckedCreateNestedManyWithoutToolInput = {
    create?: XOR<OrderItemCreateWithoutToolInput, OrderItemUncheckedCreateWithoutToolInput> | OrderItemCreateWithoutToolInput[] | OrderItemUncheckedCreateWithoutToolInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutToolInput | OrderItemCreateOrConnectWithoutToolInput[]
    createMany?: OrderItemCreateManyToolInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type MasterJobsUncheckedCreateNestedManyWithoutToolInput = {
    create?: XOR<MasterJobsCreateWithoutToolInput, MasterJobsUncheckedCreateWithoutToolInput> | MasterJobsCreateWithoutToolInput[] | MasterJobsUncheckedCreateWithoutToolInput[]
    connectOrCreate?: MasterJobsCreateOrConnectWithoutToolInput | MasterJobsCreateOrConnectWithoutToolInput[]
    createMany?: MasterJobsCreateManyToolInputEnvelope
    connect?: MasterJobsWhereUniqueInput | MasterJobsWhereUniqueInput[]
  }

  export type BasketUncheckedCreateNestedManyWithoutToolInput = {
    create?: XOR<BasketCreateWithoutToolInput, BasketUncheckedCreateWithoutToolInput> | BasketCreateWithoutToolInput[] | BasketUncheckedCreateWithoutToolInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutToolInput | BasketCreateOrConnectWithoutToolInput[]
    createMany?: BasketCreateManyToolInputEnvelope
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
  }

  export type ProductToolUncheckedCreateNestedManyWithoutToolInput = {
    create?: XOR<ProductToolCreateWithoutToolInput, ProductToolUncheckedCreateWithoutToolInput> | ProductToolCreateWithoutToolInput[] | ProductToolUncheckedCreateWithoutToolInput[]
    connectOrCreate?: ProductToolCreateOrConnectWithoutToolInput | ProductToolCreateOrConnectWithoutToolInput[]
    createMany?: ProductToolCreateManyToolInputEnvelope
    connect?: ProductToolWhereUniqueInput | ProductToolWhereUniqueInput[]
  }

  export type BrandUpdateOneRequiredWithoutToolsNestedInput = {
    create?: XOR<BrandCreateWithoutToolsInput, BrandUncheckedCreateWithoutToolsInput>
    connectOrCreate?: BrandCreateOrConnectWithoutToolsInput
    upsert?: BrandUpsertWithoutToolsInput
    connect?: BrandWhereUniqueInput
    update?: XOR<XOR<BrandUpdateToOneWithWhereWithoutToolsInput, BrandUpdateWithoutToolsInput>, BrandUncheckedUpdateWithoutToolsInput>
  }

  export type CapacityUpdateOneRequiredWithoutToolsNestedInput = {
    create?: XOR<CapacityCreateWithoutToolsInput, CapacityUncheckedCreateWithoutToolsInput>
    connectOrCreate?: CapacityCreateOrConnectWithoutToolsInput
    upsert?: CapacityUpsertWithoutToolsInput
    connect?: CapacityWhereUniqueInput
    update?: XOR<XOR<CapacityUpdateToOneWithWhereWithoutToolsInput, CapacityUpdateWithoutToolsInput>, CapacityUncheckedUpdateWithoutToolsInput>
  }

  export type SizeUpdateOneRequiredWithoutToolsNestedInput = {
    create?: XOR<SizeCreateWithoutToolsInput, SizeUncheckedCreateWithoutToolsInput>
    connectOrCreate?: SizeCreateOrConnectWithoutToolsInput
    upsert?: SizeUpsertWithoutToolsInput
    connect?: SizeWhereUniqueInput
    update?: XOR<XOR<SizeUpdateToOneWithWhereWithoutToolsInput, SizeUpdateWithoutToolsInput>, SizeUncheckedUpdateWithoutToolsInput>
  }

  export type OrderItemUpdateManyWithoutToolNestedInput = {
    create?: XOR<OrderItemCreateWithoutToolInput, OrderItemUncheckedCreateWithoutToolInput> | OrderItemCreateWithoutToolInput[] | OrderItemUncheckedCreateWithoutToolInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutToolInput | OrderItemCreateOrConnectWithoutToolInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutToolInput | OrderItemUpsertWithWhereUniqueWithoutToolInput[]
    createMany?: OrderItemCreateManyToolInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutToolInput | OrderItemUpdateWithWhereUniqueWithoutToolInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutToolInput | OrderItemUpdateManyWithWhereWithoutToolInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type MasterJobsUpdateManyWithoutToolNestedInput = {
    create?: XOR<MasterJobsCreateWithoutToolInput, MasterJobsUncheckedCreateWithoutToolInput> | MasterJobsCreateWithoutToolInput[] | MasterJobsUncheckedCreateWithoutToolInput[]
    connectOrCreate?: MasterJobsCreateOrConnectWithoutToolInput | MasterJobsCreateOrConnectWithoutToolInput[]
    upsert?: MasterJobsUpsertWithWhereUniqueWithoutToolInput | MasterJobsUpsertWithWhereUniqueWithoutToolInput[]
    createMany?: MasterJobsCreateManyToolInputEnvelope
    set?: MasterJobsWhereUniqueInput | MasterJobsWhereUniqueInput[]
    disconnect?: MasterJobsWhereUniqueInput | MasterJobsWhereUniqueInput[]
    delete?: MasterJobsWhereUniqueInput | MasterJobsWhereUniqueInput[]
    connect?: MasterJobsWhereUniqueInput | MasterJobsWhereUniqueInput[]
    update?: MasterJobsUpdateWithWhereUniqueWithoutToolInput | MasterJobsUpdateWithWhereUniqueWithoutToolInput[]
    updateMany?: MasterJobsUpdateManyWithWhereWithoutToolInput | MasterJobsUpdateManyWithWhereWithoutToolInput[]
    deleteMany?: MasterJobsScalarWhereInput | MasterJobsScalarWhereInput[]
  }

  export type BasketUpdateManyWithoutToolNestedInput = {
    create?: XOR<BasketCreateWithoutToolInput, BasketUncheckedCreateWithoutToolInput> | BasketCreateWithoutToolInput[] | BasketUncheckedCreateWithoutToolInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutToolInput | BasketCreateOrConnectWithoutToolInput[]
    upsert?: BasketUpsertWithWhereUniqueWithoutToolInput | BasketUpsertWithWhereUniqueWithoutToolInput[]
    createMany?: BasketCreateManyToolInputEnvelope
    set?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    disconnect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    delete?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    update?: BasketUpdateWithWhereUniqueWithoutToolInput | BasketUpdateWithWhereUniqueWithoutToolInput[]
    updateMany?: BasketUpdateManyWithWhereWithoutToolInput | BasketUpdateManyWithWhereWithoutToolInput[]
    deleteMany?: BasketScalarWhereInput | BasketScalarWhereInput[]
  }

  export type ProductToolUpdateManyWithoutToolNestedInput = {
    create?: XOR<ProductToolCreateWithoutToolInput, ProductToolUncheckedCreateWithoutToolInput> | ProductToolCreateWithoutToolInput[] | ProductToolUncheckedCreateWithoutToolInput[]
    connectOrCreate?: ProductToolCreateOrConnectWithoutToolInput | ProductToolCreateOrConnectWithoutToolInput[]
    upsert?: ProductToolUpsertWithWhereUniqueWithoutToolInput | ProductToolUpsertWithWhereUniqueWithoutToolInput[]
    createMany?: ProductToolCreateManyToolInputEnvelope
    set?: ProductToolWhereUniqueInput | ProductToolWhereUniqueInput[]
    disconnect?: ProductToolWhereUniqueInput | ProductToolWhereUniqueInput[]
    delete?: ProductToolWhereUniqueInput | ProductToolWhereUniqueInput[]
    connect?: ProductToolWhereUniqueInput | ProductToolWhereUniqueInput[]
    update?: ProductToolUpdateWithWhereUniqueWithoutToolInput | ProductToolUpdateWithWhereUniqueWithoutToolInput[]
    updateMany?: ProductToolUpdateManyWithWhereWithoutToolInput | ProductToolUpdateManyWithWhereWithoutToolInput[]
    deleteMany?: ProductToolScalarWhereInput | ProductToolScalarWhereInput[]
  }

  export type OrderItemUncheckedUpdateManyWithoutToolNestedInput = {
    create?: XOR<OrderItemCreateWithoutToolInput, OrderItemUncheckedCreateWithoutToolInput> | OrderItemCreateWithoutToolInput[] | OrderItemUncheckedCreateWithoutToolInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutToolInput | OrderItemCreateOrConnectWithoutToolInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutToolInput | OrderItemUpsertWithWhereUniqueWithoutToolInput[]
    createMany?: OrderItemCreateManyToolInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutToolInput | OrderItemUpdateWithWhereUniqueWithoutToolInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutToolInput | OrderItemUpdateManyWithWhereWithoutToolInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type MasterJobsUncheckedUpdateManyWithoutToolNestedInput = {
    create?: XOR<MasterJobsCreateWithoutToolInput, MasterJobsUncheckedCreateWithoutToolInput> | MasterJobsCreateWithoutToolInput[] | MasterJobsUncheckedCreateWithoutToolInput[]
    connectOrCreate?: MasterJobsCreateOrConnectWithoutToolInput | MasterJobsCreateOrConnectWithoutToolInput[]
    upsert?: MasterJobsUpsertWithWhereUniqueWithoutToolInput | MasterJobsUpsertWithWhereUniqueWithoutToolInput[]
    createMany?: MasterJobsCreateManyToolInputEnvelope
    set?: MasterJobsWhereUniqueInput | MasterJobsWhereUniqueInput[]
    disconnect?: MasterJobsWhereUniqueInput | MasterJobsWhereUniqueInput[]
    delete?: MasterJobsWhereUniqueInput | MasterJobsWhereUniqueInput[]
    connect?: MasterJobsWhereUniqueInput | MasterJobsWhereUniqueInput[]
    update?: MasterJobsUpdateWithWhereUniqueWithoutToolInput | MasterJobsUpdateWithWhereUniqueWithoutToolInput[]
    updateMany?: MasterJobsUpdateManyWithWhereWithoutToolInput | MasterJobsUpdateManyWithWhereWithoutToolInput[]
    deleteMany?: MasterJobsScalarWhereInput | MasterJobsScalarWhereInput[]
  }

  export type BasketUncheckedUpdateManyWithoutToolNestedInput = {
    create?: XOR<BasketCreateWithoutToolInput, BasketUncheckedCreateWithoutToolInput> | BasketCreateWithoutToolInput[] | BasketUncheckedCreateWithoutToolInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutToolInput | BasketCreateOrConnectWithoutToolInput[]
    upsert?: BasketUpsertWithWhereUniqueWithoutToolInput | BasketUpsertWithWhereUniqueWithoutToolInput[]
    createMany?: BasketCreateManyToolInputEnvelope
    set?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    disconnect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    delete?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    update?: BasketUpdateWithWhereUniqueWithoutToolInput | BasketUpdateWithWhereUniqueWithoutToolInput[]
    updateMany?: BasketUpdateManyWithWhereWithoutToolInput | BasketUpdateManyWithWhereWithoutToolInput[]
    deleteMany?: BasketScalarWhereInput | BasketScalarWhereInput[]
  }

  export type ProductToolUncheckedUpdateManyWithoutToolNestedInput = {
    create?: XOR<ProductToolCreateWithoutToolInput, ProductToolUncheckedCreateWithoutToolInput> | ProductToolCreateWithoutToolInput[] | ProductToolUncheckedCreateWithoutToolInput[]
    connectOrCreate?: ProductToolCreateOrConnectWithoutToolInput | ProductToolCreateOrConnectWithoutToolInput[]
    upsert?: ProductToolUpsertWithWhereUniqueWithoutToolInput | ProductToolUpsertWithWhereUniqueWithoutToolInput[]
    createMany?: ProductToolCreateManyToolInputEnvelope
    set?: ProductToolWhereUniqueInput | ProductToolWhereUniqueInput[]
    disconnect?: ProductToolWhereUniqueInput | ProductToolWhereUniqueInput[]
    delete?: ProductToolWhereUniqueInput | ProductToolWhereUniqueInput[]
    connect?: ProductToolWhereUniqueInput | ProductToolWhereUniqueInput[]
    update?: ProductToolUpdateWithWhereUniqueWithoutToolInput | ProductToolUpdateWithWhereUniqueWithoutToolInput[]
    updateMany?: ProductToolUpdateManyWithWhereWithoutToolInput | ProductToolUpdateManyWithWhereWithoutToolInput[]
    deleteMany?: ProductToolScalarWhereInput | ProductToolScalarWhereInput[]
  }

  export type ProductCreateNestedOneWithoutLevelsInput = {
    create?: XOR<ProductCreateWithoutLevelsInput, ProductUncheckedCreateWithoutLevelsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutLevelsInput
    connect?: ProductWhereUniqueInput
  }

  export type LevelCreateNestedOneWithoutProductsInput = {
    create?: XOR<LevelCreateWithoutProductsInput, LevelUncheckedCreateWithoutProductsInput>
    connectOrCreate?: LevelCreateOrConnectWithoutProductsInput
    connect?: LevelWhereUniqueInput
  }

  export type ProductUpdateOneRequiredWithoutLevelsNestedInput = {
    create?: XOR<ProductCreateWithoutLevelsInput, ProductUncheckedCreateWithoutLevelsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutLevelsInput
    upsert?: ProductUpsertWithoutLevelsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutLevelsInput, ProductUpdateWithoutLevelsInput>, ProductUncheckedUpdateWithoutLevelsInput>
  }

  export type LevelUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<LevelCreateWithoutProductsInput, LevelUncheckedCreateWithoutProductsInput>
    connectOrCreate?: LevelCreateOrConnectWithoutProductsInput
    upsert?: LevelUpsertWithoutProductsInput
    connect?: LevelWhereUniqueInput
    update?: XOR<XOR<LevelUpdateToOneWithWhereWithoutProductsInput, LevelUpdateWithoutProductsInput>, LevelUncheckedUpdateWithoutProductsInput>
  }

  export type ProductCreateNestedOneWithoutToolsInput = {
    create?: XOR<ProductCreateWithoutToolsInput, ProductUncheckedCreateWithoutToolsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutToolsInput
    connect?: ProductWhereUniqueInput
  }

  export type ToolCreateNestedOneWithoutProductsInput = {
    create?: XOR<ToolCreateWithoutProductsInput, ToolUncheckedCreateWithoutProductsInput>
    connectOrCreate?: ToolCreateOrConnectWithoutProductsInput
    connect?: ToolWhereUniqueInput
  }

  export type ProductUpdateOneRequiredWithoutToolsNestedInput = {
    create?: XOR<ProductCreateWithoutToolsInput, ProductUncheckedCreateWithoutToolsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutToolsInput
    upsert?: ProductUpsertWithoutToolsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutToolsInput, ProductUpdateWithoutToolsInput>, ProductUncheckedUpdateWithoutToolsInput>
  }

  export type ToolUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<ToolCreateWithoutProductsInput, ToolUncheckedCreateWithoutProductsInput>
    connectOrCreate?: ToolCreateOrConnectWithoutProductsInput
    upsert?: ToolUpsertWithoutProductsInput
    connect?: ToolWhereUniqueInput
    update?: XOR<XOR<ToolUpdateToOneWithWhereWithoutProductsInput, ToolUpdateWithoutProductsInput>, ToolUncheckedUpdateWithoutProductsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedEnumUserStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusFilter<$PrismaModel> | $Enums.UserStatus
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedEnumUserStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusWithAggregatesFilter<$PrismaModel> | $Enums.UserStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserStatusFilter<$PrismaModel>
    _max?: NestedEnumUserStatusFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumPaymentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeFilter<$PrismaModel> | $Enums.PaymentType
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusFilter<$PrismaModel> | $Enums.OrderStatus
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumPaymentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeWithAggregatesFilter<$PrismaModel> | $Enums.PaymentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentTypeFilter<$PrismaModel>
    _max?: NestedEnumPaymentTypeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.OrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumOrderStatusFilter<$PrismaModel>
  }

  export type NestedEnumShowCaseTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ShowCaseType | EnumShowCaseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ShowCaseType[] | ListEnumShowCaseTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ShowCaseType[] | ListEnumShowCaseTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumShowCaseTypeFilter<$PrismaModel> | $Enums.ShowCaseType
  }

  export type NestedEnumShowCaseTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ShowCaseType | EnumShowCaseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ShowCaseType[] | ListEnumShowCaseTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ShowCaseType[] | ListEnumShowCaseTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumShowCaseTypeWithAggregatesFilter<$PrismaModel> | $Enums.ShowCaseType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumShowCaseTypeFilter<$PrismaModel>
    _max?: NestedEnumShowCaseTypeFilter<$PrismaModel>
  }

  export type RegionCreateWithoutUsersInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
  }

  export type RegionUncheckedCreateWithoutUsersInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
  }

  export type RegionCreateOrConnectWithoutUsersInput = {
    where: RegionWhereUniqueInput
    create: XOR<RegionCreateWithoutUsersInput, RegionUncheckedCreateWithoutUsersInput>
  }

  export type BasketCreateWithoutUserInput = {
    id?: string
    timeUnit: number
    count?: number | null
    workingHours: number
    totalPrice?: number | null
    product: ProductCreateNestedOneWithoutBasketsInput
    tool: ToolCreateNestedOneWithoutBasketsInput
    level: LevelCreateNestedOneWithoutBasketsInput
  }

  export type BasketUncheckedCreateWithoutUserInput = {
    id?: string
    productID: string
    toolID: string
    levelID: string
    timeUnit: number
    count?: number | null
    workingHours: number
    totalPrice?: number | null
  }

  export type BasketCreateOrConnectWithoutUserInput = {
    where: BasketWhereUniqueInput
    create: XOR<BasketCreateWithoutUserInput, BasketUncheckedCreateWithoutUserInput>
  }

  export type BasketCreateManyUserInputEnvelope = {
    data: BasketCreateManyUserInput | BasketCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RegionUpsertWithoutUsersInput = {
    update: XOR<RegionUpdateWithoutUsersInput, RegionUncheckedUpdateWithoutUsersInput>
    create: XOR<RegionCreateWithoutUsersInput, RegionUncheckedCreateWithoutUsersInput>
    where?: RegionWhereInput
  }

  export type RegionUpdateToOneWithWhereWithoutUsersInput = {
    where?: RegionWhereInput
    data: XOR<RegionUpdateWithoutUsersInput, RegionUncheckedUpdateWithoutUsersInput>
  }

  export type RegionUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
  }

  export type RegionUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
  }

  export type BasketUpsertWithWhereUniqueWithoutUserInput = {
    where: BasketWhereUniqueInput
    update: XOR<BasketUpdateWithoutUserInput, BasketUncheckedUpdateWithoutUserInput>
    create: XOR<BasketCreateWithoutUserInput, BasketUncheckedCreateWithoutUserInput>
  }

  export type BasketUpdateWithWhereUniqueWithoutUserInput = {
    where: BasketWhereUniqueInput
    data: XOR<BasketUpdateWithoutUserInput, BasketUncheckedUpdateWithoutUserInput>
  }

  export type BasketUpdateManyWithWhereWithoutUserInput = {
    where: BasketScalarWhereInput
    data: XOR<BasketUpdateManyMutationInput, BasketUncheckedUpdateManyWithoutUserInput>
  }

  export type BasketScalarWhereInput = {
    AND?: BasketScalarWhereInput | BasketScalarWhereInput[]
    OR?: BasketScalarWhereInput[]
    NOT?: BasketScalarWhereInput | BasketScalarWhereInput[]
    id?: StringFilter<"Basket"> | string
    userID?: StringFilter<"Basket"> | string
    productID?: StringFilter<"Basket"> | string
    toolID?: StringFilter<"Basket"> | string
    levelID?: StringFilter<"Basket"> | string
    timeUnit?: IntFilter<"Basket"> | number
    count?: IntNullableFilter<"Basket"> | number | null
    workingHours?: IntFilter<"Basket"> | number
    totalPrice?: IntNullableFilter<"Basket"> | number | null
  }

  export type UserCreateWithoutRegionInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    email: string
    password: string
    phone: string
    image: string
    role: $Enums.UserRole
    status: $Enums.UserStatus
    location: string
    passportSeries?: string | null
    inn?: string | null
    baskets?: BasketCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRegionInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    email: string
    password: string
    phone: string
    image: string
    role: $Enums.UserRole
    status: $Enums.UserStatus
    location: string
    passportSeries?: string | null
    inn?: string | null
    baskets?: BasketUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRegionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRegionInput, UserUncheckedCreateWithoutRegionInput>
  }

  export type UserCreateManyRegionInputEnvelope = {
    data: UserCreateManyRegionInput | UserCreateManyRegionInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutRegionInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutRegionInput, UserUncheckedUpdateWithoutRegionInput>
    create: XOR<UserCreateWithoutRegionInput, UserUncheckedCreateWithoutRegionInput>
  }

  export type UserUpdateWithWhereUniqueWithoutRegionInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutRegionInput, UserUncheckedUpdateWithoutRegionInput>
  }

  export type UserUpdateManyWithWhereWithoutRegionInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutRegionInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    nameRu?: StringFilter<"User"> | string
    nameUz?: StringFilter<"User"> | string
    nameEn?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    phone?: StringFilter<"User"> | string
    image?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    status?: EnumUserStatusFilter<"User"> | $Enums.UserStatus
    regionID?: StringNullableFilter<"User"> | string | null
    location?: StringFilter<"User"> | string
    passportSeries?: StringNullableFilter<"User"> | string | null
    inn?: StringNullableFilter<"User"> | string | null
  }

  export type UserCreateWithoutBasketsInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    email: string
    password: string
    phone: string
    image: string
    role: $Enums.UserRole
    status: $Enums.UserStatus
    location: string
    passportSeries?: string | null
    inn?: string | null
    region?: RegionCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutBasketsInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    email: string
    password: string
    phone: string
    image: string
    role: $Enums.UserRole
    status: $Enums.UserStatus
    regionID?: string | null
    location: string
    passportSeries?: string | null
    inn?: string | null
  }

  export type UserCreateOrConnectWithoutBasketsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBasketsInput, UserUncheckedCreateWithoutBasketsInput>
  }

  export type ProductCreateWithoutBasketsInput = {
    id?: string
    isActive: boolean
    nameRu: string
    nameUz: string
    nameEn: string
    image: string
    minWorkingHours: string
    hourlyPrice: number
    dailyPrice: number
    orderItems?: OrderItemCreateNestedManyWithoutProductInput
    masterJobs?: MasterJobsCreateNestedManyWithoutProductInput
    levels?: ProductLevelCreateNestedManyWithoutProductInput
    tools?: ProductToolCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutBasketsInput = {
    id?: string
    isActive: boolean
    nameRu: string
    nameUz: string
    nameEn: string
    image: string
    minWorkingHours: string
    hourlyPrice: number
    dailyPrice: number
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutProductInput
    masterJobs?: MasterJobsUncheckedCreateNestedManyWithoutProductInput
    levels?: ProductLevelUncheckedCreateNestedManyWithoutProductInput
    tools?: ProductToolUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutBasketsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutBasketsInput, ProductUncheckedCreateWithoutBasketsInput>
  }

  export type ToolCreateWithoutBasketsInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    descriptionRu: string
    descriptionUz: string
    descriptionEn: string
    price: number
    quantity: number
    code?: string | null
    image: string
    isActive: boolean
    brand: BrandCreateNestedOneWithoutToolsInput
    capacity: CapacityCreateNestedOneWithoutToolsInput
    size: SizeCreateNestedOneWithoutToolsInput
    orderItems?: OrderItemCreateNestedManyWithoutToolInput
    masterJobs?: MasterJobsCreateNestedManyWithoutToolInput
    products?: ProductToolCreateNestedManyWithoutToolInput
  }

  export type ToolUncheckedCreateWithoutBasketsInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    descriptionRu: string
    descriptionUz: string
    descriptionEn: string
    price: number
    quantity: number
    code?: string | null
    brandID: string
    capacityID: string
    sizeID: string
    image: string
    isActive: boolean
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutToolInput
    masterJobs?: MasterJobsUncheckedCreateNestedManyWithoutToolInput
    products?: ProductToolUncheckedCreateNestedManyWithoutToolInput
  }

  export type ToolCreateOrConnectWithoutBasketsInput = {
    where: ToolWhereUniqueInput
    create: XOR<ToolCreateWithoutBasketsInput, ToolUncheckedCreateWithoutBasketsInput>
  }

  export type LevelCreateWithoutBasketsInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    orderItems?: OrderItemCreateNestedManyWithoutLevelInput
    masterJobs?: MasterJobsCreateNestedManyWithoutLevelInput
    products?: ProductLevelCreateNestedManyWithoutLevelInput
  }

  export type LevelUncheckedCreateWithoutBasketsInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutLevelInput
    masterJobs?: MasterJobsUncheckedCreateNestedManyWithoutLevelInput
    products?: ProductLevelUncheckedCreateNestedManyWithoutLevelInput
  }

  export type LevelCreateOrConnectWithoutBasketsInput = {
    where: LevelWhereUniqueInput
    create: XOR<LevelCreateWithoutBasketsInput, LevelUncheckedCreateWithoutBasketsInput>
  }

  export type UserUpsertWithoutBasketsInput = {
    update: XOR<UserUpdateWithoutBasketsInput, UserUncheckedUpdateWithoutBasketsInput>
    create: XOR<UserCreateWithoutBasketsInput, UserUncheckedCreateWithoutBasketsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBasketsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBasketsInput, UserUncheckedUpdateWithoutBasketsInput>
  }

  export type UserUpdateWithoutBasketsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    location?: StringFieldUpdateOperationsInput | string
    passportSeries?: NullableStringFieldUpdateOperationsInput | string | null
    inn?: NullableStringFieldUpdateOperationsInput | string | null
    region?: RegionUpdateOneWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutBasketsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    regionID?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    passportSeries?: NullableStringFieldUpdateOperationsInput | string | null
    inn?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductUpsertWithoutBasketsInput = {
    update: XOR<ProductUpdateWithoutBasketsInput, ProductUncheckedUpdateWithoutBasketsInput>
    create: XOR<ProductCreateWithoutBasketsInput, ProductUncheckedCreateWithoutBasketsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutBasketsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutBasketsInput, ProductUncheckedUpdateWithoutBasketsInput>
  }

  export type ProductUpdateWithoutBasketsInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    minWorkingHours?: StringFieldUpdateOperationsInput | string
    hourlyPrice?: IntFieldUpdateOperationsInput | number
    dailyPrice?: IntFieldUpdateOperationsInput | number
    orderItems?: OrderItemUpdateManyWithoutProductNestedInput
    masterJobs?: MasterJobsUpdateManyWithoutProductNestedInput
    levels?: ProductLevelUpdateManyWithoutProductNestedInput
    tools?: ProductToolUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutBasketsInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    minWorkingHours?: StringFieldUpdateOperationsInput | string
    hourlyPrice?: IntFieldUpdateOperationsInput | number
    dailyPrice?: IntFieldUpdateOperationsInput | number
    orderItems?: OrderItemUncheckedUpdateManyWithoutProductNestedInput
    masterJobs?: MasterJobsUncheckedUpdateManyWithoutProductNestedInput
    levels?: ProductLevelUncheckedUpdateManyWithoutProductNestedInput
    tools?: ProductToolUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ToolUpsertWithoutBasketsInput = {
    update: XOR<ToolUpdateWithoutBasketsInput, ToolUncheckedUpdateWithoutBasketsInput>
    create: XOR<ToolCreateWithoutBasketsInput, ToolUncheckedCreateWithoutBasketsInput>
    where?: ToolWhereInput
  }

  export type ToolUpdateToOneWithWhereWithoutBasketsInput = {
    where?: ToolWhereInput
    data: XOR<ToolUpdateWithoutBasketsInput, ToolUncheckedUpdateWithoutBasketsInput>
  }

  export type ToolUpdateWithoutBasketsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    descriptionRu?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionEn?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: NullableStringFieldUpdateOperationsInput | string | null
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    brand?: BrandUpdateOneRequiredWithoutToolsNestedInput
    capacity?: CapacityUpdateOneRequiredWithoutToolsNestedInput
    size?: SizeUpdateOneRequiredWithoutToolsNestedInput
    orderItems?: OrderItemUpdateManyWithoutToolNestedInput
    masterJobs?: MasterJobsUpdateManyWithoutToolNestedInput
    products?: ProductToolUpdateManyWithoutToolNestedInput
  }

  export type ToolUncheckedUpdateWithoutBasketsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    descriptionRu?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionEn?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: NullableStringFieldUpdateOperationsInput | string | null
    brandID?: StringFieldUpdateOperationsInput | string
    capacityID?: StringFieldUpdateOperationsInput | string
    sizeID?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    orderItems?: OrderItemUncheckedUpdateManyWithoutToolNestedInput
    masterJobs?: MasterJobsUncheckedUpdateManyWithoutToolNestedInput
    products?: ProductToolUncheckedUpdateManyWithoutToolNestedInput
  }

  export type LevelUpsertWithoutBasketsInput = {
    update: XOR<LevelUpdateWithoutBasketsInput, LevelUncheckedUpdateWithoutBasketsInput>
    create: XOR<LevelCreateWithoutBasketsInput, LevelUncheckedCreateWithoutBasketsInput>
    where?: LevelWhereInput
  }

  export type LevelUpdateToOneWithWhereWithoutBasketsInput = {
    where?: LevelWhereInput
    data: XOR<LevelUpdateWithoutBasketsInput, LevelUncheckedUpdateWithoutBasketsInput>
  }

  export type LevelUpdateWithoutBasketsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    orderItems?: OrderItemUpdateManyWithoutLevelNestedInput
    masterJobs?: MasterJobsUpdateManyWithoutLevelNestedInput
    products?: ProductLevelUpdateManyWithoutLevelNestedInput
  }

  export type LevelUncheckedUpdateWithoutBasketsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    orderItems?: OrderItemUncheckedUpdateManyWithoutLevelNestedInput
    masterJobs?: MasterJobsUncheckedUpdateManyWithoutLevelNestedInput
    products?: ProductLevelUncheckedUpdateManyWithoutLevelNestedInput
  }

  export type OrderItemCreateWithoutOrderInput = {
    id?: string
    timeUnit: number
    count: number
    workingHours: number
    totalPrice?: number | null
    product: ProductCreateNestedOneWithoutOrderItemsInput
    tool: ToolCreateNestedOneWithoutOrderItemsInput
    level: LevelCreateNestedOneWithoutOrderItemsInput
  }

  export type OrderItemUncheckedCreateWithoutOrderInput = {
    id?: string
    productID: string
    toolID: string
    levelID: string
    timeUnit: number
    count: number
    workingHours: number
    totalPrice?: number | null
  }

  export type OrderItemCreateOrConnectWithoutOrderInput = {
    where: OrderItemWhereUniqueInput
    create: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput>
  }

  export type OrderItemCreateManyOrderInputEnvelope = {
    data: OrderItemCreateManyOrderInput | OrderItemCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutOrderInput = {
    id?: string
    message: string
    star: number
    master: MasterCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutOrderInput = {
    id?: string
    message: string
    star: number
    masterID: string
  }

  export type CommentCreateOrConnectWithoutOrderInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutOrderInput, CommentUncheckedCreateWithoutOrderInput>
  }

  export type CommentCreateManyOrderInputEnvelope = {
    data: CommentCreateManyOrderInput | CommentCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type OrderItemUpsertWithWhereUniqueWithoutOrderInput = {
    where: OrderItemWhereUniqueInput
    update: XOR<OrderItemUpdateWithoutOrderInput, OrderItemUncheckedUpdateWithoutOrderInput>
    create: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput>
  }

  export type OrderItemUpdateWithWhereUniqueWithoutOrderInput = {
    where: OrderItemWhereUniqueInput
    data: XOR<OrderItemUpdateWithoutOrderInput, OrderItemUncheckedUpdateWithoutOrderInput>
  }

  export type OrderItemUpdateManyWithWhereWithoutOrderInput = {
    where: OrderItemScalarWhereInput
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyWithoutOrderInput>
  }

  export type OrderItemScalarWhereInput = {
    AND?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
    OR?: OrderItemScalarWhereInput[]
    NOT?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
    id?: StringFilter<"OrderItem"> | string
    orderID?: StringFilter<"OrderItem"> | string
    productID?: StringFilter<"OrderItem"> | string
    toolID?: StringFilter<"OrderItem"> | string
    levelID?: StringFilter<"OrderItem"> | string
    timeUnit?: IntFilter<"OrderItem"> | number
    count?: IntFilter<"OrderItem"> | number
    workingHours?: IntFilter<"OrderItem"> | number
    totalPrice?: IntNullableFilter<"OrderItem"> | number | null
  }

  export type CommentUpsertWithWhereUniqueWithoutOrderInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutOrderInput, CommentUncheckedUpdateWithoutOrderInput>
    create: XOR<CommentCreateWithoutOrderInput, CommentUncheckedCreateWithoutOrderInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutOrderInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutOrderInput, CommentUncheckedUpdateWithoutOrderInput>
  }

  export type CommentUpdateManyWithWhereWithoutOrderInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutOrderInput>
  }

  export type CommentScalarWhereInput = {
    AND?: CommentScalarWhereInput | CommentScalarWhereInput[]
    OR?: CommentScalarWhereInput[]
    NOT?: CommentScalarWhereInput | CommentScalarWhereInput[]
    id?: StringFilter<"Comment"> | string
    message?: StringFilter<"Comment"> | string
    star?: IntFilter<"Comment"> | number
    masterID?: StringFilter<"Comment"> | string
    orderID?: StringFilter<"Comment"> | string
  }

  export type OrderCreateWithoutItemsInput = {
    id?: string
    locationLat: string
    locationLong: string
    address: string
    orderDate?: Date | string
    deliveryDate: Date | string
    paymentType: $Enums.PaymentType
    withDelivery: boolean
    status: $Enums.OrderStatus
    commentToDelivery?: string | null
    comments?: CommentCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutItemsInput = {
    id?: string
    locationLat: string
    locationLong: string
    address: string
    orderDate?: Date | string
    deliveryDate: Date | string
    paymentType: $Enums.PaymentType
    withDelivery: boolean
    status: $Enums.OrderStatus
    commentToDelivery?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutItemsInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutItemsInput, OrderUncheckedCreateWithoutItemsInput>
  }

  export type ProductCreateWithoutOrderItemsInput = {
    id?: string
    isActive: boolean
    nameRu: string
    nameUz: string
    nameEn: string
    image: string
    minWorkingHours: string
    hourlyPrice: number
    dailyPrice: number
    baskets?: BasketCreateNestedManyWithoutProductInput
    masterJobs?: MasterJobsCreateNestedManyWithoutProductInput
    levels?: ProductLevelCreateNestedManyWithoutProductInput
    tools?: ProductToolCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutOrderItemsInput = {
    id?: string
    isActive: boolean
    nameRu: string
    nameUz: string
    nameEn: string
    image: string
    minWorkingHours: string
    hourlyPrice: number
    dailyPrice: number
    baskets?: BasketUncheckedCreateNestedManyWithoutProductInput
    masterJobs?: MasterJobsUncheckedCreateNestedManyWithoutProductInput
    levels?: ProductLevelUncheckedCreateNestedManyWithoutProductInput
    tools?: ProductToolUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutOrderItemsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutOrderItemsInput, ProductUncheckedCreateWithoutOrderItemsInput>
  }

  export type ToolCreateWithoutOrderItemsInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    descriptionRu: string
    descriptionUz: string
    descriptionEn: string
    price: number
    quantity: number
    code?: string | null
    image: string
    isActive: boolean
    brand: BrandCreateNestedOneWithoutToolsInput
    capacity: CapacityCreateNestedOneWithoutToolsInput
    size: SizeCreateNestedOneWithoutToolsInput
    masterJobs?: MasterJobsCreateNestedManyWithoutToolInput
    baskets?: BasketCreateNestedManyWithoutToolInput
    products?: ProductToolCreateNestedManyWithoutToolInput
  }

  export type ToolUncheckedCreateWithoutOrderItemsInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    descriptionRu: string
    descriptionUz: string
    descriptionEn: string
    price: number
    quantity: number
    code?: string | null
    brandID: string
    capacityID: string
    sizeID: string
    image: string
    isActive: boolean
    masterJobs?: MasterJobsUncheckedCreateNestedManyWithoutToolInput
    baskets?: BasketUncheckedCreateNestedManyWithoutToolInput
    products?: ProductToolUncheckedCreateNestedManyWithoutToolInput
  }

  export type ToolCreateOrConnectWithoutOrderItemsInput = {
    where: ToolWhereUniqueInput
    create: XOR<ToolCreateWithoutOrderItemsInput, ToolUncheckedCreateWithoutOrderItemsInput>
  }

  export type LevelCreateWithoutOrderItemsInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    masterJobs?: MasterJobsCreateNestedManyWithoutLevelInput
    products?: ProductLevelCreateNestedManyWithoutLevelInput
    baskets?: BasketCreateNestedManyWithoutLevelInput
  }

  export type LevelUncheckedCreateWithoutOrderItemsInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    masterJobs?: MasterJobsUncheckedCreateNestedManyWithoutLevelInput
    products?: ProductLevelUncheckedCreateNestedManyWithoutLevelInput
    baskets?: BasketUncheckedCreateNestedManyWithoutLevelInput
  }

  export type LevelCreateOrConnectWithoutOrderItemsInput = {
    where: LevelWhereUniqueInput
    create: XOR<LevelCreateWithoutOrderItemsInput, LevelUncheckedCreateWithoutOrderItemsInput>
  }

  export type OrderUpsertWithoutItemsInput = {
    update: XOR<OrderUpdateWithoutItemsInput, OrderUncheckedUpdateWithoutItemsInput>
    create: XOR<OrderCreateWithoutItemsInput, OrderUncheckedCreateWithoutItemsInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutItemsInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutItemsInput, OrderUncheckedUpdateWithoutItemsInput>
  }

  export type OrderUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    locationLat?: StringFieldUpdateOperationsInput | string
    locationLong?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    commentToDelivery?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    locationLat?: StringFieldUpdateOperationsInput | string
    locationLong?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    commentToDelivery?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type ProductUpsertWithoutOrderItemsInput = {
    update: XOR<ProductUpdateWithoutOrderItemsInput, ProductUncheckedUpdateWithoutOrderItemsInput>
    create: XOR<ProductCreateWithoutOrderItemsInput, ProductUncheckedCreateWithoutOrderItemsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutOrderItemsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutOrderItemsInput, ProductUncheckedUpdateWithoutOrderItemsInput>
  }

  export type ProductUpdateWithoutOrderItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    minWorkingHours?: StringFieldUpdateOperationsInput | string
    hourlyPrice?: IntFieldUpdateOperationsInput | number
    dailyPrice?: IntFieldUpdateOperationsInput | number
    baskets?: BasketUpdateManyWithoutProductNestedInput
    masterJobs?: MasterJobsUpdateManyWithoutProductNestedInput
    levels?: ProductLevelUpdateManyWithoutProductNestedInput
    tools?: ProductToolUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutOrderItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    minWorkingHours?: StringFieldUpdateOperationsInput | string
    hourlyPrice?: IntFieldUpdateOperationsInput | number
    dailyPrice?: IntFieldUpdateOperationsInput | number
    baskets?: BasketUncheckedUpdateManyWithoutProductNestedInput
    masterJobs?: MasterJobsUncheckedUpdateManyWithoutProductNestedInput
    levels?: ProductLevelUncheckedUpdateManyWithoutProductNestedInput
    tools?: ProductToolUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ToolUpsertWithoutOrderItemsInput = {
    update: XOR<ToolUpdateWithoutOrderItemsInput, ToolUncheckedUpdateWithoutOrderItemsInput>
    create: XOR<ToolCreateWithoutOrderItemsInput, ToolUncheckedCreateWithoutOrderItemsInput>
    where?: ToolWhereInput
  }

  export type ToolUpdateToOneWithWhereWithoutOrderItemsInput = {
    where?: ToolWhereInput
    data: XOR<ToolUpdateWithoutOrderItemsInput, ToolUncheckedUpdateWithoutOrderItemsInput>
  }

  export type ToolUpdateWithoutOrderItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    descriptionRu?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionEn?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: NullableStringFieldUpdateOperationsInput | string | null
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    brand?: BrandUpdateOneRequiredWithoutToolsNestedInput
    capacity?: CapacityUpdateOneRequiredWithoutToolsNestedInput
    size?: SizeUpdateOneRequiredWithoutToolsNestedInput
    masterJobs?: MasterJobsUpdateManyWithoutToolNestedInput
    baskets?: BasketUpdateManyWithoutToolNestedInput
    products?: ProductToolUpdateManyWithoutToolNestedInput
  }

  export type ToolUncheckedUpdateWithoutOrderItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    descriptionRu?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionEn?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: NullableStringFieldUpdateOperationsInput | string | null
    brandID?: StringFieldUpdateOperationsInput | string
    capacityID?: StringFieldUpdateOperationsInput | string
    sizeID?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    masterJobs?: MasterJobsUncheckedUpdateManyWithoutToolNestedInput
    baskets?: BasketUncheckedUpdateManyWithoutToolNestedInput
    products?: ProductToolUncheckedUpdateManyWithoutToolNestedInput
  }

  export type LevelUpsertWithoutOrderItemsInput = {
    update: XOR<LevelUpdateWithoutOrderItemsInput, LevelUncheckedUpdateWithoutOrderItemsInput>
    create: XOR<LevelCreateWithoutOrderItemsInput, LevelUncheckedCreateWithoutOrderItemsInput>
    where?: LevelWhereInput
  }

  export type LevelUpdateToOneWithWhereWithoutOrderItemsInput = {
    where?: LevelWhereInput
    data: XOR<LevelUpdateWithoutOrderItemsInput, LevelUncheckedUpdateWithoutOrderItemsInput>
  }

  export type LevelUpdateWithoutOrderItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    masterJobs?: MasterJobsUpdateManyWithoutLevelNestedInput
    products?: ProductLevelUpdateManyWithoutLevelNestedInput
    baskets?: BasketUpdateManyWithoutLevelNestedInput
  }

  export type LevelUncheckedUpdateWithoutOrderItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    masterJobs?: MasterJobsUncheckedUpdateManyWithoutLevelNestedInput
    products?: ProductLevelUncheckedUpdateManyWithoutLevelNestedInput
    baskets?: BasketUncheckedUpdateManyWithoutLevelNestedInput
  }

  export type ToolCreateWithoutBrandInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    descriptionRu: string
    descriptionUz: string
    descriptionEn: string
    price: number
    quantity: number
    code?: string | null
    image: string
    isActive: boolean
    capacity: CapacityCreateNestedOneWithoutToolsInput
    size: SizeCreateNestedOneWithoutToolsInput
    orderItems?: OrderItemCreateNestedManyWithoutToolInput
    masterJobs?: MasterJobsCreateNestedManyWithoutToolInput
    baskets?: BasketCreateNestedManyWithoutToolInput
    products?: ProductToolCreateNestedManyWithoutToolInput
  }

  export type ToolUncheckedCreateWithoutBrandInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    descriptionRu: string
    descriptionUz: string
    descriptionEn: string
    price: number
    quantity: number
    code?: string | null
    capacityID: string
    sizeID: string
    image: string
    isActive: boolean
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutToolInput
    masterJobs?: MasterJobsUncheckedCreateNestedManyWithoutToolInput
    baskets?: BasketUncheckedCreateNestedManyWithoutToolInput
    products?: ProductToolUncheckedCreateNestedManyWithoutToolInput
  }

  export type ToolCreateOrConnectWithoutBrandInput = {
    where: ToolWhereUniqueInput
    create: XOR<ToolCreateWithoutBrandInput, ToolUncheckedCreateWithoutBrandInput>
  }

  export type ToolCreateManyBrandInputEnvelope = {
    data: ToolCreateManyBrandInput | ToolCreateManyBrandInput[]
    skipDuplicates?: boolean
  }

  export type ToolUpsertWithWhereUniqueWithoutBrandInput = {
    where: ToolWhereUniqueInput
    update: XOR<ToolUpdateWithoutBrandInput, ToolUncheckedUpdateWithoutBrandInput>
    create: XOR<ToolCreateWithoutBrandInput, ToolUncheckedCreateWithoutBrandInput>
  }

  export type ToolUpdateWithWhereUniqueWithoutBrandInput = {
    where: ToolWhereUniqueInput
    data: XOR<ToolUpdateWithoutBrandInput, ToolUncheckedUpdateWithoutBrandInput>
  }

  export type ToolUpdateManyWithWhereWithoutBrandInput = {
    where: ToolScalarWhereInput
    data: XOR<ToolUpdateManyMutationInput, ToolUncheckedUpdateManyWithoutBrandInput>
  }

  export type ToolScalarWhereInput = {
    AND?: ToolScalarWhereInput | ToolScalarWhereInput[]
    OR?: ToolScalarWhereInput[]
    NOT?: ToolScalarWhereInput | ToolScalarWhereInput[]
    id?: StringFilter<"Tool"> | string
    nameRu?: StringFilter<"Tool"> | string
    nameUz?: StringFilter<"Tool"> | string
    nameEn?: StringFilter<"Tool"> | string
    descriptionRu?: StringFilter<"Tool"> | string
    descriptionUz?: StringFilter<"Tool"> | string
    descriptionEn?: StringFilter<"Tool"> | string
    price?: IntFilter<"Tool"> | number
    quantity?: IntFilter<"Tool"> | number
    code?: StringNullableFilter<"Tool"> | string | null
    brandID?: StringFilter<"Tool"> | string
    capacityID?: StringFilter<"Tool"> | string
    sizeID?: StringFilter<"Tool"> | string
    image?: StringFilter<"Tool"> | string
    isActive?: BoolFilter<"Tool"> | boolean
  }

  export type ToolCreateWithoutCapacityInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    descriptionRu: string
    descriptionUz: string
    descriptionEn: string
    price: number
    quantity: number
    code?: string | null
    image: string
    isActive: boolean
    brand: BrandCreateNestedOneWithoutToolsInput
    size: SizeCreateNestedOneWithoutToolsInput
    orderItems?: OrderItemCreateNestedManyWithoutToolInput
    masterJobs?: MasterJobsCreateNestedManyWithoutToolInput
    baskets?: BasketCreateNestedManyWithoutToolInput
    products?: ProductToolCreateNestedManyWithoutToolInput
  }

  export type ToolUncheckedCreateWithoutCapacityInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    descriptionRu: string
    descriptionUz: string
    descriptionEn: string
    price: number
    quantity: number
    code?: string | null
    brandID: string
    sizeID: string
    image: string
    isActive: boolean
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutToolInput
    masterJobs?: MasterJobsUncheckedCreateNestedManyWithoutToolInput
    baskets?: BasketUncheckedCreateNestedManyWithoutToolInput
    products?: ProductToolUncheckedCreateNestedManyWithoutToolInput
  }

  export type ToolCreateOrConnectWithoutCapacityInput = {
    where: ToolWhereUniqueInput
    create: XOR<ToolCreateWithoutCapacityInput, ToolUncheckedCreateWithoutCapacityInput>
  }

  export type ToolCreateManyCapacityInputEnvelope = {
    data: ToolCreateManyCapacityInput | ToolCreateManyCapacityInput[]
    skipDuplicates?: boolean
  }

  export type ToolUpsertWithWhereUniqueWithoutCapacityInput = {
    where: ToolWhereUniqueInput
    update: XOR<ToolUpdateWithoutCapacityInput, ToolUncheckedUpdateWithoutCapacityInput>
    create: XOR<ToolCreateWithoutCapacityInput, ToolUncheckedCreateWithoutCapacityInput>
  }

  export type ToolUpdateWithWhereUniqueWithoutCapacityInput = {
    where: ToolWhereUniqueInput
    data: XOR<ToolUpdateWithoutCapacityInput, ToolUncheckedUpdateWithoutCapacityInput>
  }

  export type ToolUpdateManyWithWhereWithoutCapacityInput = {
    where: ToolScalarWhereInput
    data: XOR<ToolUpdateManyMutationInput, ToolUncheckedUpdateManyWithoutCapacityInput>
  }

  export type ToolCreateWithoutSizeInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    descriptionRu: string
    descriptionUz: string
    descriptionEn: string
    price: number
    quantity: number
    code?: string | null
    image: string
    isActive: boolean
    brand: BrandCreateNestedOneWithoutToolsInput
    capacity: CapacityCreateNestedOneWithoutToolsInput
    orderItems?: OrderItemCreateNestedManyWithoutToolInput
    masterJobs?: MasterJobsCreateNestedManyWithoutToolInput
    baskets?: BasketCreateNestedManyWithoutToolInput
    products?: ProductToolCreateNestedManyWithoutToolInput
  }

  export type ToolUncheckedCreateWithoutSizeInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    descriptionRu: string
    descriptionUz: string
    descriptionEn: string
    price: number
    quantity: number
    code?: string | null
    brandID: string
    capacityID: string
    image: string
    isActive: boolean
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutToolInput
    masterJobs?: MasterJobsUncheckedCreateNestedManyWithoutToolInput
    baskets?: BasketUncheckedCreateNestedManyWithoutToolInput
    products?: ProductToolUncheckedCreateNestedManyWithoutToolInput
  }

  export type ToolCreateOrConnectWithoutSizeInput = {
    where: ToolWhereUniqueInput
    create: XOR<ToolCreateWithoutSizeInput, ToolUncheckedCreateWithoutSizeInput>
  }

  export type ToolCreateManySizeInputEnvelope = {
    data: ToolCreateManySizeInput | ToolCreateManySizeInput[]
    skipDuplicates?: boolean
  }

  export type ToolUpsertWithWhereUniqueWithoutSizeInput = {
    where: ToolWhereUniqueInput
    update: XOR<ToolUpdateWithoutSizeInput, ToolUncheckedUpdateWithoutSizeInput>
    create: XOR<ToolCreateWithoutSizeInput, ToolUncheckedCreateWithoutSizeInput>
  }

  export type ToolUpdateWithWhereUniqueWithoutSizeInput = {
    where: ToolWhereUniqueInput
    data: XOR<ToolUpdateWithoutSizeInput, ToolUncheckedUpdateWithoutSizeInput>
  }

  export type ToolUpdateManyWithWhereWithoutSizeInput = {
    where: ToolScalarWhereInput
    data: XOR<ToolUpdateManyMutationInput, ToolUncheckedUpdateManyWithoutSizeInput>
  }

  export type MasterCreateWithoutCommentsInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    isActive: boolean
    phone: string
    dob: string
    image: string
    passportImage: string
    rating?: number | null
    masterJobs?: MasterJobsCreateNestedManyWithoutMasterInput
  }

  export type MasterUncheckedCreateWithoutCommentsInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    isActive: boolean
    phone: string
    dob: string
    image: string
    passportImage: string
    rating?: number | null
    masterJobs?: MasterJobsUncheckedCreateNestedManyWithoutMasterInput
  }

  export type MasterCreateOrConnectWithoutCommentsInput = {
    where: MasterWhereUniqueInput
    create: XOR<MasterCreateWithoutCommentsInput, MasterUncheckedCreateWithoutCommentsInput>
  }

  export type OrderCreateWithoutCommentsInput = {
    id?: string
    locationLat: string
    locationLong: string
    address: string
    orderDate?: Date | string
    deliveryDate: Date | string
    paymentType: $Enums.PaymentType
    withDelivery: boolean
    status: $Enums.OrderStatus
    commentToDelivery?: string | null
    items?: OrderItemCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutCommentsInput = {
    id?: string
    locationLat: string
    locationLong: string
    address: string
    orderDate?: Date | string
    deliveryDate: Date | string
    paymentType: $Enums.PaymentType
    withDelivery: boolean
    status: $Enums.OrderStatus
    commentToDelivery?: string | null
    items?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutCommentsInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutCommentsInput, OrderUncheckedCreateWithoutCommentsInput>
  }

  export type MasterUpsertWithoutCommentsInput = {
    update: XOR<MasterUpdateWithoutCommentsInput, MasterUncheckedUpdateWithoutCommentsInput>
    create: XOR<MasterCreateWithoutCommentsInput, MasterUncheckedCreateWithoutCommentsInput>
    where?: MasterWhereInput
  }

  export type MasterUpdateToOneWithWhereWithoutCommentsInput = {
    where?: MasterWhereInput
    data: XOR<MasterUpdateWithoutCommentsInput, MasterUncheckedUpdateWithoutCommentsInput>
  }

  export type MasterUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    phone?: StringFieldUpdateOperationsInput | string
    dob?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    passportImage?: StringFieldUpdateOperationsInput | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    masterJobs?: MasterJobsUpdateManyWithoutMasterNestedInput
  }

  export type MasterUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    phone?: StringFieldUpdateOperationsInput | string
    dob?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    passportImage?: StringFieldUpdateOperationsInput | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    masterJobs?: MasterJobsUncheckedUpdateManyWithoutMasterNestedInput
  }

  export type OrderUpsertWithoutCommentsInput = {
    update: XOR<OrderUpdateWithoutCommentsInput, OrderUncheckedUpdateWithoutCommentsInput>
    create: XOR<OrderCreateWithoutCommentsInput, OrderUncheckedCreateWithoutCommentsInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutCommentsInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutCommentsInput, OrderUncheckedUpdateWithoutCommentsInput>
  }

  export type OrderUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    locationLat?: StringFieldUpdateOperationsInput | string
    locationLong?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    commentToDelivery?: NullableStringFieldUpdateOperationsInput | string | null
    items?: OrderItemUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    locationLat?: StringFieldUpdateOperationsInput | string
    locationLong?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    commentToDelivery?: NullableStringFieldUpdateOperationsInput | string | null
    items?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type MasterJobsCreateWithoutMasterInput = {
    id?: string
    minWorkingHour: number
    workingHours: number
    priceHourly: number
    priceDaily: number
    experience: string
    tool: ToolCreateNestedOneWithoutMasterJobsInput
    product: ProductCreateNestedOneWithoutMasterJobsInput
    level: LevelCreateNestedOneWithoutMasterJobsInput
  }

  export type MasterJobsUncheckedCreateWithoutMasterInput = {
    id?: string
    toolID: string
    productID: string
    minWorkingHour: number
    workingHours: number
    levelID: string
    priceHourly: number
    priceDaily: number
    experience: string
  }

  export type MasterJobsCreateOrConnectWithoutMasterInput = {
    where: MasterJobsWhereUniqueInput
    create: XOR<MasterJobsCreateWithoutMasterInput, MasterJobsUncheckedCreateWithoutMasterInput>
  }

  export type MasterJobsCreateManyMasterInputEnvelope = {
    data: MasterJobsCreateManyMasterInput | MasterJobsCreateManyMasterInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutMasterInput = {
    id?: string
    message: string
    star: number
    order: OrderCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutMasterInput = {
    id?: string
    message: string
    star: number
    orderID: string
  }

  export type CommentCreateOrConnectWithoutMasterInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutMasterInput, CommentUncheckedCreateWithoutMasterInput>
  }

  export type CommentCreateManyMasterInputEnvelope = {
    data: CommentCreateManyMasterInput | CommentCreateManyMasterInput[]
    skipDuplicates?: boolean
  }

  export type MasterJobsUpsertWithWhereUniqueWithoutMasterInput = {
    where: MasterJobsWhereUniqueInput
    update: XOR<MasterJobsUpdateWithoutMasterInput, MasterJobsUncheckedUpdateWithoutMasterInput>
    create: XOR<MasterJobsCreateWithoutMasterInput, MasterJobsUncheckedCreateWithoutMasterInput>
  }

  export type MasterJobsUpdateWithWhereUniqueWithoutMasterInput = {
    where: MasterJobsWhereUniqueInput
    data: XOR<MasterJobsUpdateWithoutMasterInput, MasterJobsUncheckedUpdateWithoutMasterInput>
  }

  export type MasterJobsUpdateManyWithWhereWithoutMasterInput = {
    where: MasterJobsScalarWhereInput
    data: XOR<MasterJobsUpdateManyMutationInput, MasterJobsUncheckedUpdateManyWithoutMasterInput>
  }

  export type MasterJobsScalarWhereInput = {
    AND?: MasterJobsScalarWhereInput | MasterJobsScalarWhereInput[]
    OR?: MasterJobsScalarWhereInput[]
    NOT?: MasterJobsScalarWhereInput | MasterJobsScalarWhereInput[]
    id?: StringFilter<"MasterJobs"> | string
    toolID?: StringFilter<"MasterJobs"> | string
    productID?: StringFilter<"MasterJobs"> | string
    minWorkingHour?: IntFilter<"MasterJobs"> | number
    workingHours?: IntFilter<"MasterJobs"> | number
    levelID?: StringFilter<"MasterJobs"> | string
    priceHourly?: IntFilter<"MasterJobs"> | number
    priceDaily?: IntFilter<"MasterJobs"> | number
    experience?: StringFilter<"MasterJobs"> | string
    masterID?: StringFilter<"MasterJobs"> | string
  }

  export type CommentUpsertWithWhereUniqueWithoutMasterInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutMasterInput, CommentUncheckedUpdateWithoutMasterInput>
    create: XOR<CommentCreateWithoutMasterInput, CommentUncheckedCreateWithoutMasterInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutMasterInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutMasterInput, CommentUncheckedUpdateWithoutMasterInput>
  }

  export type CommentUpdateManyWithWhereWithoutMasterInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutMasterInput>
  }

  export type ToolCreateWithoutMasterJobsInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    descriptionRu: string
    descriptionUz: string
    descriptionEn: string
    price: number
    quantity: number
    code?: string | null
    image: string
    isActive: boolean
    brand: BrandCreateNestedOneWithoutToolsInput
    capacity: CapacityCreateNestedOneWithoutToolsInput
    size: SizeCreateNestedOneWithoutToolsInput
    orderItems?: OrderItemCreateNestedManyWithoutToolInput
    baskets?: BasketCreateNestedManyWithoutToolInput
    products?: ProductToolCreateNestedManyWithoutToolInput
  }

  export type ToolUncheckedCreateWithoutMasterJobsInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    descriptionRu: string
    descriptionUz: string
    descriptionEn: string
    price: number
    quantity: number
    code?: string | null
    brandID: string
    capacityID: string
    sizeID: string
    image: string
    isActive: boolean
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutToolInput
    baskets?: BasketUncheckedCreateNestedManyWithoutToolInput
    products?: ProductToolUncheckedCreateNestedManyWithoutToolInput
  }

  export type ToolCreateOrConnectWithoutMasterJobsInput = {
    where: ToolWhereUniqueInput
    create: XOR<ToolCreateWithoutMasterJobsInput, ToolUncheckedCreateWithoutMasterJobsInput>
  }

  export type ProductCreateWithoutMasterJobsInput = {
    id?: string
    isActive: boolean
    nameRu: string
    nameUz: string
    nameEn: string
    image: string
    minWorkingHours: string
    hourlyPrice: number
    dailyPrice: number
    baskets?: BasketCreateNestedManyWithoutProductInput
    orderItems?: OrderItemCreateNestedManyWithoutProductInput
    levels?: ProductLevelCreateNestedManyWithoutProductInput
    tools?: ProductToolCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutMasterJobsInput = {
    id?: string
    isActive: boolean
    nameRu: string
    nameUz: string
    nameEn: string
    image: string
    minWorkingHours: string
    hourlyPrice: number
    dailyPrice: number
    baskets?: BasketUncheckedCreateNestedManyWithoutProductInput
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutProductInput
    levels?: ProductLevelUncheckedCreateNestedManyWithoutProductInput
    tools?: ProductToolUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutMasterJobsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutMasterJobsInput, ProductUncheckedCreateWithoutMasterJobsInput>
  }

  export type LevelCreateWithoutMasterJobsInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    orderItems?: OrderItemCreateNestedManyWithoutLevelInput
    products?: ProductLevelCreateNestedManyWithoutLevelInput
    baskets?: BasketCreateNestedManyWithoutLevelInput
  }

  export type LevelUncheckedCreateWithoutMasterJobsInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutLevelInput
    products?: ProductLevelUncheckedCreateNestedManyWithoutLevelInput
    baskets?: BasketUncheckedCreateNestedManyWithoutLevelInput
  }

  export type LevelCreateOrConnectWithoutMasterJobsInput = {
    where: LevelWhereUniqueInput
    create: XOR<LevelCreateWithoutMasterJobsInput, LevelUncheckedCreateWithoutMasterJobsInput>
  }

  export type MasterCreateWithoutMasterJobsInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    isActive: boolean
    phone: string
    dob: string
    image: string
    passportImage: string
    rating?: number | null
    comments?: CommentCreateNestedManyWithoutMasterInput
  }

  export type MasterUncheckedCreateWithoutMasterJobsInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    isActive: boolean
    phone: string
    dob: string
    image: string
    passportImage: string
    rating?: number | null
    comments?: CommentUncheckedCreateNestedManyWithoutMasterInput
  }

  export type MasterCreateOrConnectWithoutMasterJobsInput = {
    where: MasterWhereUniqueInput
    create: XOR<MasterCreateWithoutMasterJobsInput, MasterUncheckedCreateWithoutMasterJobsInput>
  }

  export type ToolUpsertWithoutMasterJobsInput = {
    update: XOR<ToolUpdateWithoutMasterJobsInput, ToolUncheckedUpdateWithoutMasterJobsInput>
    create: XOR<ToolCreateWithoutMasterJobsInput, ToolUncheckedCreateWithoutMasterJobsInput>
    where?: ToolWhereInput
  }

  export type ToolUpdateToOneWithWhereWithoutMasterJobsInput = {
    where?: ToolWhereInput
    data: XOR<ToolUpdateWithoutMasterJobsInput, ToolUncheckedUpdateWithoutMasterJobsInput>
  }

  export type ToolUpdateWithoutMasterJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    descriptionRu?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionEn?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: NullableStringFieldUpdateOperationsInput | string | null
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    brand?: BrandUpdateOneRequiredWithoutToolsNestedInput
    capacity?: CapacityUpdateOneRequiredWithoutToolsNestedInput
    size?: SizeUpdateOneRequiredWithoutToolsNestedInput
    orderItems?: OrderItemUpdateManyWithoutToolNestedInput
    baskets?: BasketUpdateManyWithoutToolNestedInput
    products?: ProductToolUpdateManyWithoutToolNestedInput
  }

  export type ToolUncheckedUpdateWithoutMasterJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    descriptionRu?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionEn?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: NullableStringFieldUpdateOperationsInput | string | null
    brandID?: StringFieldUpdateOperationsInput | string
    capacityID?: StringFieldUpdateOperationsInput | string
    sizeID?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    orderItems?: OrderItemUncheckedUpdateManyWithoutToolNestedInput
    baskets?: BasketUncheckedUpdateManyWithoutToolNestedInput
    products?: ProductToolUncheckedUpdateManyWithoutToolNestedInput
  }

  export type ProductUpsertWithoutMasterJobsInput = {
    update: XOR<ProductUpdateWithoutMasterJobsInput, ProductUncheckedUpdateWithoutMasterJobsInput>
    create: XOR<ProductCreateWithoutMasterJobsInput, ProductUncheckedCreateWithoutMasterJobsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutMasterJobsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutMasterJobsInput, ProductUncheckedUpdateWithoutMasterJobsInput>
  }

  export type ProductUpdateWithoutMasterJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    minWorkingHours?: StringFieldUpdateOperationsInput | string
    hourlyPrice?: IntFieldUpdateOperationsInput | number
    dailyPrice?: IntFieldUpdateOperationsInput | number
    baskets?: BasketUpdateManyWithoutProductNestedInput
    orderItems?: OrderItemUpdateManyWithoutProductNestedInput
    levels?: ProductLevelUpdateManyWithoutProductNestedInput
    tools?: ProductToolUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutMasterJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    minWorkingHours?: StringFieldUpdateOperationsInput | string
    hourlyPrice?: IntFieldUpdateOperationsInput | number
    dailyPrice?: IntFieldUpdateOperationsInput | number
    baskets?: BasketUncheckedUpdateManyWithoutProductNestedInput
    orderItems?: OrderItemUncheckedUpdateManyWithoutProductNestedInput
    levels?: ProductLevelUncheckedUpdateManyWithoutProductNestedInput
    tools?: ProductToolUncheckedUpdateManyWithoutProductNestedInput
  }

  export type LevelUpsertWithoutMasterJobsInput = {
    update: XOR<LevelUpdateWithoutMasterJobsInput, LevelUncheckedUpdateWithoutMasterJobsInput>
    create: XOR<LevelCreateWithoutMasterJobsInput, LevelUncheckedCreateWithoutMasterJobsInput>
    where?: LevelWhereInput
  }

  export type LevelUpdateToOneWithWhereWithoutMasterJobsInput = {
    where?: LevelWhereInput
    data: XOR<LevelUpdateWithoutMasterJobsInput, LevelUncheckedUpdateWithoutMasterJobsInput>
  }

  export type LevelUpdateWithoutMasterJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    orderItems?: OrderItemUpdateManyWithoutLevelNestedInput
    products?: ProductLevelUpdateManyWithoutLevelNestedInput
    baskets?: BasketUpdateManyWithoutLevelNestedInput
  }

  export type LevelUncheckedUpdateWithoutMasterJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    orderItems?: OrderItemUncheckedUpdateManyWithoutLevelNestedInput
    products?: ProductLevelUncheckedUpdateManyWithoutLevelNestedInput
    baskets?: BasketUncheckedUpdateManyWithoutLevelNestedInput
  }

  export type MasterUpsertWithoutMasterJobsInput = {
    update: XOR<MasterUpdateWithoutMasterJobsInput, MasterUncheckedUpdateWithoutMasterJobsInput>
    create: XOR<MasterCreateWithoutMasterJobsInput, MasterUncheckedCreateWithoutMasterJobsInput>
    where?: MasterWhereInput
  }

  export type MasterUpdateToOneWithWhereWithoutMasterJobsInput = {
    where?: MasterWhereInput
    data: XOR<MasterUpdateWithoutMasterJobsInput, MasterUncheckedUpdateWithoutMasterJobsInput>
  }

  export type MasterUpdateWithoutMasterJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    phone?: StringFieldUpdateOperationsInput | string
    dob?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    passportImage?: StringFieldUpdateOperationsInput | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    comments?: CommentUpdateManyWithoutMasterNestedInput
  }

  export type MasterUncheckedUpdateWithoutMasterJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    phone?: StringFieldUpdateOperationsInput | string
    dob?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    passportImage?: StringFieldUpdateOperationsInput | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    comments?: CommentUncheckedUpdateManyWithoutMasterNestedInput
  }

  export type BasketCreateWithoutProductInput = {
    id?: string
    timeUnit: number
    count?: number | null
    workingHours: number
    totalPrice?: number | null
    user: UserCreateNestedOneWithoutBasketsInput
    tool: ToolCreateNestedOneWithoutBasketsInput
    level: LevelCreateNestedOneWithoutBasketsInput
  }

  export type BasketUncheckedCreateWithoutProductInput = {
    id?: string
    userID: string
    toolID: string
    levelID: string
    timeUnit: number
    count?: number | null
    workingHours: number
    totalPrice?: number | null
  }

  export type BasketCreateOrConnectWithoutProductInput = {
    where: BasketWhereUniqueInput
    create: XOR<BasketCreateWithoutProductInput, BasketUncheckedCreateWithoutProductInput>
  }

  export type BasketCreateManyProductInputEnvelope = {
    data: BasketCreateManyProductInput | BasketCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type OrderItemCreateWithoutProductInput = {
    id?: string
    timeUnit: number
    count: number
    workingHours: number
    totalPrice?: number | null
    order: OrderCreateNestedOneWithoutItemsInput
    tool: ToolCreateNestedOneWithoutOrderItemsInput
    level: LevelCreateNestedOneWithoutOrderItemsInput
  }

  export type OrderItemUncheckedCreateWithoutProductInput = {
    id?: string
    orderID: string
    toolID: string
    levelID: string
    timeUnit: number
    count: number
    workingHours: number
    totalPrice?: number | null
  }

  export type OrderItemCreateOrConnectWithoutProductInput = {
    where: OrderItemWhereUniqueInput
    create: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput>
  }

  export type OrderItemCreateManyProductInputEnvelope = {
    data: OrderItemCreateManyProductInput | OrderItemCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type MasterJobsCreateWithoutProductInput = {
    id?: string
    minWorkingHour: number
    workingHours: number
    priceHourly: number
    priceDaily: number
    experience: string
    tool: ToolCreateNestedOneWithoutMasterJobsInput
    level: LevelCreateNestedOneWithoutMasterJobsInput
    master: MasterCreateNestedOneWithoutMasterJobsInput
  }

  export type MasterJobsUncheckedCreateWithoutProductInput = {
    id?: string
    toolID: string
    minWorkingHour: number
    workingHours: number
    levelID: string
    priceHourly: number
    priceDaily: number
    experience: string
    masterID: string
  }

  export type MasterJobsCreateOrConnectWithoutProductInput = {
    where: MasterJobsWhereUniqueInput
    create: XOR<MasterJobsCreateWithoutProductInput, MasterJobsUncheckedCreateWithoutProductInput>
  }

  export type MasterJobsCreateManyProductInputEnvelope = {
    data: MasterJobsCreateManyProductInput | MasterJobsCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type ProductLevelCreateWithoutProductInput = {
    id?: string
    level: LevelCreateNestedOneWithoutProductsInput
  }

  export type ProductLevelUncheckedCreateWithoutProductInput = {
    id?: string
    levelID: string
  }

  export type ProductLevelCreateOrConnectWithoutProductInput = {
    where: ProductLevelWhereUniqueInput
    create: XOR<ProductLevelCreateWithoutProductInput, ProductLevelUncheckedCreateWithoutProductInput>
  }

  export type ProductLevelCreateManyProductInputEnvelope = {
    data: ProductLevelCreateManyProductInput | ProductLevelCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type ProductToolCreateWithoutProductInput = {
    id?: string
    tool: ToolCreateNestedOneWithoutProductsInput
  }

  export type ProductToolUncheckedCreateWithoutProductInput = {
    id?: string
    toolID: string
  }

  export type ProductToolCreateOrConnectWithoutProductInput = {
    where: ProductToolWhereUniqueInput
    create: XOR<ProductToolCreateWithoutProductInput, ProductToolUncheckedCreateWithoutProductInput>
  }

  export type ProductToolCreateManyProductInputEnvelope = {
    data: ProductToolCreateManyProductInput | ProductToolCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type BasketUpsertWithWhereUniqueWithoutProductInput = {
    where: BasketWhereUniqueInput
    update: XOR<BasketUpdateWithoutProductInput, BasketUncheckedUpdateWithoutProductInput>
    create: XOR<BasketCreateWithoutProductInput, BasketUncheckedCreateWithoutProductInput>
  }

  export type BasketUpdateWithWhereUniqueWithoutProductInput = {
    where: BasketWhereUniqueInput
    data: XOR<BasketUpdateWithoutProductInput, BasketUncheckedUpdateWithoutProductInput>
  }

  export type BasketUpdateManyWithWhereWithoutProductInput = {
    where: BasketScalarWhereInput
    data: XOR<BasketUpdateManyMutationInput, BasketUncheckedUpdateManyWithoutProductInput>
  }

  export type OrderItemUpsertWithWhereUniqueWithoutProductInput = {
    where: OrderItemWhereUniqueInput
    update: XOR<OrderItemUpdateWithoutProductInput, OrderItemUncheckedUpdateWithoutProductInput>
    create: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput>
  }

  export type OrderItemUpdateWithWhereUniqueWithoutProductInput = {
    where: OrderItemWhereUniqueInput
    data: XOR<OrderItemUpdateWithoutProductInput, OrderItemUncheckedUpdateWithoutProductInput>
  }

  export type OrderItemUpdateManyWithWhereWithoutProductInput = {
    where: OrderItemScalarWhereInput
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyWithoutProductInput>
  }

  export type MasterJobsUpsertWithWhereUniqueWithoutProductInput = {
    where: MasterJobsWhereUniqueInput
    update: XOR<MasterJobsUpdateWithoutProductInput, MasterJobsUncheckedUpdateWithoutProductInput>
    create: XOR<MasterJobsCreateWithoutProductInput, MasterJobsUncheckedCreateWithoutProductInput>
  }

  export type MasterJobsUpdateWithWhereUniqueWithoutProductInput = {
    where: MasterJobsWhereUniqueInput
    data: XOR<MasterJobsUpdateWithoutProductInput, MasterJobsUncheckedUpdateWithoutProductInput>
  }

  export type MasterJobsUpdateManyWithWhereWithoutProductInput = {
    where: MasterJobsScalarWhereInput
    data: XOR<MasterJobsUpdateManyMutationInput, MasterJobsUncheckedUpdateManyWithoutProductInput>
  }

  export type ProductLevelUpsertWithWhereUniqueWithoutProductInput = {
    where: ProductLevelWhereUniqueInput
    update: XOR<ProductLevelUpdateWithoutProductInput, ProductLevelUncheckedUpdateWithoutProductInput>
    create: XOR<ProductLevelCreateWithoutProductInput, ProductLevelUncheckedCreateWithoutProductInput>
  }

  export type ProductLevelUpdateWithWhereUniqueWithoutProductInput = {
    where: ProductLevelWhereUniqueInput
    data: XOR<ProductLevelUpdateWithoutProductInput, ProductLevelUncheckedUpdateWithoutProductInput>
  }

  export type ProductLevelUpdateManyWithWhereWithoutProductInput = {
    where: ProductLevelScalarWhereInput
    data: XOR<ProductLevelUpdateManyMutationInput, ProductLevelUncheckedUpdateManyWithoutProductInput>
  }

  export type ProductLevelScalarWhereInput = {
    AND?: ProductLevelScalarWhereInput | ProductLevelScalarWhereInput[]
    OR?: ProductLevelScalarWhereInput[]
    NOT?: ProductLevelScalarWhereInput | ProductLevelScalarWhereInput[]
    id?: StringFilter<"ProductLevel"> | string
    productID?: StringFilter<"ProductLevel"> | string
    levelID?: StringFilter<"ProductLevel"> | string
  }

  export type ProductToolUpsertWithWhereUniqueWithoutProductInput = {
    where: ProductToolWhereUniqueInput
    update: XOR<ProductToolUpdateWithoutProductInput, ProductToolUncheckedUpdateWithoutProductInput>
    create: XOR<ProductToolCreateWithoutProductInput, ProductToolUncheckedCreateWithoutProductInput>
  }

  export type ProductToolUpdateWithWhereUniqueWithoutProductInput = {
    where: ProductToolWhereUniqueInput
    data: XOR<ProductToolUpdateWithoutProductInput, ProductToolUncheckedUpdateWithoutProductInput>
  }

  export type ProductToolUpdateManyWithWhereWithoutProductInput = {
    where: ProductToolScalarWhereInput
    data: XOR<ProductToolUpdateManyMutationInput, ProductToolUncheckedUpdateManyWithoutProductInput>
  }

  export type ProductToolScalarWhereInput = {
    AND?: ProductToolScalarWhereInput | ProductToolScalarWhereInput[]
    OR?: ProductToolScalarWhereInput[]
    NOT?: ProductToolScalarWhereInput | ProductToolScalarWhereInput[]
    id?: StringFilter<"ProductTool"> | string
    productID?: StringFilter<"ProductTool"> | string
    toolID?: StringFilter<"ProductTool"> | string
  }

  export type OrderItemCreateWithoutLevelInput = {
    id?: string
    timeUnit: number
    count: number
    workingHours: number
    totalPrice?: number | null
    order: OrderCreateNestedOneWithoutItemsInput
    product: ProductCreateNestedOneWithoutOrderItemsInput
    tool: ToolCreateNestedOneWithoutOrderItemsInput
  }

  export type OrderItemUncheckedCreateWithoutLevelInput = {
    id?: string
    orderID: string
    productID: string
    toolID: string
    timeUnit: number
    count: number
    workingHours: number
    totalPrice?: number | null
  }

  export type OrderItemCreateOrConnectWithoutLevelInput = {
    where: OrderItemWhereUniqueInput
    create: XOR<OrderItemCreateWithoutLevelInput, OrderItemUncheckedCreateWithoutLevelInput>
  }

  export type OrderItemCreateManyLevelInputEnvelope = {
    data: OrderItemCreateManyLevelInput | OrderItemCreateManyLevelInput[]
    skipDuplicates?: boolean
  }

  export type MasterJobsCreateWithoutLevelInput = {
    id?: string
    minWorkingHour: number
    workingHours: number
    priceHourly: number
    priceDaily: number
    experience: string
    tool: ToolCreateNestedOneWithoutMasterJobsInput
    product: ProductCreateNestedOneWithoutMasterJobsInput
    master: MasterCreateNestedOneWithoutMasterJobsInput
  }

  export type MasterJobsUncheckedCreateWithoutLevelInput = {
    id?: string
    toolID: string
    productID: string
    minWorkingHour: number
    workingHours: number
    priceHourly: number
    priceDaily: number
    experience: string
    masterID: string
  }

  export type MasterJobsCreateOrConnectWithoutLevelInput = {
    where: MasterJobsWhereUniqueInput
    create: XOR<MasterJobsCreateWithoutLevelInput, MasterJobsUncheckedCreateWithoutLevelInput>
  }

  export type MasterJobsCreateManyLevelInputEnvelope = {
    data: MasterJobsCreateManyLevelInput | MasterJobsCreateManyLevelInput[]
    skipDuplicates?: boolean
  }

  export type ProductLevelCreateWithoutLevelInput = {
    id?: string
    product: ProductCreateNestedOneWithoutLevelsInput
  }

  export type ProductLevelUncheckedCreateWithoutLevelInput = {
    id?: string
    productID: string
  }

  export type ProductLevelCreateOrConnectWithoutLevelInput = {
    where: ProductLevelWhereUniqueInput
    create: XOR<ProductLevelCreateWithoutLevelInput, ProductLevelUncheckedCreateWithoutLevelInput>
  }

  export type ProductLevelCreateManyLevelInputEnvelope = {
    data: ProductLevelCreateManyLevelInput | ProductLevelCreateManyLevelInput[]
    skipDuplicates?: boolean
  }

  export type BasketCreateWithoutLevelInput = {
    id?: string
    timeUnit: number
    count?: number | null
    workingHours: number
    totalPrice?: number | null
    user: UserCreateNestedOneWithoutBasketsInput
    product: ProductCreateNestedOneWithoutBasketsInput
    tool: ToolCreateNestedOneWithoutBasketsInput
  }

  export type BasketUncheckedCreateWithoutLevelInput = {
    id?: string
    userID: string
    productID: string
    toolID: string
    timeUnit: number
    count?: number | null
    workingHours: number
    totalPrice?: number | null
  }

  export type BasketCreateOrConnectWithoutLevelInput = {
    where: BasketWhereUniqueInput
    create: XOR<BasketCreateWithoutLevelInput, BasketUncheckedCreateWithoutLevelInput>
  }

  export type BasketCreateManyLevelInputEnvelope = {
    data: BasketCreateManyLevelInput | BasketCreateManyLevelInput[]
    skipDuplicates?: boolean
  }

  export type OrderItemUpsertWithWhereUniqueWithoutLevelInput = {
    where: OrderItemWhereUniqueInput
    update: XOR<OrderItemUpdateWithoutLevelInput, OrderItemUncheckedUpdateWithoutLevelInput>
    create: XOR<OrderItemCreateWithoutLevelInput, OrderItemUncheckedCreateWithoutLevelInput>
  }

  export type OrderItemUpdateWithWhereUniqueWithoutLevelInput = {
    where: OrderItemWhereUniqueInput
    data: XOR<OrderItemUpdateWithoutLevelInput, OrderItemUncheckedUpdateWithoutLevelInput>
  }

  export type OrderItemUpdateManyWithWhereWithoutLevelInput = {
    where: OrderItemScalarWhereInput
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyWithoutLevelInput>
  }

  export type MasterJobsUpsertWithWhereUniqueWithoutLevelInput = {
    where: MasterJobsWhereUniqueInput
    update: XOR<MasterJobsUpdateWithoutLevelInput, MasterJobsUncheckedUpdateWithoutLevelInput>
    create: XOR<MasterJobsCreateWithoutLevelInput, MasterJobsUncheckedCreateWithoutLevelInput>
  }

  export type MasterJobsUpdateWithWhereUniqueWithoutLevelInput = {
    where: MasterJobsWhereUniqueInput
    data: XOR<MasterJobsUpdateWithoutLevelInput, MasterJobsUncheckedUpdateWithoutLevelInput>
  }

  export type MasterJobsUpdateManyWithWhereWithoutLevelInput = {
    where: MasterJobsScalarWhereInput
    data: XOR<MasterJobsUpdateManyMutationInput, MasterJobsUncheckedUpdateManyWithoutLevelInput>
  }

  export type ProductLevelUpsertWithWhereUniqueWithoutLevelInput = {
    where: ProductLevelWhereUniqueInput
    update: XOR<ProductLevelUpdateWithoutLevelInput, ProductLevelUncheckedUpdateWithoutLevelInput>
    create: XOR<ProductLevelCreateWithoutLevelInput, ProductLevelUncheckedCreateWithoutLevelInput>
  }

  export type ProductLevelUpdateWithWhereUniqueWithoutLevelInput = {
    where: ProductLevelWhereUniqueInput
    data: XOR<ProductLevelUpdateWithoutLevelInput, ProductLevelUncheckedUpdateWithoutLevelInput>
  }

  export type ProductLevelUpdateManyWithWhereWithoutLevelInput = {
    where: ProductLevelScalarWhereInput
    data: XOR<ProductLevelUpdateManyMutationInput, ProductLevelUncheckedUpdateManyWithoutLevelInput>
  }

  export type BasketUpsertWithWhereUniqueWithoutLevelInput = {
    where: BasketWhereUniqueInput
    update: XOR<BasketUpdateWithoutLevelInput, BasketUncheckedUpdateWithoutLevelInput>
    create: XOR<BasketCreateWithoutLevelInput, BasketUncheckedCreateWithoutLevelInput>
  }

  export type BasketUpdateWithWhereUniqueWithoutLevelInput = {
    where: BasketWhereUniqueInput
    data: XOR<BasketUpdateWithoutLevelInput, BasketUncheckedUpdateWithoutLevelInput>
  }

  export type BasketUpdateManyWithWhereWithoutLevelInput = {
    where: BasketScalarWhereInput
    data: XOR<BasketUpdateManyMutationInput, BasketUncheckedUpdateManyWithoutLevelInput>
  }

  export type BrandCreateWithoutToolsInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
  }

  export type BrandUncheckedCreateWithoutToolsInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
  }

  export type BrandCreateOrConnectWithoutToolsInput = {
    where: BrandWhereUniqueInput
    create: XOR<BrandCreateWithoutToolsInput, BrandUncheckedCreateWithoutToolsInput>
  }

  export type CapacityCreateWithoutToolsInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
  }

  export type CapacityUncheckedCreateWithoutToolsInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
  }

  export type CapacityCreateOrConnectWithoutToolsInput = {
    where: CapacityWhereUniqueInput
    create: XOR<CapacityCreateWithoutToolsInput, CapacityUncheckedCreateWithoutToolsInput>
  }

  export type SizeCreateWithoutToolsInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
  }

  export type SizeUncheckedCreateWithoutToolsInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
  }

  export type SizeCreateOrConnectWithoutToolsInput = {
    where: SizeWhereUniqueInput
    create: XOR<SizeCreateWithoutToolsInput, SizeUncheckedCreateWithoutToolsInput>
  }

  export type OrderItemCreateWithoutToolInput = {
    id?: string
    timeUnit: number
    count: number
    workingHours: number
    totalPrice?: number | null
    order: OrderCreateNestedOneWithoutItemsInput
    product: ProductCreateNestedOneWithoutOrderItemsInput
    level: LevelCreateNestedOneWithoutOrderItemsInput
  }

  export type OrderItemUncheckedCreateWithoutToolInput = {
    id?: string
    orderID: string
    productID: string
    levelID: string
    timeUnit: number
    count: number
    workingHours: number
    totalPrice?: number | null
  }

  export type OrderItemCreateOrConnectWithoutToolInput = {
    where: OrderItemWhereUniqueInput
    create: XOR<OrderItemCreateWithoutToolInput, OrderItemUncheckedCreateWithoutToolInput>
  }

  export type OrderItemCreateManyToolInputEnvelope = {
    data: OrderItemCreateManyToolInput | OrderItemCreateManyToolInput[]
    skipDuplicates?: boolean
  }

  export type MasterJobsCreateWithoutToolInput = {
    id?: string
    minWorkingHour: number
    workingHours: number
    priceHourly: number
    priceDaily: number
    experience: string
    product: ProductCreateNestedOneWithoutMasterJobsInput
    level: LevelCreateNestedOneWithoutMasterJobsInput
    master: MasterCreateNestedOneWithoutMasterJobsInput
  }

  export type MasterJobsUncheckedCreateWithoutToolInput = {
    id?: string
    productID: string
    minWorkingHour: number
    workingHours: number
    levelID: string
    priceHourly: number
    priceDaily: number
    experience: string
    masterID: string
  }

  export type MasterJobsCreateOrConnectWithoutToolInput = {
    where: MasterJobsWhereUniqueInput
    create: XOR<MasterJobsCreateWithoutToolInput, MasterJobsUncheckedCreateWithoutToolInput>
  }

  export type MasterJobsCreateManyToolInputEnvelope = {
    data: MasterJobsCreateManyToolInput | MasterJobsCreateManyToolInput[]
    skipDuplicates?: boolean
  }

  export type BasketCreateWithoutToolInput = {
    id?: string
    timeUnit: number
    count?: number | null
    workingHours: number
    totalPrice?: number | null
    user: UserCreateNestedOneWithoutBasketsInput
    product: ProductCreateNestedOneWithoutBasketsInput
    level: LevelCreateNestedOneWithoutBasketsInput
  }

  export type BasketUncheckedCreateWithoutToolInput = {
    id?: string
    userID: string
    productID: string
    levelID: string
    timeUnit: number
    count?: number | null
    workingHours: number
    totalPrice?: number | null
  }

  export type BasketCreateOrConnectWithoutToolInput = {
    where: BasketWhereUniqueInput
    create: XOR<BasketCreateWithoutToolInput, BasketUncheckedCreateWithoutToolInput>
  }

  export type BasketCreateManyToolInputEnvelope = {
    data: BasketCreateManyToolInput | BasketCreateManyToolInput[]
    skipDuplicates?: boolean
  }

  export type ProductToolCreateWithoutToolInput = {
    id?: string
    product: ProductCreateNestedOneWithoutToolsInput
  }

  export type ProductToolUncheckedCreateWithoutToolInput = {
    id?: string
    productID: string
  }

  export type ProductToolCreateOrConnectWithoutToolInput = {
    where: ProductToolWhereUniqueInput
    create: XOR<ProductToolCreateWithoutToolInput, ProductToolUncheckedCreateWithoutToolInput>
  }

  export type ProductToolCreateManyToolInputEnvelope = {
    data: ProductToolCreateManyToolInput | ProductToolCreateManyToolInput[]
    skipDuplicates?: boolean
  }

  export type BrandUpsertWithoutToolsInput = {
    update: XOR<BrandUpdateWithoutToolsInput, BrandUncheckedUpdateWithoutToolsInput>
    create: XOR<BrandCreateWithoutToolsInput, BrandUncheckedCreateWithoutToolsInput>
    where?: BrandWhereInput
  }

  export type BrandUpdateToOneWithWhereWithoutToolsInput = {
    where?: BrandWhereInput
    data: XOR<BrandUpdateWithoutToolsInput, BrandUncheckedUpdateWithoutToolsInput>
  }

  export type BrandUpdateWithoutToolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
  }

  export type BrandUncheckedUpdateWithoutToolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
  }

  export type CapacityUpsertWithoutToolsInput = {
    update: XOR<CapacityUpdateWithoutToolsInput, CapacityUncheckedUpdateWithoutToolsInput>
    create: XOR<CapacityCreateWithoutToolsInput, CapacityUncheckedCreateWithoutToolsInput>
    where?: CapacityWhereInput
  }

  export type CapacityUpdateToOneWithWhereWithoutToolsInput = {
    where?: CapacityWhereInput
    data: XOR<CapacityUpdateWithoutToolsInput, CapacityUncheckedUpdateWithoutToolsInput>
  }

  export type CapacityUpdateWithoutToolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
  }

  export type CapacityUncheckedUpdateWithoutToolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
  }

  export type SizeUpsertWithoutToolsInput = {
    update: XOR<SizeUpdateWithoutToolsInput, SizeUncheckedUpdateWithoutToolsInput>
    create: XOR<SizeCreateWithoutToolsInput, SizeUncheckedCreateWithoutToolsInput>
    where?: SizeWhereInput
  }

  export type SizeUpdateToOneWithWhereWithoutToolsInput = {
    where?: SizeWhereInput
    data: XOR<SizeUpdateWithoutToolsInput, SizeUncheckedUpdateWithoutToolsInput>
  }

  export type SizeUpdateWithoutToolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
  }

  export type SizeUncheckedUpdateWithoutToolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
  }

  export type OrderItemUpsertWithWhereUniqueWithoutToolInput = {
    where: OrderItemWhereUniqueInput
    update: XOR<OrderItemUpdateWithoutToolInput, OrderItemUncheckedUpdateWithoutToolInput>
    create: XOR<OrderItemCreateWithoutToolInput, OrderItemUncheckedCreateWithoutToolInput>
  }

  export type OrderItemUpdateWithWhereUniqueWithoutToolInput = {
    where: OrderItemWhereUniqueInput
    data: XOR<OrderItemUpdateWithoutToolInput, OrderItemUncheckedUpdateWithoutToolInput>
  }

  export type OrderItemUpdateManyWithWhereWithoutToolInput = {
    where: OrderItemScalarWhereInput
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyWithoutToolInput>
  }

  export type MasterJobsUpsertWithWhereUniqueWithoutToolInput = {
    where: MasterJobsWhereUniqueInput
    update: XOR<MasterJobsUpdateWithoutToolInput, MasterJobsUncheckedUpdateWithoutToolInput>
    create: XOR<MasterJobsCreateWithoutToolInput, MasterJobsUncheckedCreateWithoutToolInput>
  }

  export type MasterJobsUpdateWithWhereUniqueWithoutToolInput = {
    where: MasterJobsWhereUniqueInput
    data: XOR<MasterJobsUpdateWithoutToolInput, MasterJobsUncheckedUpdateWithoutToolInput>
  }

  export type MasterJobsUpdateManyWithWhereWithoutToolInput = {
    where: MasterJobsScalarWhereInput
    data: XOR<MasterJobsUpdateManyMutationInput, MasterJobsUncheckedUpdateManyWithoutToolInput>
  }

  export type BasketUpsertWithWhereUniqueWithoutToolInput = {
    where: BasketWhereUniqueInput
    update: XOR<BasketUpdateWithoutToolInput, BasketUncheckedUpdateWithoutToolInput>
    create: XOR<BasketCreateWithoutToolInput, BasketUncheckedCreateWithoutToolInput>
  }

  export type BasketUpdateWithWhereUniqueWithoutToolInput = {
    where: BasketWhereUniqueInput
    data: XOR<BasketUpdateWithoutToolInput, BasketUncheckedUpdateWithoutToolInput>
  }

  export type BasketUpdateManyWithWhereWithoutToolInput = {
    where: BasketScalarWhereInput
    data: XOR<BasketUpdateManyMutationInput, BasketUncheckedUpdateManyWithoutToolInput>
  }

  export type ProductToolUpsertWithWhereUniqueWithoutToolInput = {
    where: ProductToolWhereUniqueInput
    update: XOR<ProductToolUpdateWithoutToolInput, ProductToolUncheckedUpdateWithoutToolInput>
    create: XOR<ProductToolCreateWithoutToolInput, ProductToolUncheckedCreateWithoutToolInput>
  }

  export type ProductToolUpdateWithWhereUniqueWithoutToolInput = {
    where: ProductToolWhereUniqueInput
    data: XOR<ProductToolUpdateWithoutToolInput, ProductToolUncheckedUpdateWithoutToolInput>
  }

  export type ProductToolUpdateManyWithWhereWithoutToolInput = {
    where: ProductToolScalarWhereInput
    data: XOR<ProductToolUpdateManyMutationInput, ProductToolUncheckedUpdateManyWithoutToolInput>
  }

  export type ProductCreateWithoutLevelsInput = {
    id?: string
    isActive: boolean
    nameRu: string
    nameUz: string
    nameEn: string
    image: string
    minWorkingHours: string
    hourlyPrice: number
    dailyPrice: number
    baskets?: BasketCreateNestedManyWithoutProductInput
    orderItems?: OrderItemCreateNestedManyWithoutProductInput
    masterJobs?: MasterJobsCreateNestedManyWithoutProductInput
    tools?: ProductToolCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutLevelsInput = {
    id?: string
    isActive: boolean
    nameRu: string
    nameUz: string
    nameEn: string
    image: string
    minWorkingHours: string
    hourlyPrice: number
    dailyPrice: number
    baskets?: BasketUncheckedCreateNestedManyWithoutProductInput
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutProductInput
    masterJobs?: MasterJobsUncheckedCreateNestedManyWithoutProductInput
    tools?: ProductToolUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutLevelsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutLevelsInput, ProductUncheckedCreateWithoutLevelsInput>
  }

  export type LevelCreateWithoutProductsInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    orderItems?: OrderItemCreateNestedManyWithoutLevelInput
    masterJobs?: MasterJobsCreateNestedManyWithoutLevelInput
    baskets?: BasketCreateNestedManyWithoutLevelInput
  }

  export type LevelUncheckedCreateWithoutProductsInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutLevelInput
    masterJobs?: MasterJobsUncheckedCreateNestedManyWithoutLevelInput
    baskets?: BasketUncheckedCreateNestedManyWithoutLevelInput
  }

  export type LevelCreateOrConnectWithoutProductsInput = {
    where: LevelWhereUniqueInput
    create: XOR<LevelCreateWithoutProductsInput, LevelUncheckedCreateWithoutProductsInput>
  }

  export type ProductUpsertWithoutLevelsInput = {
    update: XOR<ProductUpdateWithoutLevelsInput, ProductUncheckedUpdateWithoutLevelsInput>
    create: XOR<ProductCreateWithoutLevelsInput, ProductUncheckedCreateWithoutLevelsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutLevelsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutLevelsInput, ProductUncheckedUpdateWithoutLevelsInput>
  }

  export type ProductUpdateWithoutLevelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    minWorkingHours?: StringFieldUpdateOperationsInput | string
    hourlyPrice?: IntFieldUpdateOperationsInput | number
    dailyPrice?: IntFieldUpdateOperationsInput | number
    baskets?: BasketUpdateManyWithoutProductNestedInput
    orderItems?: OrderItemUpdateManyWithoutProductNestedInput
    masterJobs?: MasterJobsUpdateManyWithoutProductNestedInput
    tools?: ProductToolUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutLevelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    minWorkingHours?: StringFieldUpdateOperationsInput | string
    hourlyPrice?: IntFieldUpdateOperationsInput | number
    dailyPrice?: IntFieldUpdateOperationsInput | number
    baskets?: BasketUncheckedUpdateManyWithoutProductNestedInput
    orderItems?: OrderItemUncheckedUpdateManyWithoutProductNestedInput
    masterJobs?: MasterJobsUncheckedUpdateManyWithoutProductNestedInput
    tools?: ProductToolUncheckedUpdateManyWithoutProductNestedInput
  }

  export type LevelUpsertWithoutProductsInput = {
    update: XOR<LevelUpdateWithoutProductsInput, LevelUncheckedUpdateWithoutProductsInput>
    create: XOR<LevelCreateWithoutProductsInput, LevelUncheckedCreateWithoutProductsInput>
    where?: LevelWhereInput
  }

  export type LevelUpdateToOneWithWhereWithoutProductsInput = {
    where?: LevelWhereInput
    data: XOR<LevelUpdateWithoutProductsInput, LevelUncheckedUpdateWithoutProductsInput>
  }

  export type LevelUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    orderItems?: OrderItemUpdateManyWithoutLevelNestedInput
    masterJobs?: MasterJobsUpdateManyWithoutLevelNestedInput
    baskets?: BasketUpdateManyWithoutLevelNestedInput
  }

  export type LevelUncheckedUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    orderItems?: OrderItemUncheckedUpdateManyWithoutLevelNestedInput
    masterJobs?: MasterJobsUncheckedUpdateManyWithoutLevelNestedInput
    baskets?: BasketUncheckedUpdateManyWithoutLevelNestedInput
  }

  export type ProductCreateWithoutToolsInput = {
    id?: string
    isActive: boolean
    nameRu: string
    nameUz: string
    nameEn: string
    image: string
    minWorkingHours: string
    hourlyPrice: number
    dailyPrice: number
    baskets?: BasketCreateNestedManyWithoutProductInput
    orderItems?: OrderItemCreateNestedManyWithoutProductInput
    masterJobs?: MasterJobsCreateNestedManyWithoutProductInput
    levels?: ProductLevelCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutToolsInput = {
    id?: string
    isActive: boolean
    nameRu: string
    nameUz: string
    nameEn: string
    image: string
    minWorkingHours: string
    hourlyPrice: number
    dailyPrice: number
    baskets?: BasketUncheckedCreateNestedManyWithoutProductInput
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutProductInput
    masterJobs?: MasterJobsUncheckedCreateNestedManyWithoutProductInput
    levels?: ProductLevelUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutToolsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutToolsInput, ProductUncheckedCreateWithoutToolsInput>
  }

  export type ToolCreateWithoutProductsInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    descriptionRu: string
    descriptionUz: string
    descriptionEn: string
    price: number
    quantity: number
    code?: string | null
    image: string
    isActive: boolean
    brand: BrandCreateNestedOneWithoutToolsInput
    capacity: CapacityCreateNestedOneWithoutToolsInput
    size: SizeCreateNestedOneWithoutToolsInput
    orderItems?: OrderItemCreateNestedManyWithoutToolInput
    masterJobs?: MasterJobsCreateNestedManyWithoutToolInput
    baskets?: BasketCreateNestedManyWithoutToolInput
  }

  export type ToolUncheckedCreateWithoutProductsInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    descriptionRu: string
    descriptionUz: string
    descriptionEn: string
    price: number
    quantity: number
    code?: string | null
    brandID: string
    capacityID: string
    sizeID: string
    image: string
    isActive: boolean
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutToolInput
    masterJobs?: MasterJobsUncheckedCreateNestedManyWithoutToolInput
    baskets?: BasketUncheckedCreateNestedManyWithoutToolInput
  }

  export type ToolCreateOrConnectWithoutProductsInput = {
    where: ToolWhereUniqueInput
    create: XOR<ToolCreateWithoutProductsInput, ToolUncheckedCreateWithoutProductsInput>
  }

  export type ProductUpsertWithoutToolsInput = {
    update: XOR<ProductUpdateWithoutToolsInput, ProductUncheckedUpdateWithoutToolsInput>
    create: XOR<ProductCreateWithoutToolsInput, ProductUncheckedCreateWithoutToolsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutToolsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutToolsInput, ProductUncheckedUpdateWithoutToolsInput>
  }

  export type ProductUpdateWithoutToolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    minWorkingHours?: StringFieldUpdateOperationsInput | string
    hourlyPrice?: IntFieldUpdateOperationsInput | number
    dailyPrice?: IntFieldUpdateOperationsInput | number
    baskets?: BasketUpdateManyWithoutProductNestedInput
    orderItems?: OrderItemUpdateManyWithoutProductNestedInput
    masterJobs?: MasterJobsUpdateManyWithoutProductNestedInput
    levels?: ProductLevelUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutToolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    minWorkingHours?: StringFieldUpdateOperationsInput | string
    hourlyPrice?: IntFieldUpdateOperationsInput | number
    dailyPrice?: IntFieldUpdateOperationsInput | number
    baskets?: BasketUncheckedUpdateManyWithoutProductNestedInput
    orderItems?: OrderItemUncheckedUpdateManyWithoutProductNestedInput
    masterJobs?: MasterJobsUncheckedUpdateManyWithoutProductNestedInput
    levels?: ProductLevelUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ToolUpsertWithoutProductsInput = {
    update: XOR<ToolUpdateWithoutProductsInput, ToolUncheckedUpdateWithoutProductsInput>
    create: XOR<ToolCreateWithoutProductsInput, ToolUncheckedCreateWithoutProductsInput>
    where?: ToolWhereInput
  }

  export type ToolUpdateToOneWithWhereWithoutProductsInput = {
    where?: ToolWhereInput
    data: XOR<ToolUpdateWithoutProductsInput, ToolUncheckedUpdateWithoutProductsInput>
  }

  export type ToolUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    descriptionRu?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionEn?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: NullableStringFieldUpdateOperationsInput | string | null
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    brand?: BrandUpdateOneRequiredWithoutToolsNestedInput
    capacity?: CapacityUpdateOneRequiredWithoutToolsNestedInput
    size?: SizeUpdateOneRequiredWithoutToolsNestedInput
    orderItems?: OrderItemUpdateManyWithoutToolNestedInput
    masterJobs?: MasterJobsUpdateManyWithoutToolNestedInput
    baskets?: BasketUpdateManyWithoutToolNestedInput
  }

  export type ToolUncheckedUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    descriptionRu?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionEn?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: NullableStringFieldUpdateOperationsInput | string | null
    brandID?: StringFieldUpdateOperationsInput | string
    capacityID?: StringFieldUpdateOperationsInput | string
    sizeID?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    orderItems?: OrderItemUncheckedUpdateManyWithoutToolNestedInput
    masterJobs?: MasterJobsUncheckedUpdateManyWithoutToolNestedInput
    baskets?: BasketUncheckedUpdateManyWithoutToolNestedInput
  }

  export type BasketCreateManyUserInput = {
    id?: string
    productID: string
    toolID: string
    levelID: string
    timeUnit: number
    count?: number | null
    workingHours: number
    totalPrice?: number | null
  }

  export type BasketUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    timeUnit?: IntFieldUpdateOperationsInput | number
    count?: NullableIntFieldUpdateOperationsInput | number | null
    workingHours?: IntFieldUpdateOperationsInput | number
    totalPrice?: NullableIntFieldUpdateOperationsInput | number | null
    product?: ProductUpdateOneRequiredWithoutBasketsNestedInput
    tool?: ToolUpdateOneRequiredWithoutBasketsNestedInput
    level?: LevelUpdateOneRequiredWithoutBasketsNestedInput
  }

  export type BasketUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    productID?: StringFieldUpdateOperationsInput | string
    toolID?: StringFieldUpdateOperationsInput | string
    levelID?: StringFieldUpdateOperationsInput | string
    timeUnit?: IntFieldUpdateOperationsInput | number
    count?: NullableIntFieldUpdateOperationsInput | number | null
    workingHours?: IntFieldUpdateOperationsInput | number
    totalPrice?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type BasketUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    productID?: StringFieldUpdateOperationsInput | string
    toolID?: StringFieldUpdateOperationsInput | string
    levelID?: StringFieldUpdateOperationsInput | string
    timeUnit?: IntFieldUpdateOperationsInput | number
    count?: NullableIntFieldUpdateOperationsInput | number | null
    workingHours?: IntFieldUpdateOperationsInput | number
    totalPrice?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserCreateManyRegionInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    email: string
    password: string
    phone: string
    image: string
    role: $Enums.UserRole
    status: $Enums.UserStatus
    location: string
    passportSeries?: string | null
    inn?: string | null
  }

  export type UserUpdateWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    location?: StringFieldUpdateOperationsInput | string
    passportSeries?: NullableStringFieldUpdateOperationsInput | string | null
    inn?: NullableStringFieldUpdateOperationsInput | string | null
    baskets?: BasketUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    location?: StringFieldUpdateOperationsInput | string
    passportSeries?: NullableStringFieldUpdateOperationsInput | string | null
    inn?: NullableStringFieldUpdateOperationsInput | string | null
    baskets?: BasketUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    location?: StringFieldUpdateOperationsInput | string
    passportSeries?: NullableStringFieldUpdateOperationsInput | string | null
    inn?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderItemCreateManyOrderInput = {
    id?: string
    productID: string
    toolID: string
    levelID: string
    timeUnit: number
    count: number
    workingHours: number
    totalPrice?: number | null
  }

  export type CommentCreateManyOrderInput = {
    id?: string
    message: string
    star: number
    masterID: string
  }

  export type OrderItemUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    timeUnit?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    workingHours?: IntFieldUpdateOperationsInput | number
    totalPrice?: NullableIntFieldUpdateOperationsInput | number | null
    product?: ProductUpdateOneRequiredWithoutOrderItemsNestedInput
    tool?: ToolUpdateOneRequiredWithoutOrderItemsNestedInput
    level?: LevelUpdateOneRequiredWithoutOrderItemsNestedInput
  }

  export type OrderItemUncheckedUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    productID?: StringFieldUpdateOperationsInput | string
    toolID?: StringFieldUpdateOperationsInput | string
    levelID?: StringFieldUpdateOperationsInput | string
    timeUnit?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    workingHours?: IntFieldUpdateOperationsInput | number
    totalPrice?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type OrderItemUncheckedUpdateManyWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    productID?: StringFieldUpdateOperationsInput | string
    toolID?: StringFieldUpdateOperationsInput | string
    levelID?: StringFieldUpdateOperationsInput | string
    timeUnit?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    workingHours?: IntFieldUpdateOperationsInput | number
    totalPrice?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CommentUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    star?: IntFieldUpdateOperationsInput | number
    master?: MasterUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    star?: IntFieldUpdateOperationsInput | number
    masterID?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUncheckedUpdateManyWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    star?: IntFieldUpdateOperationsInput | number
    masterID?: StringFieldUpdateOperationsInput | string
  }

  export type ToolCreateManyBrandInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    descriptionRu: string
    descriptionUz: string
    descriptionEn: string
    price: number
    quantity: number
    code?: string | null
    capacityID: string
    sizeID: string
    image: string
    isActive: boolean
  }

  export type ToolUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    descriptionRu?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionEn?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: NullableStringFieldUpdateOperationsInput | string | null
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    capacity?: CapacityUpdateOneRequiredWithoutToolsNestedInput
    size?: SizeUpdateOneRequiredWithoutToolsNestedInput
    orderItems?: OrderItemUpdateManyWithoutToolNestedInput
    masterJobs?: MasterJobsUpdateManyWithoutToolNestedInput
    baskets?: BasketUpdateManyWithoutToolNestedInput
    products?: ProductToolUpdateManyWithoutToolNestedInput
  }

  export type ToolUncheckedUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    descriptionRu?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionEn?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: NullableStringFieldUpdateOperationsInput | string | null
    capacityID?: StringFieldUpdateOperationsInput | string
    sizeID?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    orderItems?: OrderItemUncheckedUpdateManyWithoutToolNestedInput
    masterJobs?: MasterJobsUncheckedUpdateManyWithoutToolNestedInput
    baskets?: BasketUncheckedUpdateManyWithoutToolNestedInput
    products?: ProductToolUncheckedUpdateManyWithoutToolNestedInput
  }

  export type ToolUncheckedUpdateManyWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    descriptionRu?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionEn?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: NullableStringFieldUpdateOperationsInput | string | null
    capacityID?: StringFieldUpdateOperationsInput | string
    sizeID?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ToolCreateManyCapacityInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    descriptionRu: string
    descriptionUz: string
    descriptionEn: string
    price: number
    quantity: number
    code?: string | null
    brandID: string
    sizeID: string
    image: string
    isActive: boolean
  }

  export type ToolUpdateWithoutCapacityInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    descriptionRu?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionEn?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: NullableStringFieldUpdateOperationsInput | string | null
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    brand?: BrandUpdateOneRequiredWithoutToolsNestedInput
    size?: SizeUpdateOneRequiredWithoutToolsNestedInput
    orderItems?: OrderItemUpdateManyWithoutToolNestedInput
    masterJobs?: MasterJobsUpdateManyWithoutToolNestedInput
    baskets?: BasketUpdateManyWithoutToolNestedInput
    products?: ProductToolUpdateManyWithoutToolNestedInput
  }

  export type ToolUncheckedUpdateWithoutCapacityInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    descriptionRu?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionEn?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: NullableStringFieldUpdateOperationsInput | string | null
    brandID?: StringFieldUpdateOperationsInput | string
    sizeID?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    orderItems?: OrderItemUncheckedUpdateManyWithoutToolNestedInput
    masterJobs?: MasterJobsUncheckedUpdateManyWithoutToolNestedInput
    baskets?: BasketUncheckedUpdateManyWithoutToolNestedInput
    products?: ProductToolUncheckedUpdateManyWithoutToolNestedInput
  }

  export type ToolUncheckedUpdateManyWithoutCapacityInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    descriptionRu?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionEn?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: NullableStringFieldUpdateOperationsInput | string | null
    brandID?: StringFieldUpdateOperationsInput | string
    sizeID?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ToolCreateManySizeInput = {
    id?: string
    nameRu: string
    nameUz: string
    nameEn: string
    descriptionRu: string
    descriptionUz: string
    descriptionEn: string
    price: number
    quantity: number
    code?: string | null
    brandID: string
    capacityID: string
    image: string
    isActive: boolean
  }

  export type ToolUpdateWithoutSizeInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    descriptionRu?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionEn?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: NullableStringFieldUpdateOperationsInput | string | null
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    brand?: BrandUpdateOneRequiredWithoutToolsNestedInput
    capacity?: CapacityUpdateOneRequiredWithoutToolsNestedInput
    orderItems?: OrderItemUpdateManyWithoutToolNestedInput
    masterJobs?: MasterJobsUpdateManyWithoutToolNestedInput
    baskets?: BasketUpdateManyWithoutToolNestedInput
    products?: ProductToolUpdateManyWithoutToolNestedInput
  }

  export type ToolUncheckedUpdateWithoutSizeInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    descriptionRu?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionEn?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: NullableStringFieldUpdateOperationsInput | string | null
    brandID?: StringFieldUpdateOperationsInput | string
    capacityID?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    orderItems?: OrderItemUncheckedUpdateManyWithoutToolNestedInput
    masterJobs?: MasterJobsUncheckedUpdateManyWithoutToolNestedInput
    baskets?: BasketUncheckedUpdateManyWithoutToolNestedInput
    products?: ProductToolUncheckedUpdateManyWithoutToolNestedInput
  }

  export type ToolUncheckedUpdateManyWithoutSizeInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameRu?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    descriptionRu?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionEn?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: NullableStringFieldUpdateOperationsInput | string | null
    brandID?: StringFieldUpdateOperationsInput | string
    capacityID?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MasterJobsCreateManyMasterInput = {
    id?: string
    toolID: string
    productID: string
    minWorkingHour: number
    workingHours: number
    levelID: string
    priceHourly: number
    priceDaily: number
    experience: string
  }

  export type CommentCreateManyMasterInput = {
    id?: string
    message: string
    star: number
    orderID: string
  }

  export type MasterJobsUpdateWithoutMasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    minWorkingHour?: IntFieldUpdateOperationsInput | number
    workingHours?: IntFieldUpdateOperationsInput | number
    priceHourly?: IntFieldUpdateOperationsInput | number
    priceDaily?: IntFieldUpdateOperationsInput | number
    experience?: StringFieldUpdateOperationsInput | string
    tool?: ToolUpdateOneRequiredWithoutMasterJobsNestedInput
    product?: ProductUpdateOneRequiredWithoutMasterJobsNestedInput
    level?: LevelUpdateOneRequiredWithoutMasterJobsNestedInput
  }

  export type MasterJobsUncheckedUpdateWithoutMasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    toolID?: StringFieldUpdateOperationsInput | string
    productID?: StringFieldUpdateOperationsInput | string
    minWorkingHour?: IntFieldUpdateOperationsInput | number
    workingHours?: IntFieldUpdateOperationsInput | number
    levelID?: StringFieldUpdateOperationsInput | string
    priceHourly?: IntFieldUpdateOperationsInput | number
    priceDaily?: IntFieldUpdateOperationsInput | number
    experience?: StringFieldUpdateOperationsInput | string
  }

  export type MasterJobsUncheckedUpdateManyWithoutMasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    toolID?: StringFieldUpdateOperationsInput | string
    productID?: StringFieldUpdateOperationsInput | string
    minWorkingHour?: IntFieldUpdateOperationsInput | number
    workingHours?: IntFieldUpdateOperationsInput | number
    levelID?: StringFieldUpdateOperationsInput | string
    priceHourly?: IntFieldUpdateOperationsInput | number
    priceDaily?: IntFieldUpdateOperationsInput | number
    experience?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUpdateWithoutMasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    star?: IntFieldUpdateOperationsInput | number
    order?: OrderUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutMasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    star?: IntFieldUpdateOperationsInput | number
    orderID?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUncheckedUpdateManyWithoutMasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    star?: IntFieldUpdateOperationsInput | number
    orderID?: StringFieldUpdateOperationsInput | string
  }

  export type BasketCreateManyProductInput = {
    id?: string
    userID: string
    toolID: string
    levelID: string
    timeUnit: number
    count?: number | null
    workingHours: number
    totalPrice?: number | null
  }

  export type OrderItemCreateManyProductInput = {
    id?: string
    orderID: string
    toolID: string
    levelID: string
    timeUnit: number
    count: number
    workingHours: number
    totalPrice?: number | null
  }

  export type MasterJobsCreateManyProductInput = {
    id?: string
    toolID: string
    minWorkingHour: number
    workingHours: number
    levelID: string
    priceHourly: number
    priceDaily: number
    experience: string
    masterID: string
  }

  export type ProductLevelCreateManyProductInput = {
    id?: string
    levelID: string
  }

  export type ProductToolCreateManyProductInput = {
    id?: string
    toolID: string
  }

  export type BasketUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    timeUnit?: IntFieldUpdateOperationsInput | number
    count?: NullableIntFieldUpdateOperationsInput | number | null
    workingHours?: IntFieldUpdateOperationsInput | number
    totalPrice?: NullableIntFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutBasketsNestedInput
    tool?: ToolUpdateOneRequiredWithoutBasketsNestedInput
    level?: LevelUpdateOneRequiredWithoutBasketsNestedInput
  }

  export type BasketUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    userID?: StringFieldUpdateOperationsInput | string
    toolID?: StringFieldUpdateOperationsInput | string
    levelID?: StringFieldUpdateOperationsInput | string
    timeUnit?: IntFieldUpdateOperationsInput | number
    count?: NullableIntFieldUpdateOperationsInput | number | null
    workingHours?: IntFieldUpdateOperationsInput | number
    totalPrice?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type BasketUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    userID?: StringFieldUpdateOperationsInput | string
    toolID?: StringFieldUpdateOperationsInput | string
    levelID?: StringFieldUpdateOperationsInput | string
    timeUnit?: IntFieldUpdateOperationsInput | number
    count?: NullableIntFieldUpdateOperationsInput | number | null
    workingHours?: IntFieldUpdateOperationsInput | number
    totalPrice?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type OrderItemUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    timeUnit?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    workingHours?: IntFieldUpdateOperationsInput | number
    totalPrice?: NullableIntFieldUpdateOperationsInput | number | null
    order?: OrderUpdateOneRequiredWithoutItemsNestedInput
    tool?: ToolUpdateOneRequiredWithoutOrderItemsNestedInput
    level?: LevelUpdateOneRequiredWithoutOrderItemsNestedInput
  }

  export type OrderItemUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderID?: StringFieldUpdateOperationsInput | string
    toolID?: StringFieldUpdateOperationsInput | string
    levelID?: StringFieldUpdateOperationsInput | string
    timeUnit?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    workingHours?: IntFieldUpdateOperationsInput | number
    totalPrice?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type OrderItemUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderID?: StringFieldUpdateOperationsInput | string
    toolID?: StringFieldUpdateOperationsInput | string
    levelID?: StringFieldUpdateOperationsInput | string
    timeUnit?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    workingHours?: IntFieldUpdateOperationsInput | number
    totalPrice?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MasterJobsUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    minWorkingHour?: IntFieldUpdateOperationsInput | number
    workingHours?: IntFieldUpdateOperationsInput | number
    priceHourly?: IntFieldUpdateOperationsInput | number
    priceDaily?: IntFieldUpdateOperationsInput | number
    experience?: StringFieldUpdateOperationsInput | string
    tool?: ToolUpdateOneRequiredWithoutMasterJobsNestedInput
    level?: LevelUpdateOneRequiredWithoutMasterJobsNestedInput
    master?: MasterUpdateOneRequiredWithoutMasterJobsNestedInput
  }

  export type MasterJobsUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    toolID?: StringFieldUpdateOperationsInput | string
    minWorkingHour?: IntFieldUpdateOperationsInput | number
    workingHours?: IntFieldUpdateOperationsInput | number
    levelID?: StringFieldUpdateOperationsInput | string
    priceHourly?: IntFieldUpdateOperationsInput | number
    priceDaily?: IntFieldUpdateOperationsInput | number
    experience?: StringFieldUpdateOperationsInput | string
    masterID?: StringFieldUpdateOperationsInput | string
  }

  export type MasterJobsUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    toolID?: StringFieldUpdateOperationsInput | string
    minWorkingHour?: IntFieldUpdateOperationsInput | number
    workingHours?: IntFieldUpdateOperationsInput | number
    levelID?: StringFieldUpdateOperationsInput | string
    priceHourly?: IntFieldUpdateOperationsInput | number
    priceDaily?: IntFieldUpdateOperationsInput | number
    experience?: StringFieldUpdateOperationsInput | string
    masterID?: StringFieldUpdateOperationsInput | string
  }

  export type ProductLevelUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: LevelUpdateOneRequiredWithoutProductsNestedInput
  }

  export type ProductLevelUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    levelID?: StringFieldUpdateOperationsInput | string
  }

  export type ProductLevelUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    levelID?: StringFieldUpdateOperationsInput | string
  }

  export type ProductToolUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    tool?: ToolUpdateOneRequiredWithoutProductsNestedInput
  }

  export type ProductToolUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    toolID?: StringFieldUpdateOperationsInput | string
  }

  export type ProductToolUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    toolID?: StringFieldUpdateOperationsInput | string
  }

  export type OrderItemCreateManyLevelInput = {
    id?: string
    orderID: string
    productID: string
    toolID: string
    timeUnit: number
    count: number
    workingHours: number
    totalPrice?: number | null
  }

  export type MasterJobsCreateManyLevelInput = {
    id?: string
    toolID: string
    productID: string
    minWorkingHour: number
    workingHours: number
    priceHourly: number
    priceDaily: number
    experience: string
    masterID: string
  }

  export type ProductLevelCreateManyLevelInput = {
    id?: string
    productID: string
  }

  export type BasketCreateManyLevelInput = {
    id?: string
    userID: string
    productID: string
    toolID: string
    timeUnit: number
    count?: number | null
    workingHours: number
    totalPrice?: number | null
  }

  export type OrderItemUpdateWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    timeUnit?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    workingHours?: IntFieldUpdateOperationsInput | number
    totalPrice?: NullableIntFieldUpdateOperationsInput | number | null
    order?: OrderUpdateOneRequiredWithoutItemsNestedInput
    product?: ProductUpdateOneRequiredWithoutOrderItemsNestedInput
    tool?: ToolUpdateOneRequiredWithoutOrderItemsNestedInput
  }

  export type OrderItemUncheckedUpdateWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderID?: StringFieldUpdateOperationsInput | string
    productID?: StringFieldUpdateOperationsInput | string
    toolID?: StringFieldUpdateOperationsInput | string
    timeUnit?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    workingHours?: IntFieldUpdateOperationsInput | number
    totalPrice?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type OrderItemUncheckedUpdateManyWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderID?: StringFieldUpdateOperationsInput | string
    productID?: StringFieldUpdateOperationsInput | string
    toolID?: StringFieldUpdateOperationsInput | string
    timeUnit?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    workingHours?: IntFieldUpdateOperationsInput | number
    totalPrice?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MasterJobsUpdateWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    minWorkingHour?: IntFieldUpdateOperationsInput | number
    workingHours?: IntFieldUpdateOperationsInput | number
    priceHourly?: IntFieldUpdateOperationsInput | number
    priceDaily?: IntFieldUpdateOperationsInput | number
    experience?: StringFieldUpdateOperationsInput | string
    tool?: ToolUpdateOneRequiredWithoutMasterJobsNestedInput
    product?: ProductUpdateOneRequiredWithoutMasterJobsNestedInput
    master?: MasterUpdateOneRequiredWithoutMasterJobsNestedInput
  }

  export type MasterJobsUncheckedUpdateWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    toolID?: StringFieldUpdateOperationsInput | string
    productID?: StringFieldUpdateOperationsInput | string
    minWorkingHour?: IntFieldUpdateOperationsInput | number
    workingHours?: IntFieldUpdateOperationsInput | number
    priceHourly?: IntFieldUpdateOperationsInput | number
    priceDaily?: IntFieldUpdateOperationsInput | number
    experience?: StringFieldUpdateOperationsInput | string
    masterID?: StringFieldUpdateOperationsInput | string
  }

  export type MasterJobsUncheckedUpdateManyWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    toolID?: StringFieldUpdateOperationsInput | string
    productID?: StringFieldUpdateOperationsInput | string
    minWorkingHour?: IntFieldUpdateOperationsInput | number
    workingHours?: IntFieldUpdateOperationsInput | number
    priceHourly?: IntFieldUpdateOperationsInput | number
    priceDaily?: IntFieldUpdateOperationsInput | number
    experience?: StringFieldUpdateOperationsInput | string
    masterID?: StringFieldUpdateOperationsInput | string
  }

  export type ProductLevelUpdateWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    product?: ProductUpdateOneRequiredWithoutLevelsNestedInput
  }

  export type ProductLevelUncheckedUpdateWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    productID?: StringFieldUpdateOperationsInput | string
  }

  export type ProductLevelUncheckedUpdateManyWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    productID?: StringFieldUpdateOperationsInput | string
  }

  export type BasketUpdateWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    timeUnit?: IntFieldUpdateOperationsInput | number
    count?: NullableIntFieldUpdateOperationsInput | number | null
    workingHours?: IntFieldUpdateOperationsInput | number
    totalPrice?: NullableIntFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutBasketsNestedInput
    product?: ProductUpdateOneRequiredWithoutBasketsNestedInput
    tool?: ToolUpdateOneRequiredWithoutBasketsNestedInput
  }

  export type BasketUncheckedUpdateWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    userID?: StringFieldUpdateOperationsInput | string
    productID?: StringFieldUpdateOperationsInput | string
    toolID?: StringFieldUpdateOperationsInput | string
    timeUnit?: IntFieldUpdateOperationsInput | number
    count?: NullableIntFieldUpdateOperationsInput | number | null
    workingHours?: IntFieldUpdateOperationsInput | number
    totalPrice?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type BasketUncheckedUpdateManyWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    userID?: StringFieldUpdateOperationsInput | string
    productID?: StringFieldUpdateOperationsInput | string
    toolID?: StringFieldUpdateOperationsInput | string
    timeUnit?: IntFieldUpdateOperationsInput | number
    count?: NullableIntFieldUpdateOperationsInput | number | null
    workingHours?: IntFieldUpdateOperationsInput | number
    totalPrice?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type OrderItemCreateManyToolInput = {
    id?: string
    orderID: string
    productID: string
    levelID: string
    timeUnit: number
    count: number
    workingHours: number
    totalPrice?: number | null
  }

  export type MasterJobsCreateManyToolInput = {
    id?: string
    productID: string
    minWorkingHour: number
    workingHours: number
    levelID: string
    priceHourly: number
    priceDaily: number
    experience: string
    masterID: string
  }

  export type BasketCreateManyToolInput = {
    id?: string
    userID: string
    productID: string
    levelID: string
    timeUnit: number
    count?: number | null
    workingHours: number
    totalPrice?: number | null
  }

  export type ProductToolCreateManyToolInput = {
    id?: string
    productID: string
  }

  export type OrderItemUpdateWithoutToolInput = {
    id?: StringFieldUpdateOperationsInput | string
    timeUnit?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    workingHours?: IntFieldUpdateOperationsInput | number
    totalPrice?: NullableIntFieldUpdateOperationsInput | number | null
    order?: OrderUpdateOneRequiredWithoutItemsNestedInput
    product?: ProductUpdateOneRequiredWithoutOrderItemsNestedInput
    level?: LevelUpdateOneRequiredWithoutOrderItemsNestedInput
  }

  export type OrderItemUncheckedUpdateWithoutToolInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderID?: StringFieldUpdateOperationsInput | string
    productID?: StringFieldUpdateOperationsInput | string
    levelID?: StringFieldUpdateOperationsInput | string
    timeUnit?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    workingHours?: IntFieldUpdateOperationsInput | number
    totalPrice?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type OrderItemUncheckedUpdateManyWithoutToolInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderID?: StringFieldUpdateOperationsInput | string
    productID?: StringFieldUpdateOperationsInput | string
    levelID?: StringFieldUpdateOperationsInput | string
    timeUnit?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    workingHours?: IntFieldUpdateOperationsInput | number
    totalPrice?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MasterJobsUpdateWithoutToolInput = {
    id?: StringFieldUpdateOperationsInput | string
    minWorkingHour?: IntFieldUpdateOperationsInput | number
    workingHours?: IntFieldUpdateOperationsInput | number
    priceHourly?: IntFieldUpdateOperationsInput | number
    priceDaily?: IntFieldUpdateOperationsInput | number
    experience?: StringFieldUpdateOperationsInput | string
    product?: ProductUpdateOneRequiredWithoutMasterJobsNestedInput
    level?: LevelUpdateOneRequiredWithoutMasterJobsNestedInput
    master?: MasterUpdateOneRequiredWithoutMasterJobsNestedInput
  }

  export type MasterJobsUncheckedUpdateWithoutToolInput = {
    id?: StringFieldUpdateOperationsInput | string
    productID?: StringFieldUpdateOperationsInput | string
    minWorkingHour?: IntFieldUpdateOperationsInput | number
    workingHours?: IntFieldUpdateOperationsInput | number
    levelID?: StringFieldUpdateOperationsInput | string
    priceHourly?: IntFieldUpdateOperationsInput | number
    priceDaily?: IntFieldUpdateOperationsInput | number
    experience?: StringFieldUpdateOperationsInput | string
    masterID?: StringFieldUpdateOperationsInput | string
  }

  export type MasterJobsUncheckedUpdateManyWithoutToolInput = {
    id?: StringFieldUpdateOperationsInput | string
    productID?: StringFieldUpdateOperationsInput | string
    minWorkingHour?: IntFieldUpdateOperationsInput | number
    workingHours?: IntFieldUpdateOperationsInput | number
    levelID?: StringFieldUpdateOperationsInput | string
    priceHourly?: IntFieldUpdateOperationsInput | number
    priceDaily?: IntFieldUpdateOperationsInput | number
    experience?: StringFieldUpdateOperationsInput | string
    masterID?: StringFieldUpdateOperationsInput | string
  }

  export type BasketUpdateWithoutToolInput = {
    id?: StringFieldUpdateOperationsInput | string
    timeUnit?: IntFieldUpdateOperationsInput | number
    count?: NullableIntFieldUpdateOperationsInput | number | null
    workingHours?: IntFieldUpdateOperationsInput | number
    totalPrice?: NullableIntFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutBasketsNestedInput
    product?: ProductUpdateOneRequiredWithoutBasketsNestedInput
    level?: LevelUpdateOneRequiredWithoutBasketsNestedInput
  }

  export type BasketUncheckedUpdateWithoutToolInput = {
    id?: StringFieldUpdateOperationsInput | string
    userID?: StringFieldUpdateOperationsInput | string
    productID?: StringFieldUpdateOperationsInput | string
    levelID?: StringFieldUpdateOperationsInput | string
    timeUnit?: IntFieldUpdateOperationsInput | number
    count?: NullableIntFieldUpdateOperationsInput | number | null
    workingHours?: IntFieldUpdateOperationsInput | number
    totalPrice?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type BasketUncheckedUpdateManyWithoutToolInput = {
    id?: StringFieldUpdateOperationsInput | string
    userID?: StringFieldUpdateOperationsInput | string
    productID?: StringFieldUpdateOperationsInput | string
    levelID?: StringFieldUpdateOperationsInput | string
    timeUnit?: IntFieldUpdateOperationsInput | number
    count?: NullableIntFieldUpdateOperationsInput | number | null
    workingHours?: IntFieldUpdateOperationsInput | number
    totalPrice?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProductToolUpdateWithoutToolInput = {
    id?: StringFieldUpdateOperationsInput | string
    product?: ProductUpdateOneRequiredWithoutToolsNestedInput
  }

  export type ProductToolUncheckedUpdateWithoutToolInput = {
    id?: StringFieldUpdateOperationsInput | string
    productID?: StringFieldUpdateOperationsInput | string
  }

  export type ProductToolUncheckedUpdateManyWithoutToolInput = {
    id?: StringFieldUpdateOperationsInput | string
    productID?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}